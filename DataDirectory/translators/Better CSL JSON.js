{
	"translatorID": "f4b52ab0-f878-4556-85a0-c7aeedd09dfc",
	"label": "Better CSL JSON",
	"description": "exports items in pandoc-compatible CSL-JSON format, with added citation keys and parsing of metadata",
	"creator": "Emiliano heyns",
	"target": "json",
	"minVersion": "4.0.27",
	"maxVersion": "",
	"displayOptions": {
		"keepUpdated": false
	},
	"configOptions": {
		"getCollections": true,
		"hash": "1c6894e62ff2310fb7c140f3d90d4700dfe9f8b298c16369bbb5ea2e63cab875"
	},
	"translatorType": 2,
	"browserSupport": "gcsv",
	"inRepository": false,
	"priority": 100,
	"lastUpdated": "2022-06-30"
}

ZOTERO_CONFIG = {"GUID":"zotero@chnm.gmu.edu","ID":"zotero","CLIENT_NAME":"Zotero","DOMAIN_NAME":"zotero.org","PRODUCER":"Digital Scholar","PRODUCER_URL":"https://digitalscholar.org","REPOSITORY_URL":"https://repo.zotero.org/repo/","BASE_URI":"http://zotero.org/","WWW_BASE_URL":"https://www.zotero.org/","PROXY_AUTH_URL":"https://zoteroproxycheck.s3.amazonaws.com/test","API_URL":"https://api.zotero.org/","STREAMING_URL":"wss://stream.zotero.org/","SERVICES_URL":"https://services.zotero.org/","API_VERSION":3,"CONNECTOR_MIN_VERSION":"5.0.39","PREF_BRANCH":"extensions.zotero.","BOOKMARKLET_ORIGIN":"https://www.zotero.org","BOOKMARKLET_URL":"https://www.zotero.org/bookmarklet/","START_URL":"https://www.zotero.org/start","QUICK_START_URL":"https://www.zotero.org/support/quick_start_guide","PDF_TOOLS_URL":"https://www.zotero.org/download/xpdf/","SUPPORT_URL":"https://www.zotero.org/support/","SYNC_INFO_URL":"https://www.zotero.org/support/sync","TROUBLESHOOTING_URL":"https://www.zotero.org/support/getting_help","FEEDBACK_URL":"https://forums.zotero.org/","CONNECTORS_URL":"https://www.zotero.org/download/connectors","CHANGELOG_URL":"https://www.zotero.org/support/changelog","CREDITS_URL":"https://www.zotero.org/support/credits_and_acknowledgments","LICENSING_URL":"https://www.zotero.org/support/licensing","GET_INVOLVED_URL":"https://www.zotero.org/getinvolved","DICTIONARIES_URL":"https://download.zotero.org/dictionaries/"}

        if (typeof ZOTERO_TRANSLATOR_INFO === 'undefined') var ZOTERO_TRANSLATOR_INFO = {}; // declare if not declared
        Object.assign(ZOTERO_TRANSLATOR_INFO, {"translatorID":"f4b52ab0-f878-4556-85a0-c7aeedd09dfc","label":"Better CSL JSON","description":"exports items in pandoc-compatible CSL-JSON format, with added citation keys and parsing of metadata","creator":"Emiliano heyns","target":"json","minVersion":"4.0.27","maxVersion":"","displayOptions":{"keepUpdated":false},"configOptions":{"getCollections":true},"translatorType":2,"browserSupport":"gcsv","inRepository":false,"priority":100}); // assign new data
      
var BetterCSLJSON__Translator__doExport = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/process/browser.js"(exports, module) {
      init_globals();
      var process2 = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process2.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process2.title = "browser";
      process2.browser = true;
      process2.env = {};
      process2.argv = [];
      process2.version = "";
      process2.versions = {};
      function noop2() {
      }
      process2.on = noop2;
      process2.addListener = noop2;
      process2.once = noop2;
      process2.off = noop2;
      process2.removeListener = noop2;
      process2.removeAllListeners = noop2;
      process2.emit = noop2;
      process2.prependListener = noop2;
      process2.prependOnceListener = noop2;
      process2.listeners = function(name) {
        return [];
      };
      process2.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process2.cwd = function() {
        return "/";
      };
      process2.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process2.umask = function() {
        return 0;
      };
    }
  });

  // setup/loaders/globals.js
  var process, global;
  var init_globals = __esm({
    "setup/loaders/globals.js"() {
      process = require_browser();
      global = Function("return this")();
    }
  });

  // node_modules/ajv/dist/compile/codegen/code.js
  var require_code = __commonJS({
    "node_modules/ajv/dist/compile/codegen/code.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
      var _CodeOrName = class {
      };
      exports._CodeOrName = _CodeOrName;
      exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
      var Name = class extends _CodeOrName {
        constructor(s) {
          super();
          if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
          this.str = s;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          return false;
        }
        get names() {
          return { [this.str]: 1 };
        }
      };
      exports.Name = Name;
      var _Code = class extends _CodeOrName {
        constructor(code2) {
          super();
          this._items = typeof code2 === "string" ? [code2] : code2;
        }
        toString() {
          return this.str;
        }
        emptyStr() {
          if (this._items.length > 1)
            return false;
          const item = this._items[0];
          return item === "" || item === '""';
        }
        get str() {
          var _a;
          return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
        }
        get names() {
          var _a;
          return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names2, c) => {
            if (c instanceof Name)
              names2[c.str] = (names2[c.str] || 0) + 1;
            return names2;
          }, {});
        }
      };
      exports._Code = _Code;
      exports.nil = new _Code("");
      function _(strs, ...args) {
        const code2 = [strs[0]];
        let i = 0;
        while (i < args.length) {
          addCodeArg(code2, args[i]);
          code2.push(strs[++i]);
        }
        return new _Code(code2);
      }
      exports._ = _;
      var plus = new _Code("+");
      function str(strs, ...args) {
        const expr = [safeStringify(strs[0])];
        let i = 0;
        while (i < args.length) {
          expr.push(plus);
          addCodeArg(expr, args[i]);
          expr.push(plus, safeStringify(strs[++i]));
        }
        optimize(expr);
        return new _Code(expr);
      }
      exports.str = str;
      function addCodeArg(code2, arg) {
        if (arg instanceof _Code)
          code2.push(...arg._items);
        else if (arg instanceof Name)
          code2.push(arg);
        else
          code2.push(interpolate(arg));
      }
      exports.addCodeArg = addCodeArg;
      function optimize(expr) {
        let i = 1;
        while (i < expr.length - 1) {
          if (expr[i] === plus) {
            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== void 0) {
              expr.splice(i - 1, 3, res);
              continue;
            }
            expr[i++] = "+";
          }
          i++;
        }
      }
      function mergeExprItems(a, b) {
        if (b === '""')
          return a;
        if (a === '""')
          return b;
        if (typeof a == "string") {
          if (b instanceof Name || a[a.length - 1] !== '"')
            return;
          if (typeof b != "string")
            return `${a.slice(0, -1)}${b}"`;
          if (b[0] === '"')
            return a.slice(0, -1) + b.slice(1);
          return;
        }
        if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
          return `"${a}${b.slice(1)}`;
        return;
      }
      function strConcat(c1, c2) {
        return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
      }
      exports.strConcat = strConcat;
      function interpolate(x) {
        return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
      }
      function stringify(x) {
        return new _Code(safeStringify(x));
      }
      exports.stringify = stringify;
      function safeStringify(x) {
        return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      exports.safeStringify = safeStringify;
      function getProperty(key) {
        return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;
      }
      exports.getProperty = getProperty;
      function getEsmExportName(key) {
        if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
          return new _Code(`${key}`);
        }
        throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
      }
      exports.getEsmExportName = getEsmExportName;
      function regexpCode(rx) {
        return new _Code(rx.toString());
      }
      exports.regexpCode = regexpCode;
    }
  });

  // node_modules/ajv/dist/compile/codegen/scope.js
  var require_scope = __commonJS({
    "node_modules/ajv/dist/compile/codegen/scope.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
      var code_1 = require_code();
      var ValueError = class extends Error {
        constructor(name) {
          super(`CodeGen: "code" for ${name} not defined`);
          this.value = name.value;
        }
      };
      var UsedValueState;
      (function(UsedValueState2) {
        UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
        UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
      })(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
      exports.varKinds = {
        const: new code_1.Name("const"),
        let: new code_1.Name("let"),
        var: new code_1.Name("var")
      };
      var Scope = class {
        constructor({ prefixes, parent } = {}) {
          this._names = {};
          this._prefixes = prefixes;
          this._parent = parent;
        }
        toName(nameOrPrefix) {
          return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
        }
        name(prefix) {
          return new code_1.Name(this._newName(prefix));
        }
        _newName(prefix) {
          const ng = this._names[prefix] || this._nameGroup(prefix);
          return `${prefix}${ng.index++}`;
        }
        _nameGroup(prefix) {
          var _a, _b;
          if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
          }
          return this._names[prefix] = { prefix, index: 0 };
        }
      };
      exports.Scope = Scope;
      var ValueScopeName = class extends code_1.Name {
        constructor(prefix, nameStr) {
          super(nameStr);
          this.prefix = prefix;
        }
        setValue(value, { property, itemIndex }) {
          this.value = value;
          this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
        }
      };
      exports.ValueScopeName = ValueScopeName;
      var line = (0, code_1._)`\n`;
      var ValueScope = class extends Scope {
        constructor(opts) {
          super(opts);
          this._values = {};
          this._scope = opts.scope;
          this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
        }
        get() {
          return this._scope;
        }
        name(prefix) {
          return new ValueScopeName(prefix, this._newName(prefix));
        }
        value(nameOrPrefix, value) {
          var _a;
          if (value.ref === void 0)
            throw new Error("CodeGen: ref must be passed in value");
          const name = this.toName(nameOrPrefix);
          const { prefix } = name;
          const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
          let vs = this._values[prefix];
          if (vs) {
            const _name = vs.get(valueKey);
            if (_name)
              return _name;
          } else {
            vs = this._values[prefix] = /* @__PURE__ */ new Map();
          }
          vs.set(valueKey, name);
          const s = this._scope[prefix] || (this._scope[prefix] = []);
          const itemIndex = s.length;
          s[itemIndex] = value.ref;
          name.setValue(value, { property: prefix, itemIndex });
          return name;
        }
        getValue(prefix, keyOrRef) {
          const vs = this._values[prefix];
          if (!vs)
            return;
          return vs.get(keyOrRef);
        }
        scopeRefs(scopeName, values = this._values) {
          return this._reduceValues(values, (name) => {
            if (name.scopePath === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._)`${scopeName}${name.scopePath}`;
          });
        }
        scopeCode(values = this._values, usedValues, getCode) {
          return this._reduceValues(values, (name) => {
            if (name.value === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
          }, usedValues, getCode);
        }
        _reduceValues(values, valueCode, usedValues = {}, getCode) {
          let code2 = code_1.nil;
          for (const prefix in values) {
            const vs = values[prefix];
            if (!vs)
              continue;
            const nameSet = usedValues[prefix] = usedValues[prefix] || /* @__PURE__ */ new Map();
            vs.forEach((name) => {
              if (nameSet.has(name))
                return;
              nameSet.set(name, UsedValueState.Started);
              let c = valueCode(name);
              if (c) {
                const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                code2 = (0, code_1._)`${code2}${def} ${name} = ${c};${this.opts._n}`;
              } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
                code2 = (0, code_1._)`${code2}${c}${this.opts._n}`;
              } else {
                throw new ValueError(name);
              }
              nameSet.set(name, UsedValueState.Completed);
            });
          }
          return code2;
        }
      };
      exports.ValueScope = ValueScope;
    }
  });

  // node_modules/ajv/dist/compile/codegen/index.js
  var require_codegen = __commonJS({
    "node_modules/ajv/dist/compile/codegen/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
      var code_1 = require_code();
      var scope_1 = require_scope();
      var code_2 = require_code();
      Object.defineProperty(exports, "_", { enumerable: true, get: function() {
        return code_2._;
      } });
      Object.defineProperty(exports, "str", { enumerable: true, get: function() {
        return code_2.str;
      } });
      Object.defineProperty(exports, "strConcat", { enumerable: true, get: function() {
        return code_2.strConcat;
      } });
      Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
        return code_2.nil;
      } });
      Object.defineProperty(exports, "getProperty", { enumerable: true, get: function() {
        return code_2.getProperty;
      } });
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return code_2.stringify;
      } });
      Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function() {
        return code_2.regexpCode;
      } });
      Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
        return code_2.Name;
      } });
      var scope_2 = require_scope();
      Object.defineProperty(exports, "Scope", { enumerable: true, get: function() {
        return scope_2.Scope;
      } });
      Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function() {
        return scope_2.ValueScope;
      } });
      Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function() {
        return scope_2.ValueScopeName;
      } });
      Object.defineProperty(exports, "varKinds", { enumerable: true, get: function() {
        return scope_2.varKinds;
      } });
      exports.operators = {
        GT: new code_1._Code(">"),
        GTE: new code_1._Code(">="),
        LT: new code_1._Code("<"),
        LTE: new code_1._Code("<="),
        EQ: new code_1._Code("==="),
        NEQ: new code_1._Code("!=="),
        NOT: new code_1._Code("!"),
        OR: new code_1._Code("||"),
        AND: new code_1._Code("&&"),
        ADD: new code_1._Code("+")
      };
      var Node = class {
        optimizeNodes() {
          return this;
        }
        optimizeNames(_names, _constants) {
          return this;
        }
      };
      var Def = class extends Node {
        constructor(varKind, name, rhs) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.rhs = rhs;
        }
        render({ es5, _n }) {
          const varKind = es5 ? scope_1.varKinds.var : this.varKind;
          const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
          return `${varKind} ${this.name}${rhs};` + _n;
        }
        optimizeNames(names2, constants) {
          if (!names2[this.name.str])
            return;
          if (this.rhs)
            this.rhs = optimizeExpr(this.rhs, names2, constants);
          return this;
        }
        get names() {
          return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
        }
      };
      var Assign = class extends Node {
        constructor(lhs, rhs, sideEffects) {
          super();
          this.lhs = lhs;
          this.rhs = rhs;
          this.sideEffects = sideEffects;
        }
        render({ _n }) {
          return `${this.lhs} = ${this.rhs};` + _n;
        }
        optimizeNames(names2, constants) {
          if (this.lhs instanceof code_1.Name && !names2[this.lhs.str] && !this.sideEffects)
            return;
          this.rhs = optimizeExpr(this.rhs, names2, constants);
          return this;
        }
        get names() {
          const names2 = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
          return addExprNames(names2, this.rhs);
        }
      };
      var AssignOp = class extends Assign {
        constructor(lhs, op, rhs, sideEffects) {
          super(lhs, rhs, sideEffects);
          this.op = op;
        }
        render({ _n }) {
          return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
        }
      };
      var Label = class extends Node {
        constructor(label2) {
          super();
          this.label = label2;
          this.names = {};
        }
        render({ _n }) {
          return `${this.label}:` + _n;
        }
      };
      var Break = class extends Node {
        constructor(label2) {
          super();
          this.label = label2;
          this.names = {};
        }
        render({ _n }) {
          const label2 = this.label ? ` ${this.label}` : "";
          return `break${label2};` + _n;
        }
      };
      var Throw = class extends Node {
        constructor(error) {
          super();
          this.error = error;
        }
        render({ _n }) {
          return `throw ${this.error};` + _n;
        }
        get names() {
          return this.error.names;
        }
      };
      var AnyCode = class extends Node {
        constructor(code2) {
          super();
          this.code = code2;
        }
        render({ _n }) {
          return `${this.code};` + _n;
        }
        optimizeNodes() {
          return `${this.code}` ? this : void 0;
        }
        optimizeNames(names2, constants) {
          this.code = optimizeExpr(this.code, names2, constants);
          return this;
        }
        get names() {
          return this.code instanceof code_1._CodeOrName ? this.code.names : {};
        }
      };
      var ParentNode = class extends Node {
        constructor(nodes = []) {
          super();
          this.nodes = nodes;
        }
        render(opts) {
          return this.nodes.reduce((code2, n) => code2 + n.render(opts), "");
        }
        optimizeNodes() {
          const { nodes } = this;
          let i = nodes.length;
          while (i--) {
            const n = nodes[i].optimizeNodes();
            if (Array.isArray(n))
              nodes.splice(i, 1, ...n);
            else if (n)
              nodes[i] = n;
            else
              nodes.splice(i, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        optimizeNames(names2, constants) {
          const { nodes } = this;
          let i = nodes.length;
          while (i--) {
            const n = nodes[i];
            if (n.optimizeNames(names2, constants))
              continue;
            subtractNames(names2, n.names);
            nodes.splice(i, 1);
          }
          return nodes.length > 0 ? this : void 0;
        }
        get names() {
          return this.nodes.reduce((names2, n) => addNames(names2, n.names), {});
        }
      };
      var BlockNode = class extends ParentNode {
        render(opts) {
          return "{" + opts._n + super.render(opts) + "}" + opts._n;
        }
      };
      var Root = class extends ParentNode {
      };
      var Else = class extends BlockNode {
      };
      Else.kind = "else";
      var If = class extends BlockNode {
        constructor(condition, nodes) {
          super(nodes);
          this.condition = condition;
        }
        render(opts) {
          let code2 = `if(${this.condition})` + super.render(opts);
          if (this.else)
            code2 += "else " + this.else.render(opts);
          return code2;
        }
        optimizeNodes() {
          super.optimizeNodes();
          const cond = this.condition;
          if (cond === true)
            return this.nodes;
          let e = this.else;
          if (e) {
            const ns = e.optimizeNodes();
            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
          }
          if (e) {
            if (cond === false)
              return e instanceof If ? e : e.nodes;
            if (this.nodes.length)
              return this;
            return new If(not2(cond), e instanceof If ? [e] : e.nodes);
          }
          if (cond === false || !this.nodes.length)
            return void 0;
          return this;
        }
        optimizeNames(names2, constants) {
          var _a;
          this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names2, constants);
          if (!(super.optimizeNames(names2, constants) || this.else))
            return;
          this.condition = optimizeExpr(this.condition, names2, constants);
          return this;
        }
        get names() {
          const names2 = super.names;
          addExprNames(names2, this.condition);
          if (this.else)
            addNames(names2, this.else.names);
          return names2;
        }
      };
      If.kind = "if";
      var For = class extends BlockNode {
      };
      For.kind = "for";
      var ForLoop = class extends For {
        constructor(iteration) {
          super();
          this.iteration = iteration;
        }
        render(opts) {
          return `for(${this.iteration})` + super.render(opts);
        }
        optimizeNames(names2, constants) {
          if (!super.optimizeNames(names2, constants))
            return;
          this.iteration = optimizeExpr(this.iteration, names2, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iteration.names);
        }
      };
      var ForRange = class extends For {
        constructor(varKind, name, from, to) {
          super();
          this.varKind = varKind;
          this.name = name;
          this.from = from;
          this.to = to;
        }
        render(opts) {
          const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
          const { name, from, to } = this;
          return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
        }
        get names() {
          const names2 = addExprNames(super.names, this.from);
          return addExprNames(names2, this.to);
        }
      };
      var ForIter = class extends For {
        constructor(loop, varKind, name, iterable) {
          super();
          this.loop = loop;
          this.varKind = varKind;
          this.name = name;
          this.iterable = iterable;
        }
        render(opts) {
          return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
        }
        optimizeNames(names2, constants) {
          if (!super.optimizeNames(names2, constants))
            return;
          this.iterable = optimizeExpr(this.iterable, names2, constants);
          return this;
        }
        get names() {
          return addNames(super.names, this.iterable.names);
        }
      };
      var Func = class extends BlockNode {
        constructor(name, args, async) {
          super();
          this.name = name;
          this.args = args;
          this.async = async;
        }
        render(opts) {
          const _async = this.async ? "async " : "";
          return `${_async}function ${this.name}(${this.args})` + super.render(opts);
        }
      };
      Func.kind = "func";
      var Return = class extends ParentNode {
        render(opts) {
          return "return " + super.render(opts);
        }
      };
      Return.kind = "return";
      var Try = class extends BlockNode {
        render(opts) {
          let code2 = "try" + super.render(opts);
          if (this.catch)
            code2 += this.catch.render(opts);
          if (this.finally)
            code2 += this.finally.render(opts);
          return code2;
        }
        optimizeNodes() {
          var _a, _b;
          super.optimizeNodes();
          (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
          return this;
        }
        optimizeNames(names2, constants) {
          var _a, _b;
          super.optimizeNames(names2, constants);
          (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names2, constants);
          (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names2, constants);
          return this;
        }
        get names() {
          const names2 = super.names;
          if (this.catch)
            addNames(names2, this.catch.names);
          if (this.finally)
            addNames(names2, this.finally.names);
          return names2;
        }
      };
      var Catch = class extends BlockNode {
        constructor(error) {
          super();
          this.error = error;
        }
        render(opts) {
          return `catch(${this.error})` + super.render(opts);
        }
      };
      Catch.kind = "catch";
      var Finally = class extends BlockNode {
        render(opts) {
          return "finally" + super.render(opts);
        }
      };
      Finally.kind = "finally";
      var CodeGen = class {
        constructor(extScope, opts = {}) {
          this._values = {};
          this._blockStarts = [];
          this._constants = {};
          this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
          this._extScope = extScope;
          this._scope = new scope_1.Scope({ parent: extScope });
          this._nodes = [new Root()];
        }
        toString() {
          return this._root.render(this.opts);
        }
        name(prefix) {
          return this._scope.name(prefix);
        }
        scopeName(prefix) {
          return this._extScope.name(prefix);
        }
        scopeValue(prefixOrName, value) {
          const name = this._extScope.value(prefixOrName, value);
          const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
          vs.add(name);
          return name;
        }
        getScopeValue(prefix, keyOrRef) {
          return this._extScope.getValue(prefix, keyOrRef);
        }
        scopeRefs(scopeName) {
          return this._extScope.scopeRefs(scopeName, this._values);
        }
        scopeCode() {
          return this._extScope.scopeCode(this._values);
        }
        _def(varKind, nameOrPrefix, rhs, constant) {
          const name = this._scope.toName(nameOrPrefix);
          if (rhs !== void 0 && constant)
            this._constants[name.str] = rhs;
          this._leafNode(new Def(varKind, name, rhs));
          return name;
        }
        const(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
        }
        let(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
        }
        var(nameOrPrefix, rhs, _constant) {
          return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
        }
        assign(lhs, rhs, sideEffects) {
          return this._leafNode(new Assign(lhs, rhs, sideEffects));
        }
        add(lhs, rhs) {
          return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
        }
        code(c) {
          if (typeof c == "function")
            c();
          else if (c !== code_1.nil)
            this._leafNode(new AnyCode(c));
          return this;
        }
        object(...keyValues) {
          const code2 = ["{"];
          for (const [key, value] of keyValues) {
            if (code2.length > 1)
              code2.push(",");
            code2.push(key);
            if (key !== value || this.opts.es5) {
              code2.push(":");
              (0, code_1.addCodeArg)(code2, value);
            }
          }
          code2.push("}");
          return new code_1._Code(code2);
        }
        if(condition, thenBody, elseBody) {
          this._blockNode(new If(condition));
          if (thenBody && elseBody) {
            this.code(thenBody).else().code(elseBody).endIf();
          } else if (thenBody) {
            this.code(thenBody).endIf();
          } else if (elseBody) {
            throw new Error('CodeGen: "else" body without "then" body');
          }
          return this;
        }
        elseIf(condition) {
          return this._elseNode(new If(condition));
        }
        else() {
          return this._elseNode(new Else());
        }
        endIf() {
          return this._endBlockNode(If, Else);
        }
        _for(node, forBody) {
          this._blockNode(node);
          if (forBody)
            this.code(forBody).endFor();
          return this;
        }
        for(iteration, forBody) {
          return this._for(new ForLoop(iteration), forBody);
        }
        forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
        }
        forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
          const name = this._scope.toName(nameOrPrefix);
          if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i) => {
              this.var(name, (0, code_1._)`${arr}[${i}]`);
              forBody(name);
            });
          }
          return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
        }
        forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
          if (this.opts.ownProperties) {
            return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
          }
          const name = this._scope.toName(nameOrPrefix);
          return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
        }
        endFor() {
          return this._endBlockNode(For);
        }
        label(label2) {
          return this._leafNode(new Label(label2));
        }
        break(label2) {
          return this._leafNode(new Break(label2));
        }
        return(value) {
          const node = new Return();
          this._blockNode(node);
          this.code(value);
          if (node.nodes.length !== 1)
            throw new Error('CodeGen: "return" should have one node');
          return this._endBlockNode(Return);
        }
        try(tryBody, catchCode, finallyCode) {
          if (!catchCode && !finallyCode)
            throw new Error('CodeGen: "try" without "catch" and "finally"');
          const node = new Try();
          this._blockNode(node);
          this.code(tryBody);
          if (catchCode) {
            const error = this.name("e");
            this._currNode = node.catch = new Catch(error);
            catchCode(error);
          }
          if (finallyCode) {
            this._currNode = node.finally = new Finally();
            this.code(finallyCode);
          }
          return this._endBlockNode(Catch, Finally);
        }
        throw(error) {
          return this._leafNode(new Throw(error));
        }
        block(body, nodeCount) {
          this._blockStarts.push(this._nodes.length);
          if (body)
            this.code(body).endBlock(nodeCount);
          return this;
        }
        endBlock(nodeCount) {
          const len = this._blockStarts.pop();
          if (len === void 0)
            throw new Error("CodeGen: not in self-balancing block");
          const toClose = this._nodes.length - len;
          if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
          }
          this._nodes.length = len;
          return this;
        }
        func(name, args = code_1.nil, async, funcBody) {
          this._blockNode(new Func(name, args, async));
          if (funcBody)
            this.code(funcBody).endFunc();
          return this;
        }
        endFunc() {
          return this._endBlockNode(Func);
        }
        optimize(n = 1) {
          while (n-- > 0) {
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
          }
        }
        _leafNode(node) {
          this._currNode.nodes.push(node);
          return this;
        }
        _blockNode(node) {
          this._currNode.nodes.push(node);
          this._nodes.push(node);
        }
        _endBlockNode(N1, N2) {
          const n = this._currNode;
          if (n instanceof N1 || N2 && n instanceof N2) {
            this._nodes.pop();
            return this;
          }
          throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
        }
        _elseNode(node) {
          const n = this._currNode;
          if (!(n instanceof If)) {
            throw new Error('CodeGen: "else" without "if"');
          }
          this._currNode = n.else = node;
          return this;
        }
        get _root() {
          return this._nodes[0];
        }
        get _currNode() {
          const ns = this._nodes;
          return ns[ns.length - 1];
        }
        set _currNode(node) {
          const ns = this._nodes;
          ns[ns.length - 1] = node;
        }
      };
      exports.CodeGen = CodeGen;
      function addNames(names2, from) {
        for (const n in from)
          names2[n] = (names2[n] || 0) + (from[n] || 0);
        return names2;
      }
      function addExprNames(names2, from) {
        return from instanceof code_1._CodeOrName ? addNames(names2, from.names) : names2;
      }
      function optimizeExpr(expr, names2, constants) {
        if (expr instanceof code_1.Name)
          return replaceName(expr);
        if (!canOptimize(expr))
          return expr;
        return new code_1._Code(expr._items.reduce((items, c) => {
          if (c instanceof code_1.Name)
            c = replaceName(c);
          if (c instanceof code_1._Code)
            items.push(...c._items);
          else
            items.push(c);
          return items;
        }, []));
        function replaceName(n) {
          const c = constants[n.str];
          if (c === void 0 || names2[n.str] !== 1)
            return n;
          delete names2[n.str];
          return c;
        }
        function canOptimize(e) {
          return e instanceof code_1._Code && e._items.some((c) => c instanceof code_1.Name && names2[c.str] === 1 && constants[c.str] !== void 0);
        }
      }
      function subtractNames(names2, from) {
        for (const n in from)
          names2[n] = (names2[n] || 0) - (from[n] || 0);
      }
      function not2(x) {
        return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
      }
      exports.not = not2;
      var andCode = mappend(exports.operators.AND);
      function and(...args) {
        return args.reduce(andCode);
      }
      exports.and = and;
      var orCode = mappend(exports.operators.OR);
      function or(...args) {
        return args.reduce(orCode);
      }
      exports.or = or;
      function mappend(op) {
        return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
      }
      function par(x) {
        return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
      }
    }
  });

  // node_modules/ajv/dist/compile/util.js
  var require_util = __commonJS({
    "node_modules/ajv/dist/compile/util.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
      var codegen_1 = require_codegen();
      var code_1 = require_code();
      function toHash(arr) {
        const hash = {};
        for (const item of arr)
          hash[item] = true;
        return hash;
      }
      exports.toHash = toHash;
      function alwaysValidSchema(it, schema2) {
        if (typeof schema2 == "boolean")
          return schema2;
        if (Object.keys(schema2).length === 0)
          return true;
        checkUnknownRules(it, schema2);
        return !schemaHasRules(schema2, it.self.RULES.all);
      }
      exports.alwaysValidSchema = alwaysValidSchema;
      function checkUnknownRules(it, schema2 = it.schema) {
        const { opts, self: self2 } = it;
        if (!opts.strictSchema)
          return;
        if (typeof schema2 === "boolean")
          return;
        const rules = self2.RULES.keywords;
        for (const key in schema2) {
          if (!rules[key])
            checkStrictMode(it, `unknown keyword: "${key}"`);
        }
      }
      exports.checkUnknownRules = checkUnknownRules;
      function schemaHasRules(schema2, rules) {
        if (typeof schema2 == "boolean")
          return !schema2;
        for (const key in schema2)
          if (rules[key])
            return true;
        return false;
      }
      exports.schemaHasRules = schemaHasRules;
      function schemaHasRulesButRef(schema2, RULES) {
        if (typeof schema2 == "boolean")
          return !schema2;
        for (const key in schema2)
          if (key !== "$ref" && RULES.all[key])
            return true;
        return false;
      }
      exports.schemaHasRulesButRef = schemaHasRulesButRef;
      function schemaRefOrVal({ topSchemaRef, schemaPath }, schema2, keyword, $data) {
        if (!$data) {
          if (typeof schema2 == "number" || typeof schema2 == "boolean")
            return schema2;
          if (typeof schema2 == "string")
            return (0, codegen_1._)`${schema2}`;
        }
        return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
      }
      exports.schemaRefOrVal = schemaRefOrVal;
      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
      }
      exports.unescapeFragment = unescapeFragment;
      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
      }
      exports.escapeFragment = escapeFragment;
      function escapeJsonPointer(str) {
        if (typeof str == "number")
          return `${str}`;
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
      exports.escapeJsonPointer = escapeJsonPointer;
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      exports.unescapeJsonPointer = unescapeJsonPointer;
      function eachItem(xs, f) {
        if (Array.isArray(xs)) {
          for (const x of xs)
            f(x);
        } else {
          f(xs);
        }
      }
      exports.eachItem = eachItem;
      function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
        return (gen, from, to, toName) => {
          const res = to === void 0 ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
          return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
        };
      }
      exports.mergeEvaluated = {
        props: makeMergeEvaluated({
          mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {
            gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
          }),
          mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
            if (from === true) {
              gen.assign(to, true);
            } else {
              gen.assign(to, (0, codegen_1._)`${to} || {}`);
              setEvaluated(gen, to, from);
            }
          }),
          mergeValues: (from, to) => from === true ? true : { ...from, ...to },
          resultToName: evaluatedPropsToName
        }),
        items: makeMergeEvaluated({
          mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
          mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
          mergeValues: (from, to) => from === true ? true : Math.max(from, to),
          resultToName: (gen, items) => gen.var("items", items)
        })
      };
      function evaluatedPropsToName(gen, ps) {
        if (ps === true)
          return gen.var("props", true);
        const props = gen.var("props", (0, codegen_1._)`{}`);
        if (ps !== void 0)
          setEvaluated(gen, props, ps);
        return props;
      }
      exports.evaluatedPropsToName = evaluatedPropsToName;
      function setEvaluated(gen, props, ps) {
        Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
      }
      exports.setEvaluated = setEvaluated;
      var snippets = {};
      function useFunc(gen, f) {
        return gen.scopeValue("func", {
          ref: f,
          code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
        });
      }
      exports.useFunc = useFunc;
      var Type;
      (function(Type2) {
        Type2[Type2["Num"] = 0] = "Num";
        Type2[Type2["Str"] = 1] = "Str";
      })(Type = exports.Type || (exports.Type = {}));
      function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
        if (dataProp instanceof codegen_1.Name) {
          const isNumber = dataPropType === Type.Num;
          return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
        }
        return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
      }
      exports.getErrorPath = getErrorPath;
      function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
        if (!mode)
          return;
        msg = `strict mode: ${msg}`;
        if (mode === true)
          throw new Error(msg);
        it.self.logger.warn(msg);
      }
      exports.checkStrictMode = checkStrictMode;
    }
  });

  // node_modules/ajv/dist/compile/names.js
  var require_names = __commonJS({
    "node_modules/ajv/dist/compile/names.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var names2 = {
        data: new codegen_1.Name("data"),
        valCxt: new codegen_1.Name("valCxt"),
        instancePath: new codegen_1.Name("instancePath"),
        parentData: new codegen_1.Name("parentData"),
        parentDataProperty: new codegen_1.Name("parentDataProperty"),
        rootData: new codegen_1.Name("rootData"),
        dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
        vErrors: new codegen_1.Name("vErrors"),
        errors: new codegen_1.Name("errors"),
        this: new codegen_1.Name("this"),
        self: new codegen_1.Name("self"),
        scope: new codegen_1.Name("scope"),
        json: new codegen_1.Name("json"),
        jsonPos: new codegen_1.Name("jsonPos"),
        jsonLen: new codegen_1.Name("jsonLen"),
        jsonPart: new codegen_1.Name("jsonPart")
      };
      exports.default = names2;
    }
  });

  // node_modules/ajv/dist/compile/errors.js
  var require_errors = __commonJS({
    "node_modules/ajv/dist/compile/errors.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var names_1 = require_names();
      exports.keywordError = {
        message: ({ keyword }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
      };
      exports.keyword$DataError = {
        message: ({ keyword, schemaType }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
      };
      function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
          addError(gen, errObj);
        } else {
          returnErrors(it, (0, codegen_1._)`[${errObj}]`);
        }
      }
      exports.reportError = reportError;
      function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
        const { it } = cxt;
        const { gen, compositeRule, allErrors } = it;
        const errObj = errorObjectCode(cxt, error, errorPaths);
        addError(gen, errObj);
        if (!(compositeRule || allErrors)) {
          returnErrors(it, names_1.default.vErrors);
        }
      }
      exports.reportExtraError = reportExtraError;
      function resetErrorsCount(gen, errsCount) {
        gen.assign(names_1.default.errors, errsCount);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
      }
      exports.resetErrorsCount = resetErrorsCount;
      function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
        if (errsCount === void 0)
          throw new Error("ajv implementation error");
        const err = gen.name("err");
        gen.forRange("i", errsCount, names_1.default.errors, (i) => {
          gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
          gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
          gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
          if (it.opts.verbose) {
            gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._)`${err}.data`, data);
          }
        });
      }
      exports.extendErrors = extendErrors;
      function addError(gen, errObj) {
        const err = gen.const("err", errObj);
        gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
        gen.code((0, codegen_1._)`${names_1.default.errors}++`);
      }
      function returnErrors(it, errs) {
        const { gen, validateName, schemaEnv } = it;
        if (schemaEnv.$async) {
          gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
          gen.return(false);
        }
      }
      var E = {
        keyword: new codegen_1.Name("keyword"),
        schemaPath: new codegen_1.Name("schemaPath"),
        params: new codegen_1.Name("params"),
        propertyName: new codegen_1.Name("propertyName"),
        message: new codegen_1.Name("message"),
        schema: new codegen_1.Name("schema"),
        parentSchema: new codegen_1.Name("parentSchema")
      };
      function errorObjectCode(cxt, error, errorPaths) {
        const { createErrors } = cxt.it;
        if (createErrors === false)
          return (0, codegen_1._)`{}`;
        return errorObject(cxt, error, errorPaths);
      }
      function errorObject(cxt, error, errorPaths = {}) {
        const { gen, it } = cxt;
        const keyValues = [
          errorInstancePath(it, errorPaths),
          errorSchemaPath(cxt, errorPaths)
        ];
        extraErrorProps(cxt, error, keyValues);
        return gen.object(...keyValues);
      }
      function errorInstancePath({ errorPath }, { instancePath }) {
        const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
        return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
      }
      function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
        let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
        if (schemaPath) {
          schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
        }
        return [E.schemaPath, schPath];
      }
      function extraErrorProps(cxt, { params, message }, keyValues) {
        const { keyword, data, schemaValue, it } = cxt;
        const { opts, propertyName, topSchemaRef, schemaPath } = it;
        keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
        if (opts.messages) {
          keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
        }
        if (opts.verbose) {
          keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
        }
        if (propertyName)
          keyValues.push([E.propertyName, propertyName]);
      }
    }
  });

  // node_modules/ajv/dist/compile/validate/boolSchema.js
  var require_boolSchema = __commonJS({
    "node_modules/ajv/dist/compile/validate/boolSchema.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
      var errors_1 = require_errors();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var boolError = {
        message: "boolean schema is false"
      };
      function topBoolOrEmptySchema(it) {
        const { gen, schema: schema2, validateName } = it;
        if (schema2 === false) {
          falseSchemaError(it, false);
        } else if (typeof schema2 == "object" && schema2.$async === true) {
          gen.return(names_1.default.data);
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, null);
          gen.return(true);
        }
      }
      exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
      function boolOrEmptySchema(it, valid) {
        const { gen, schema: schema2 } = it;
        if (schema2 === false) {
          gen.var(valid, false);
          falseSchemaError(it);
        } else {
          gen.var(valid, true);
        }
      }
      exports.boolOrEmptySchema = boolOrEmptySchema;
      function falseSchemaError(it, overrideAllErrors) {
        const { gen, data } = it;
        const cxt = {
          gen,
          keyword: "false schema",
          data,
          schema: false,
          schemaCode: false,
          schemaValue: false,
          params: {},
          it
        };
        (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
      }
    }
  });

  // node_modules/ajv/dist/compile/rules.js
  var require_rules = __commonJS({
    "node_modules/ajv/dist/compile/rules.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getRules = exports.isJSONType = void 0;
      var _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
      var jsonTypes = new Set(_jsonTypes);
      function isJSONType(x) {
        return typeof x == "string" && jsonTypes.has(x);
      }
      exports.isJSONType = isJSONType;
      function getRules() {
        const groups = {
          number: { type: "number", rules: [] },
          string: { type: "string", rules: [] },
          array: { type: "array", rules: [] },
          object: { type: "object", rules: [] }
        };
        return {
          types: { ...groups, integer: true, boolean: true, null: true },
          rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
          post: { rules: [] },
          all: {},
          keywords: {}
        };
      }
      exports.getRules = getRules;
    }
  });

  // node_modules/ajv/dist/compile/validate/applicability.js
  var require_applicability = __commonJS({
    "node_modules/ajv/dist/compile/validate/applicability.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
      function schemaHasRulesForType({ schema: schema2, self: self2 }, type2) {
        const group = self2.RULES.types[type2];
        return group && group !== true && shouldUseGroup(schema2, group);
      }
      exports.schemaHasRulesForType = schemaHasRulesForType;
      function shouldUseGroup(schema2, group) {
        return group.rules.some((rule) => shouldUseRule(schema2, rule));
      }
      exports.shouldUseGroup = shouldUseGroup;
      function shouldUseRule(schema2, rule) {
        var _a;
        return schema2[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema2[kwd] !== void 0));
      }
      exports.shouldUseRule = shouldUseRule;
    }
  });

  // node_modules/ajv/dist/compile/validate/dataType.js
  var require_dataType = __commonJS({
    "node_modules/ajv/dist/compile/validate/dataType.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
      var rules_1 = require_rules();
      var applicability_1 = require_applicability();
      var errors_1 = require_errors();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var DataType;
      (function(DataType2) {
        DataType2[DataType2["Correct"] = 0] = "Correct";
        DataType2[DataType2["Wrong"] = 1] = "Wrong";
      })(DataType = exports.DataType || (exports.DataType = {}));
      function getSchemaTypes(schema2) {
        const types = getJSONTypes(schema2.type);
        const hasNull = types.includes("null");
        if (hasNull) {
          if (schema2.nullable === false)
            throw new Error("type: null contradicts nullable: false");
        } else {
          if (!types.length && schema2.nullable !== void 0) {
            throw new Error('"nullable" cannot be used without "type"');
          }
          if (schema2.nullable === true)
            types.push("null");
        }
        return types;
      }
      exports.getSchemaTypes = getSchemaTypes;
      function getJSONTypes(ts) {
        const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
        if (types.every(rules_1.isJSONType))
          return types;
        throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
      }
      exports.getJSONTypes = getJSONTypes;
      function coerceAndCheckDataType(it, types) {
        const { gen, data, opts } = it;
        const coerceTo = coerceToTypes(types, opts.coerceTypes);
        const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
        if (checkTypes) {
          const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
          gen.if(wrongType, () => {
            if (coerceTo.length)
              coerceData(it, types, coerceTo);
            else
              reportTypeError(it);
          });
        }
        return checkTypes;
      }
      exports.coerceAndCheckDataType = coerceAndCheckDataType;
      var COERCIBLE = /* @__PURE__ */ new Set(["string", "number", "integer", "boolean", "null"]);
      function coerceToTypes(types, coerceTypes) {
        return coerceTypes ? types.filter((t) => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
      }
      function coerceData(it, types, coerceTo) {
        const { gen, data, opts } = it;
        const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
        const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
        if (opts.coerceTypes === "array") {
          gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
        }
        gen.if((0, codegen_1._)`${coerced} !== undefined`);
        for (const t of coerceTo) {
          if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
            coerceSpecificType(t);
          }
        }
        gen.else();
        reportTypeError(it);
        gen.endIf();
        gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
          gen.assign(data, coerced);
          assignParentData(it, coerced);
        });
        function coerceSpecificType(t) {
          switch (t) {
            case "string":
              gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
              return;
            case "number":
              gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "integer":
              gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
              return;
            case "boolean":
              gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
              return;
            case "null":
              gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
              gen.assign(coerced, null);
              return;
            case "array":
              gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
          }
        }
      }
      function assignParentData({ gen, parentData, parentDataProperty }, expr) {
        gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
      }
      function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
        const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
        let cond;
        switch (dataType) {
          case "null":
            return (0, codegen_1._)`${data} ${EQ} null`;
          case "array":
            cond = (0, codegen_1._)`Array.isArray(${data})`;
            break;
          case "object":
            cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
          case "integer":
            cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
            break;
          case "number":
            cond = numCond();
            break;
          default:
            return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
        }
        return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
        function numCond(_cond = codegen_1.nil) {
          return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
        }
      }
      exports.checkDataType = checkDataType;
      function checkDataTypes(dataTypes, data, strictNums, correct) {
        if (dataTypes.length === 1) {
          return checkDataType(dataTypes[0], data, strictNums, correct);
        }
        let cond;
        const types = (0, util_1.toHash)(dataTypes);
        if (types.array && types.object) {
          const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
          cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
          delete types.null;
          delete types.array;
          delete types.object;
        } else {
          cond = codegen_1.nil;
        }
        if (types.number)
          delete types.integer;
        for (const t in types)
          cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
        return cond;
      }
      exports.checkDataTypes = checkDataTypes;
      var typeError = {
        message: ({ schema: schema2 }) => `must be ${schema2}`,
        params: ({ schema: schema2, schemaValue }) => typeof schema2 == "string" ? (0, codegen_1._)`{type: ${schema2}}` : (0, codegen_1._)`{type: ${schemaValue}}`
      };
      function reportTypeError(it) {
        const cxt = getTypeErrorContext(it);
        (0, errors_1.reportError)(cxt, typeError);
      }
      exports.reportTypeError = reportTypeError;
      function getTypeErrorContext(it) {
        const { gen, data, schema: schema2 } = it;
        const schemaCode = (0, util_1.schemaRefOrVal)(it, schema2, "type");
        return {
          gen,
          keyword: "type",
          data,
          schema: schema2.type,
          schemaCode,
          schemaValue: schemaCode,
          parentSchema: schema2,
          params: {},
          it
        };
      }
    }
  });

  // node_modules/ajv/dist/compile/validate/defaults.js
  var require_defaults = __commonJS({
    "node_modules/ajv/dist/compile/validate/defaults.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assignDefaults = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      function assignDefaults(it, ty) {
        const { properties, items } = it.schema;
        if (ty === "object" && properties) {
          for (const key in properties) {
            assignDefault(it, key, properties[key].default);
          }
        } else if (ty === "array" && Array.isArray(items)) {
          items.forEach((sch, i) => assignDefault(it, i, sch.default));
        }
      }
      exports.assignDefaults = assignDefaults;
      function assignDefault(it, prop, defaultValue) {
        const { gen, compositeRule, data, opts } = it;
        if (defaultValue === void 0)
          return;
        const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
        if (compositeRule) {
          (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
          return;
        }
        let condition = (0, codegen_1._)`${childData} === undefined`;
        if (opts.useDefaults === "empty") {
          condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
        }
        gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
      }
    }
  });

  // node_modules/ajv/dist/vocabularies/code.js
  var require_code2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/code.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var names_1 = require_names();
      var util_2 = require_util();
      function checkReportMissingProp(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
          cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
          cxt.error();
        });
      }
      exports.checkReportMissingProp = checkReportMissingProp;
      function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
        return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
      }
      exports.checkMissingProp = checkMissingProp;
      function reportMissingProp(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
      }
      exports.reportMissingProp = reportMissingProp;
      function hasPropFunc(gen) {
        return gen.scopeValue("func", {
          ref: Object.prototype.hasOwnProperty,
          code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
        });
      }
      exports.hasPropFunc = hasPropFunc;
      function isOwnProperty(gen, data, property) {
        return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
      }
      exports.isOwnProperty = isOwnProperty;
      function propertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
        return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
      }
      exports.propertyInData = propertyInData;
      function noPropertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
        return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
      }
      exports.noPropertyInData = noPropertyInData;
      function allSchemaProperties(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
      }
      exports.allSchemaProperties = allSchemaProperties;
      function schemaProperties(it, schemaMap) {
        return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
      }
      exports.schemaProperties = schemaProperties;
      function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
          [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
          [names_1.default.parentData, it.parentData],
          [names_1.default.parentDataProperty, it.parentDataProperty],
          [names_1.default.rootData, names_1.default.rootData]
        ];
        if (it.opts.dynamicRef)
          valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
        const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
      }
      exports.callValidateCode = callValidateCode;
      var newRegExp = (0, codegen_1._)`new RegExp`;
      function usePattern({ gen, it: { opts } }, pattern) {
        const u = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u);
        return gen.scopeValue("pattern", {
          key: rx.toString(),
          ref: rx,
          code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
        });
      }
      exports.usePattern = usePattern;
      function validateArray(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        if (it.allErrors) {
          const validArr = gen.let("valid", true);
          validateItems(() => gen.assign(validArr, false));
          return validArr;
        }
        gen.var(valid, true);
        validateItems(() => gen.break());
        return valid;
        function validateItems(notValid) {
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          gen.forRange("i", 0, len, (i) => {
            cxt.subschema({
              keyword,
              dataProp: i,
              dataPropType: util_1.Type.Num
            }, valid);
            gen.if((0, codegen_1.not)(valid), notValid);
          });
        }
      }
      exports.validateArray = validateArray;
      function validateUnion(cxt) {
        const { gen, schema: schema2, keyword, it } = cxt;
        if (!Array.isArray(schema2))
          throw new Error("ajv implementation error");
        const alwaysValid = schema2.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
          return;
        const valid = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema2.forEach((_sch, i) => {
          const schCxt = cxt.subschema({
            keyword,
            schemaProp: i,
            compositeRule: true
          }, schValid);
          gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
          const merged = cxt.mergeValidEvaluated(schCxt, schValid);
          if (!merged)
            gen.if((0, codegen_1.not)(valid));
        }));
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
      }
      exports.validateUnion = validateUnion;
    }
  });

  // node_modules/ajv/dist/compile/validate/keyword.js
  var require_keyword = __commonJS({
    "node_modules/ajv/dist/compile/validate/keyword.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var code_1 = require_code2();
      var errors_1 = require_errors();
      function macroKeywordCode(cxt, def) {
        const { gen, keyword, schema: schema2, parentSchema, it } = cxt;
        const macroSchema = def.macro.call(it.self, schema2, parentSchema, it);
        const schemaRef = useKeyword(gen, keyword, macroSchema);
        if (it.opts.validateSchema !== false)
          it.self.validateSchema(macroSchema, true);
        const valid = gen.name("valid");
        cxt.subschema({
          schema: macroSchema,
          schemaPath: codegen_1.nil,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`,
          topSchemaRef: schemaRef,
          compositeRule: true
        }, valid);
        cxt.pass(valid, () => cxt.error(true));
      }
      exports.macroKeywordCode = macroKeywordCode;
      function funcKeywordCode(cxt, def) {
        var _a;
        const { gen, keyword, schema: schema2, parentSchema, $data, it } = cxt;
        checkAsyncKeyword(it, def);
        const validate = !$data && def.compile ? def.compile.call(it.self, schema2, parentSchema, it) : def.validate;
        const validateRef = useKeyword(gen, keyword, validate);
        const valid = gen.let("valid");
        cxt.block$data(valid, validateKeyword);
        cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
        function validateKeyword() {
          if (def.errors === false) {
            assignValid();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => cxt.error());
          } else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying)
              modifyData(cxt);
            reportErrs(() => addErrs(cxt, ruleErrs));
          }
        }
        function validateAsync() {
          const ruleErrs = gen.let("ruleErrs", null);
          gen.try(() => assignValid((0, codegen_1._)`await `), (e) => gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
          return ruleErrs;
        }
        function validateSync() {
          const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
          gen.assign(validateErrs, null);
          assignValid(codegen_1.nil);
          return validateErrs;
        }
        function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
          const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
          const passSchema = !("compile" in def && !$data || def.schema === false);
          gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
        }
        function reportErrs(errors) {
          var _a2;
          gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid), errors);
        }
      }
      exports.funcKeywordCode = funcKeywordCode;
      function modifyData(cxt) {
        const { gen, data, it } = cxt;
        gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
      }
      function addErrs(cxt, errs) {
        const { gen } = cxt;
        gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
          (0, errors_1.extendErrors)(cxt);
        }, () => cxt.error());
      }
      function checkAsyncKeyword({ schemaEnv }, def) {
        if (def.async && !schemaEnv.$async)
          throw new Error("async keyword in sync schema");
      }
      function useKeyword(gen, keyword, result) {
        if (result === void 0)
          throw new Error(`keyword "${keyword}" failed to compile`);
        return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
      }
      function validSchemaType(schema2, schemaType, allowUndefined = false) {
        return !schemaType.length || schemaType.some((st) => st === "array" ? Array.isArray(schema2) : st === "object" ? schema2 && typeof schema2 == "object" && !Array.isArray(schema2) : typeof schema2 == st || allowUndefined && typeof schema2 == "undefined");
      }
      exports.validSchemaType = validSchemaType;
      function validateKeywordUsage({ schema: schema2, opts, self: self2, errSchemaPath }, def, keyword) {
        if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
          throw new Error("ajv implementation error");
        }
        const deps = def.dependencies;
        if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema2, kwd))) {
          throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
        }
        if (def.validateSchema) {
          const valid = def.validateSchema(schema2[keyword]);
          if (!valid) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log")
              self2.logger.error(msg);
            else
              throw new Error(msg);
          }
        }
      }
      exports.validateKeywordUsage = validateKeywordUsage;
    }
  });

  // node_modules/ajv/dist/compile/validate/subschema.js
  var require_subschema = __commonJS({
    "node_modules/ajv/dist/compile/validate/subschema.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      function getSubschema(it, { keyword, schemaProp, schema: schema2, schemaPath, errSchemaPath, topSchemaRef }) {
        if (keyword !== void 0 && schema2 !== void 0) {
          throw new Error('both "keyword" and "schema" passed, only one allowed');
        }
        if (keyword !== void 0) {
          const sch = it.schema[keyword];
          return schemaProp === void 0 ? {
            schema: sch,
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`
          } : {
            schema: sch[schemaProp],
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
          };
        }
        if (schema2 !== void 0) {
          if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
          }
          return {
            schema: schema2,
            schemaPath,
            topSchemaRef,
            errSchemaPath
          };
        }
        throw new Error('either "keyword" or "schema" must be passed');
      }
      exports.getSubschema = getSubschema;
      function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
        if (data !== void 0 && dataProp !== void 0) {
          throw new Error('both "data" and "dataProp" passed, only one allowed');
        }
        const { gen } = it;
        if (dataProp !== void 0) {
          const { errorPath, dataPathArr, opts } = it;
          const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
          dataContextProps(nextData);
          subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
          subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
          subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
        }
        if (data !== void 0) {
          const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
          dataContextProps(nextData);
          if (propertyName !== void 0)
            subschema.propertyName = propertyName;
        }
        if (dataTypes)
          subschema.dataTypes = dataTypes;
        function dataContextProps(_nextData) {
          subschema.data = _nextData;
          subschema.dataLevel = it.dataLevel + 1;
          subschema.dataTypes = [];
          it.definedProperties = /* @__PURE__ */ new Set();
          subschema.parentData = it.data;
          subschema.dataNames = [...it.dataNames, _nextData];
        }
      }
      exports.extendSubschemaData = extendSubschemaData;
      function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
        if (compositeRule !== void 0)
          subschema.compositeRule = compositeRule;
        if (createErrors !== void 0)
          subschema.createErrors = createErrors;
        if (allErrors !== void 0)
          subschema.allErrors = allErrors;
        subschema.jtdDiscriminator = jtdDiscriminator;
        subschema.jtdMetadata = jtdMetadata;
      }
      exports.extendSubschemaMode = extendSubschemaMode;
    }
  });

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js"(exports, module) {
      init_globals();
      module.exports = function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i, keys;
          if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i = length; i-- !== 0; )
              if (!equal(a[i], b[i]))
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys = Object.keys(a);
          length = keys.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i = length; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
              return false;
          for (i = length; i-- !== 0; ) {
            var key = keys[i];
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      };
    }
  });

  // node_modules/json-schema-traverse/index.js
  var require_json_schema_traverse = __commonJS({
    "node_modules/json-schema-traverse/index.js"(exports, module) {
      init_globals();
      var traverse = module.exports = function(schema2, opts, cb) {
        if (typeof opts == "function") {
          cb = opts;
          opts = {};
        }
        cb = opts.cb || cb;
        var pre = typeof cb == "function" ? cb : cb.pre || function() {
        };
        var post = cb.post || function() {
        };
        _traverse(opts, pre, post, schema2, "", schema2);
      };
      traverse.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true,
        if: true,
        then: true,
        else: true
      };
      traverse.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      traverse.propsKeywords = {
        $defs: true,
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      };
      traverse.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      };
      function _traverse(opts, pre, post, schema2, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (schema2 && typeof schema2 == "object" && !Array.isArray(schema2)) {
          pre(schema2, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
          for (var key in schema2) {
            var sch = schema2[key];
            if (Array.isArray(sch)) {
              if (key in traverse.arrayKeywords) {
                for (var i = 0; i < sch.length; i++)
                  _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema2, i);
              }
            } else if (key in traverse.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema2, prop);
              }
            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema2);
            }
          }
          post(schema2, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        }
      }
      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
    }
  });

  // node_modules/ajv/dist/compile/resolve.js
  var require_resolve = __commonJS({
    "node_modules/ajv/dist/compile/resolve.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
      var util_1 = require_util();
      var equal = require_fast_deep_equal();
      var traverse = require_json_schema_traverse();
      var SIMPLE_INLINED = /* @__PURE__ */ new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const"
      ]);
      function inlineRef(schema2, limit = true) {
        if (typeof schema2 == "boolean")
          return true;
        if (limit === true)
          return !hasRef(schema2);
        if (!limit)
          return false;
        return countKeys(schema2) <= limit;
      }
      exports.inlineRef = inlineRef;
      var REF_KEYWORDS = /* @__PURE__ */ new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor"
      ]);
      function hasRef(schema2) {
        for (const key in schema2) {
          if (REF_KEYWORDS.has(key))
            return true;
          const sch = schema2[key];
          if (Array.isArray(sch) && sch.some(hasRef))
            return true;
          if (typeof sch == "object" && hasRef(sch))
            return true;
        }
        return false;
      }
      function countKeys(schema2) {
        let count = 0;
        for (const key in schema2) {
          if (key === "$ref")
            return Infinity;
          count++;
          if (SIMPLE_INLINED.has(key))
            continue;
          if (typeof schema2[key] == "object") {
            (0, util_1.eachItem)(schema2[key], (sch) => count += countKeys(sch));
          }
          if (count === Infinity)
            return Infinity;
        }
        return count;
      }
      function getFullPath(resolver, id = "", normalize) {
        if (normalize !== false)
          id = normalizeId(id);
        const p = resolver.parse(id);
        return _getFullPath(resolver, p);
      }
      exports.getFullPath = getFullPath;
      function _getFullPath(resolver, p) {
        const serialized = resolver.serialize(p);
        return serialized.split("#")[0] + "#";
      }
      exports._getFullPath = _getFullPath;
      var TRAILING_SLASH_HASH = /#\/?$/;
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
      }
      exports.normalizeId = normalizeId;
      function resolveUrl(resolver, baseId, id) {
        id = normalizeId(id);
        return resolver.resolve(baseId, id);
      }
      exports.resolveUrl = resolveUrl;
      var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
      function getSchemaRefs(schema2, baseId) {
        if (typeof schema2 == "boolean")
          return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId(schema2[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = /* @__PURE__ */ new Set();
        traverse(schema2, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
          if (parentJsonPtr === void 0)
            return;
          const fullPath = pathPrefix + jsonPtr;
          let baseId2 = baseIds[parentJsonPtr];
          if (typeof sch[schemaId] == "string")
            baseId2 = addRef.call(this, sch[schemaId]);
          addAnchor.call(this, sch.$anchor);
          addAnchor.call(this, sch.$dynamicAnchor);
          baseIds[jsonPtr] = baseId2;
          function addRef(ref) {
            const _resolve = this.opts.uriResolver.resolve;
            ref = normalizeId(baseId2 ? _resolve(baseId2, ref) : ref);
            if (schemaRefs.has(ref))
              throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string")
              schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") {
              checkAmbiguosRef(sch, schOrRef.schema, ref);
            } else if (ref !== normalizeId(fullPath)) {
              if (ref[0] === "#") {
                checkAmbiguosRef(sch, localRefs[ref], ref);
                localRefs[ref] = sch;
              } else {
                this.refs[ref] = fullPath;
              }
            }
            return ref;
          }
          function addAnchor(anchor) {
            if (typeof anchor == "string") {
              if (!ANCHOR.test(anchor))
                throw new Error(`invalid anchor "${anchor}"`);
              addRef.call(this, `#${anchor}`);
            }
          }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
          if (sch2 !== void 0 && !equal(sch1, sch2))
            throw ambiguos(ref);
        }
        function ambiguos(ref) {
          return new Error(`reference "${ref}" resolves to more than one schema`);
        }
      }
      exports.getSchemaRefs = getSchemaRefs;
    }
  });

  // node_modules/ajv/dist/compile/validate/index.js
  var require_validate = __commonJS({
    "node_modules/ajv/dist/compile/validate/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
      var boolSchema_1 = require_boolSchema();
      var dataType_1 = require_dataType();
      var applicability_1 = require_applicability();
      var dataType_2 = require_dataType();
      var defaults_1 = require_defaults();
      var keyword_1 = require_keyword();
      var subschema_1 = require_subschema();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var resolve_1 = require_resolve();
      var util_1 = require_util();
      var errors_1 = require_errors();
      function validateFunctionCode(it) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
          }
        }
        validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
      }
      exports.validateFunctionCode = validateFunctionCode;
      function validateFunction({ gen, validateName, schema: schema2, schemaEnv, opts }, body) {
        if (opts.code.es5) {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
            gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema2, opts)}`);
            destructureValCxtES5(gen, opts);
            gen.code(body);
          });
        } else {
          gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema2, opts)).code(body));
        }
      }
      function destructureValCxt(opts) {
        return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
      }
      function destructureValCxtES5(gen, opts) {
        gen.if(names_1.default.valCxt, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
          gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
        }, () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
          gen.var(names_1.default.rootData, names_1.default.data);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
        });
      }
      function topSchemaObjCode(it) {
        const { schema: schema2, opts, gen } = it;
        validateFunction(it, () => {
          if (opts.$comment && schema2.$comment)
            commentKeyword(it);
          checkNoDefault(it);
          gen.let(names_1.default.vErrors, null);
          gen.let(names_1.default.errors, 0);
          if (opts.unevaluated)
            resetEvaluated(it);
          typeAndKeywords(it);
          returnResults(it);
        });
        return;
      }
      function resetEvaluated(it) {
        const { gen, validateName } = it;
        it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
        gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
      }
      function funcSourceUrl(schema2, opts) {
        const schId = typeof schema2 == "object" && schema2[opts.schemaId];
        return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
      }
      function subschemaCode(it, valid) {
        if (isSchemaObj(it)) {
          checkKeywords(it);
          if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
          }
        }
        (0, boolSchema_1.boolOrEmptySchema)(it, valid);
      }
      function schemaCxtHasRules({ schema: schema2, self: self2 }) {
        if (typeof schema2 == "boolean")
          return !schema2;
        for (const key in schema2)
          if (self2.RULES.all[key])
            return true;
        return false;
      }
      function isSchemaObj(it) {
        return typeof it.schema != "boolean";
      }
      function subSchemaObjCode(it, valid) {
        const { schema: schema2, gen, opts } = it;
        if (opts.$comment && schema2.$comment)
          commentKeyword(it);
        updateContext(it);
        checkAsyncSchema(it);
        const errsCount = gen.const("_errs", names_1.default.errors);
        typeAndKeywords(it, errsCount);
        gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
      }
      function checkKeywords(it) {
        (0, util_1.checkUnknownRules)(it);
        checkRefsAndKeywords(it);
      }
      function typeAndKeywords(it, errsCount) {
        if (it.opts.jtd)
          return schemaKeywords(it, [], false, errsCount);
        const types = (0, dataType_1.getSchemaTypes)(it.schema);
        const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
        schemaKeywords(it, types, !checkedTypes, errsCount);
      }
      function checkRefsAndKeywords(it) {
        const { schema: schema2, errSchemaPath, opts, self: self2 } = it;
        if (schema2.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema2, self2.RULES)) {
          self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
        }
      }
      function checkNoDefault(it) {
        const { schema: schema2, opts } = it;
        if (schema2.default !== void 0 && opts.useDefaults && opts.strictSchema) {
          (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
        }
      }
      function updateContext(it) {
        const schId = it.schema[it.opts.schemaId];
        if (schId)
          it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
      }
      function checkAsyncSchema(it) {
        if (it.schema.$async && !it.schemaEnv.$async)
          throw new Error("async schema in sync schema");
      }
      function commentKeyword({ gen, schemaEnv, schema: schema2, errSchemaPath, opts }) {
        const msg = schema2.$comment;
        if (opts.$comment === true) {
          gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
        } else if (typeof opts.$comment == "function") {
          const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
          const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
          gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
        }
      }
      function returnResults(it) {
        const { gen, schemaEnv, validateName, ValidationError, opts } = it;
        if (schemaEnv.$async) {
          gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
        } else {
          gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
          if (opts.unevaluated)
            assignEvaluated(it);
          gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
        }
      }
      function assignEvaluated({ gen, evaluated, props, items }) {
        if (props instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.props`, props);
        if (items instanceof codegen_1.Name)
          gen.assign((0, codegen_1._)`${evaluated}.items`, items);
      }
      function schemaKeywords(it, types, typeErrors, errsCount) {
        const { gen, schema: schema2, data, allErrors, opts, self: self2 } = it;
        const { RULES } = self2;
        if (schema2.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema2, RULES))) {
          gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition));
          return;
        }
        if (!opts.jtd)
          checkStrictTypes(it, types);
        gen.block(() => {
          for (const group of RULES.rules)
            groupKeywords(group);
          groupKeywords(RULES.post);
        });
        function groupKeywords(group) {
          if (!(0, applicability_1.shouldUseGroup)(schema2, group))
            return;
          if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
              gen.else();
              (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
          } else {
            iterateKeywords(it, group);
          }
          if (!allErrors)
            gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
        }
      }
      function iterateKeywords(it, group) {
        const { gen, schema: schema2, opts: { useDefaults } } = it;
        if (useDefaults)
          (0, defaults_1.assignDefaults)(it, group.type);
        gen.block(() => {
          for (const rule of group.rules) {
            if ((0, applicability_1.shouldUseRule)(schema2, rule)) {
              keywordCode(it, rule.keyword, rule.definition, group.type);
            }
          }
        });
      }
      function checkStrictTypes(it, types) {
        if (it.schemaEnv.meta || !it.opts.strictTypes)
          return;
        checkContextTypes(it, types);
        if (!it.opts.allowUnionTypes)
          checkMultipleTypes(it, types);
        checkKeywordTypes(it, it.dataTypes);
      }
      function checkContextTypes(it, types) {
        if (!types.length)
          return;
        if (!it.dataTypes.length) {
          it.dataTypes = types;
          return;
        }
        types.forEach((t) => {
          if (!includesType(it.dataTypes, t)) {
            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
          }
        });
        it.dataTypes = it.dataTypes.filter((t) => includesType(types, t));
      }
      function checkMultipleTypes(it, ts) {
        if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
          strictTypesError(it, "use allowUnionTypes to allow union type keyword");
        }
      }
      function checkKeywordTypes(it, ts) {
        const rules = it.self.RULES.all;
        for (const keyword in rules) {
          const rule = rules[keyword];
          if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type: type2 } = rule.definition;
            if (type2.length && !type2.some((t) => hasApplicableType(ts, t))) {
              strictTypesError(it, `missing type "${type2.join(",")}" for keyword "${keyword}"`);
            }
          }
        }
      }
      function hasApplicableType(schTs, kwdT) {
        return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
      }
      function includesType(ts, t) {
        return ts.includes(t) || t === "integer" && ts.includes("number");
      }
      function strictTypesError(it, msg) {
        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
        msg += ` at "${schemaPath}" (strictTypes)`;
        (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
      }
      var KeywordCxt = class {
        constructor(it, def, keyword) {
          (0, keyword_1.validateKeywordUsage)(it, def, keyword);
          this.gen = it.gen;
          this.allErrors = it.allErrors;
          this.keyword = keyword;
          this.data = it.data;
          this.schema = it.schema[keyword];
          this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
          this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
          this.schemaType = def.schemaType;
          this.parentSchema = it.schema;
          this.params = {};
          this.it = it;
          this.def = def;
          if (this.$data) {
            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
          } else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
              throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
            }
          }
          if ("code" in def ? def.trackErrors : def.errors !== false) {
            this.errsCount = it.gen.const("_errs", names_1.default.errors);
          }
        }
        result(condition, successAction, failAction) {
          this.failResult((0, codegen_1.not)(condition), successAction, failAction);
        }
        failResult(condition, successAction, failAction) {
          this.gen.if(condition);
          if (failAction)
            failAction();
          else
            this.error();
          if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors)
              this.gen.endIf();
          } else {
            if (this.allErrors)
              this.gen.endIf();
            else
              this.gen.else();
          }
        }
        pass(condition, failAction) {
          this.failResult((0, codegen_1.not)(condition), void 0, failAction);
        }
        fail(condition) {
          if (condition === void 0) {
            this.error();
            if (!this.allErrors)
              this.gen.if(false);
            return;
          }
          this.gen.if(condition);
          this.error();
          if (this.allErrors)
            this.gen.endIf();
          else
            this.gen.else();
        }
        fail$data(condition) {
          if (!this.$data)
            return this.fail(condition);
          const { schemaCode } = this;
          this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
        }
        error(append, errorParams, errorPaths) {
          if (errorParams) {
            this.setParams(errorParams);
            this._error(append, errorPaths);
            this.setParams({});
            return;
          }
          this._error(append, errorPaths);
        }
        _error(append, errorPaths) {
          ;
          (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
        }
        $dataError() {
          (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
        }
        reset() {
          if (this.errsCount === void 0)
            throw new Error('add "trackErrors" to keyword definition');
          (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
        }
        ok(cond) {
          if (!this.allErrors)
            this.gen.if(cond);
        }
        setParams(obj, assign) {
          if (assign)
            Object.assign(this.params, obj);
          else
            this.params = obj;
        }
        block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
          this.gen.block(() => {
            this.check$data(valid, $dataValid);
            codeBlock();
          });
        }
        check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
          if (!this.$data)
            return;
          const { gen, schemaCode, schemaType, def } = this;
          gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
          if (valid !== codegen_1.nil)
            gen.assign(valid, true);
          if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil)
              gen.assign(valid, false);
          }
          gen.else();
        }
        invalid$data() {
          const { gen, schemaCode, schemaType, def, it } = this;
          return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
          function wrong$DataType() {
            if (schemaType.length) {
              if (!(schemaCode instanceof codegen_1.Name))
                throw new Error("ajv implementation error");
              const st = Array.isArray(schemaType) ? schemaType : [schemaType];
              return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
          }
          function invalid$DataSchema() {
            if (def.validateSchema) {
              const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema });
              return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
          }
        }
        subschema(appl, valid) {
          const subschema = (0, subschema_1.getSubschema)(this.it, appl);
          (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
          (0, subschema_1.extendSubschemaMode)(subschema, appl);
          const nextContext = { ...this.it, ...subschema, items: void 0, props: void 0 };
          subschemaCode(nextContext, valid);
          return nextContext;
        }
        mergeEvaluated(schemaCxt, toName) {
          const { it, gen } = this;
          if (!it.opts.unevaluated)
            return;
          if (it.props !== true && schemaCxt.props !== void 0) {
            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
          }
          if (it.items !== true && schemaCxt.items !== void 0) {
            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
          }
        }
        mergeValidEvaluated(schemaCxt, valid) {
          const { it, gen } = this;
          if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
          }
        }
      };
      exports.KeywordCxt = KeywordCxt;
      function keywordCode(it, keyword, def, ruleType) {
        const cxt = new KeywordCxt(it, def, keyword);
        if ("code" in def) {
          def.code(cxt, ruleType);
        } else if (cxt.$data && def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        } else if ("macro" in def) {
          (0, keyword_1.macroKeywordCode)(cxt, def);
        } else if (def.compile || def.validate) {
          (0, keyword_1.funcKeywordCode)(cxt, def);
        }
      }
      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
      function getData($data, { dataLevel, dataNames, dataPathArr }) {
        let jsonPointer;
        let data;
        if ($data === "")
          return names_1.default.rootData;
        if ($data[0] === "/") {
          if (!JSON_POINTER.test($data))
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          jsonPointer = $data;
          data = names_1.default.rootData;
        } else {
          const matches = RELATIVE_JSON_POINTER.exec($data);
          if (!matches)
            throw new Error(`Invalid JSON-pointer: ${$data}`);
          const up = +matches[1];
          jsonPointer = matches[2];
          if (jsonPointer === "#") {
            if (up >= dataLevel)
              throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
          }
          if (up > dataLevel)
            throw new Error(errorMsg("data", up));
          data = dataNames[dataLevel - up];
          if (!jsonPointer)
            return data;
        }
        let expr = data;
        const segments = jsonPointer.split("/");
        for (const segment of segments) {
          if (segment) {
            data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
            expr = (0, codegen_1._)`${expr} && ${data}`;
          }
        }
        return expr;
        function errorMsg(pointerType, up) {
          return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
        }
      }
      exports.getData = getData;
    }
  });

  // node_modules/ajv/dist/runtime/validation_error.js
  var require_validation_error = __commonJS({
    "node_modules/ajv/dist/runtime/validation_error.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var ValidationError = class extends Error {
        constructor(errors) {
          super("validation failed");
          this.errors = errors;
          this.ajv = this.validation = true;
        }
      };
      exports.default = ValidationError;
    }
  });

  // node_modules/ajv/dist/compile/ref_error.js
  var require_ref_error = __commonJS({
    "node_modules/ajv/dist/compile/ref_error.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var resolve_1 = require_resolve();
      var MissingRefError = class extends Error {
        constructor(resolver, baseId, ref, msg) {
          super(msg || `can't resolve reference ${ref} from id ${baseId}`);
          this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
          this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
        }
      };
      exports.default = MissingRefError;
    }
  });

  // node_modules/ajv/dist/compile/index.js
  var require_compile = __commonJS({
    "node_modules/ajv/dist/compile/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
      var codegen_1 = require_codegen();
      var validation_error_1 = require_validation_error();
      var names_1 = require_names();
      var resolve_1 = require_resolve();
      var util_1 = require_util();
      var validate_1 = require_validate();
      var SchemaEnv = class {
        constructor(env) {
          var _a;
          this.refs = {};
          this.dynamicAnchors = {};
          let schema2;
          if (typeof env.schema == "object")
            schema2 = env.schema;
          this.schema = env.schema;
          this.schemaId = env.schemaId;
          this.root = env.root || this;
          this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema2 === null || schema2 === void 0 ? void 0 : schema2[env.schemaId || "$id"]);
          this.schemaPath = env.schemaPath;
          this.localRefs = env.localRefs;
          this.meta = env.meta;
          this.$async = schema2 === null || schema2 === void 0 ? void 0 : schema2.$async;
          this.refs = {};
        }
      };
      exports.SchemaEnv = SchemaEnv;
      function compileSchema(sch) {
        const _sch = getCompilingSchema.call(this, sch);
        if (_sch)
          return _sch;
        const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
          _ValidationError = gen.scopeValue("Error", {
            ref: validation_error_1.default,
            code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
          });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
          gen,
          allErrors: this.opts.allErrors,
          data: names_1.default.data,
          parentData: names_1.default.parentData,
          parentDataProperty: names_1.default.parentDataProperty,
          dataNames: [names_1.default.data],
          dataPathArr: [codegen_1.nil],
          dataLevel: 0,
          dataTypes: [],
          definedProperties: /* @__PURE__ */ new Set(),
          topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) } : { ref: sch.schema }),
          validateName,
          ValidationError: _ValidationError,
          schema: sch.schema,
          schemaEnv: sch,
          rootId,
          baseId: sch.baseId || rootId,
          schemaPath: codegen_1.nil,
          errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
          errorPath: (0, codegen_1._)`""`,
          opts: this.opts,
          self: this
        };
        let sourceCode;
        try {
          this._compilations.add(sch);
          (0, validate_1.validateFunctionCode)(schemaCxt);
          gen.optimize(this.opts.code.optimize);
          const validateCode = gen.toString();
          sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
          if (this.opts.code.process)
            sourceCode = this.opts.code.process(sourceCode, sch);
          const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
          const validate = makeValidate(this, this.scope.get());
          this.scope.value(validateName, { ref: validate });
          validate.errors = null;
          validate.schema = sch.schema;
          validate.schemaEnv = sch;
          if (sch.$async)
            validate.$async = true;
          if (this.opts.code.source === true) {
            validate.source = { validateName, validateCode, scopeValues: gen._values };
          }
          if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
              props: props instanceof codegen_1.Name ? void 0 : props,
              items: items instanceof codegen_1.Name ? void 0 : items,
              dynamicProps: props instanceof codegen_1.Name,
              dynamicItems: items instanceof codegen_1.Name
            };
            if (validate.source)
              validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
          }
          sch.validate = validate;
          return sch;
        } catch (e) {
          delete sch.validate;
          delete sch.validateName;
          if (sourceCode)
            this.logger.error("Error compiling schema, function code:", sourceCode);
          throw e;
        } finally {
          this._compilations.delete(sch);
        }
      }
      exports.compileSchema = compileSchema;
      function resolveRef(root, baseId, ref) {
        var _a;
        ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root.refs[ref];
        if (schOrFunc)
          return schOrFunc;
        let _sch = resolve.call(this, root, ref);
        if (_sch === void 0) {
          const schema2 = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
          const { schemaId } = this.opts;
          if (schema2)
            _sch = new SchemaEnv({ schema: schema2, schemaId, root, baseId });
        }
        if (_sch === void 0)
          return;
        return root.refs[ref] = inlineOrCompile.call(this, _sch);
      }
      exports.resolveRef = resolveRef;
      function inlineOrCompile(sch) {
        if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
          return sch.schema;
        return sch.validate ? sch : compileSchema.call(this, sch);
      }
      function getCompilingSchema(schEnv) {
        for (const sch of this._compilations) {
          if (sameSchemaEnv(sch, schEnv))
            return sch;
        }
      }
      exports.getCompilingSchema = getCompilingSchema;
      function sameSchemaEnv(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
      }
      function resolve(root, ref) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
          ref = sch;
        return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
      }
      function resolveSchema(root, ref) {
        const p = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
        let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, void 0);
        if (Object.keys(root.schema).length > 0 && refPath === baseId) {
          return getJsonPointer.call(this, p, root);
        }
        const id = (0, resolve_1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
          const sch = resolveSchema.call(this, root, schOrRef);
          if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
            return;
          return getJsonPointer.call(this, p, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
          return;
        if (!schOrRef.validate)
          compileSchema.call(this, schOrRef);
        if (id === (0, resolve_1.normalizeId)(ref)) {
          const { schema: schema2 } = schOrRef;
          const { schemaId } = this.opts;
          const schId = schema2[schemaId];
          if (schId)
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          return new SchemaEnv({ schema: schema2, schemaId, root, baseId });
        }
        return getJsonPointer.call(this, p, schOrRef);
      }
      exports.resolveSchema = resolveSchema;
      var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions"
      ]);
      function getJsonPointer(parsedRef, { baseId, schema: schema2, root }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
          return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
          if (typeof schema2 === "boolean")
            return;
          const partSchema = schema2[(0, util_1.unescapeFragment)(part)];
          if (partSchema === void 0)
            return;
          schema2 = partSchema;
          const schId = typeof schema2 === "object" && schema2[this.opts.schemaId];
          if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
          }
        }
        let env;
        if (typeof schema2 != "boolean" && schema2.$ref && !(0, util_1.schemaHasRulesButRef)(schema2, this.RULES)) {
          const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema2.$ref);
          env = resolveSchema.call(this, root, $ref);
        }
        const { schemaId } = this.opts;
        env = env || new SchemaEnv({ schema: schema2, schemaId, root, baseId });
        if (env.schema !== env.root.schema)
          return env;
        return void 0;
      }
    }
  });

  // node_modules/ajv/dist/refs/data.json
  var require_data = __commonJS({
    "node_modules/ajv/dist/refs/data.json"(exports, module) {
      module.exports = {
        $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
        type: "object",
        required: ["$data"],
        properties: {
          $data: {
            type: "string",
            anyOf: [{ format: "relative-json-pointer" }, { format: "json-pointer" }]
          }
        },
        additionalProperties: false
      };
    }
  });

  // node_modules/uri-js/dist/es5/uri.all.js
  var require_uri_all = __commonJS({
    "node_modules/uri-js/dist/es5/uri.all.js"(exports, module) {
      init_globals();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.URI = global2.URI || {});
      })(exports, function(exports2) {
        "use strict";
        function merge() {
          for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
          }
          if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
              sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join("");
          } else {
            return sets[0];
          }
        }
        function subexp(str) {
          return "(?:" + str + ")";
        }
        function typeOf(o) {
          return o === void 0 ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
        }
        function toUpperCase(str) {
          return str.toUpperCase();
        }
        function toArray(obj) {
          return obj !== void 0 && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
        }
        function assign(target, source2) {
          var obj = target;
          if (source2) {
            for (var key in source2) {
              obj[key] = source2[key];
            }
          }
          return obj;
        }
        function buildExps(isIRI2) {
          var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI2 ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + ZONEID$), IPVFUTURE$ = subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*"), HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")|" + REG_NAME$), PORT$ = subexp(DIGIT$$ + "*"), AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"), PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = subexp(PCHAR$ + "*"), SEGMENT_NZ$ = subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
          return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
          };
        }
        var URI_PROTOCOL = buildExps(false);
        var IRI_PROTOCOL = buildExps(true);
        var slicedToArray = function() {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        var toConsumableArray = function(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
              arr2[i] = arr[i];
            return arr2;
          } else {
            return Array.from(arr);
          }
        };
        var maxInt = 2147483647;
        var base = 36;
        var tMin = 1;
        var tMax = 26;
        var skew = 38;
        var damp = 700;
        var initialBias = 72;
        var initialN = 128;
        var delimiter = "-";
        var regexPunycode = /^xn--/;
        var regexNonASCII = /[^\0-\x7E]/;
        var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
        var errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        };
        var baseMinusTMin = base - tMin;
        var floor = Math.floor;
        var stringFromCharCode = String.fromCharCode;
        function error$1(type2) {
          throw new RangeError(errors[type2]);
        }
        function map(array, fn) {
          var result = [];
          var length = array.length;
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string, fn) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          var labels = string.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          while (counter < length) {
            var value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              var extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        var ucs2encode = function ucs2encode2(array) {
          return String.fromCodePoint.apply(String, toConsumableArray(array));
        };
        var basicToDigit = function basicToDigit2(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        };
        var digitToBasic = function digitToBasic2(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        };
        var adapt = function adapt2(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        };
        var decode = function decode2(input) {
          var output = [];
          var inputLength = input.length;
          var i = 0;
          var n = initialN;
          var bias = initialBias;
          var basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (var j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error$1("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
            var oldi = i;
            for (var w = 1, k = base; ; k += base) {
              if (index >= inputLength) {
                error$1("invalid-input");
              }
              var digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error$1("overflow");
              }
              i += digit * w;
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              var baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error$1("overflow");
              }
              w *= baseMinusT;
            }
            var out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error$1("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return String.fromCodePoint.apply(String, output);
        };
        var encode = function encode2(input) {
          var output = [];
          input = ucs2decode(input);
          var inputLength = input.length;
          var n = initialN;
          var delta = 0;
          var bias = initialBias;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _currentValue2 = _step.value;
              if (_currentValue2 < 128) {
                output.push(stringFromCharCode(_currentValue2));
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          var basicLength = output.length;
          var handledCPCount = basicLength;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            var m = maxInt;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var currentValue = _step2.value;
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            var handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error$1("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = void 0;
            try {
              for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _currentValue = _step3.value;
                if (_currentValue < n && ++delta > maxInt) {
                  error$1("overflow");
                }
                if (_currentValue == n) {
                  var q = delta;
                  for (var k = base; ; k += base) {
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) {
                      break;
                    }
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }
                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        };
        var toUnicode = function toUnicode2(input) {
          return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        };
        var toASCII = function toASCII2(input) {
          return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        };
        var punycode = {
          "version": "2.1.0",
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        var SCHEMES = {};
        function pctEncChar(chr) {
          var c = chr.charCodeAt(0);
          var e = void 0;
          if (c < 16)
            e = "%0" + c.toString(16).toUpperCase();
          else if (c < 128)
            e = "%" + c.toString(16).toUpperCase();
          else if (c < 2048)
            e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          else
            e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          return e;
        }
        function pctDecChars(str) {
          var newStr = "";
          var i = 0;
          var il = str.length;
          while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
              newStr += String.fromCharCode(c);
              i += 3;
            } else if (c >= 194 && c < 224) {
              if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
              } else {
                newStr += str.substr(i, 6);
              }
              i += 6;
            } else if (c >= 224) {
              if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16);
                var c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
              } else {
                newStr += str.substr(i, 9);
              }
              i += 9;
            } else {
              newStr += str.substr(i, 3);
              i += 3;
            }
          }
          return newStr;
        }
        function _normalizeComponentEncoding(components, protocol) {
          function decodeUnreserved2(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
          }
          if (components.scheme)
            components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
          if (components.userinfo !== void 0)
            components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.host !== void 0)
            components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.path !== void 0)
            components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.query !== void 0)
            components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.fragment !== void 0)
            components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          return components;
        }
        function _stripLeadingZeros(str) {
          return str.replace(/^0*(.*)/, "$1") || "0";
        }
        function _normalizeIPv4(host, protocol) {
          var matches = host.match(protocol.IPV4ADDRESS) || [];
          var _matches = slicedToArray(matches, 2), address = _matches[1];
          if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
          } else {
            return host;
          }
        }
        function _normalizeIPv6(host, protocol) {
          var matches = host.match(protocol.IPV6ADDRESS) || [];
          var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
          if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
              fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
            }
            if (isLastFieldIPv4Address) {
              fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
            }
            var allZeroFields = fields.reduce(function(acc, field, index) {
              if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                  lastLongest.length++;
                } else {
                  acc.push({ index, length: 1 });
                }
              }
              return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function(a, b) {
              return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
              var newFirst = fields.slice(0, longestZeroFields.index);
              var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
              newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
              newHost = fields.join(":");
            }
            if (zone) {
              newHost += "%" + zone;
            }
            return newHost;
          } else {
            return host;
          }
        }
        var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
        var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === void 0;
        function parse2(uriString) {
          var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var components = {};
          var protocol = options2.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          if (options2.reference === "suffix")
            uriString = (options2.scheme ? options2.scheme + ":" : "") + "//" + uriString;
          var matches = uriString.match(URI_PARSE);
          if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
              components.scheme = matches[1];
              components.userinfo = matches[3];
              components.host = matches[4];
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = matches[7];
              components.fragment = matches[8];
              if (isNaN(components.port)) {
                components.port = matches[5];
              }
            } else {
              components.scheme = matches[1] || void 0;
              components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : void 0;
              components.host = uriString.indexOf("//") !== -1 ? matches[4] : void 0;
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = uriString.indexOf("?") !== -1 ? matches[7] : void 0;
              components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : void 0;
              if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : void 0;
              }
            }
            if (components.host) {
              components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            if (components.scheme === void 0 && components.userinfo === void 0 && components.host === void 0 && components.port === void 0 && !components.path && components.query === void 0) {
              components.reference = "same-document";
            } else if (components.scheme === void 0) {
              components.reference = "relative";
            } else if (components.fragment === void 0) {
              components.reference = "absolute";
            } else {
              components.reference = "uri";
            }
            if (options2.reference && options2.reference !== "suffix" && options2.reference !== components.reference) {
              components.error = components.error || "URI is not a " + options2.reference + " reference.";
            }
            var schemeHandler = SCHEMES[(options2.scheme || components.scheme || "").toLowerCase()];
            if (!options2.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
              if (components.host && (options2.domainHost || schemeHandler && schemeHandler.domainHost)) {
                try {
                  components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                } catch (e) {
                  components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                }
              }
              _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
              _normalizeComponentEncoding(components, protocol);
            }
            if (schemeHandler && schemeHandler.parse) {
              schemeHandler.parse(components, options2);
            }
          } else {
            components.error = components.error || "URI can not be parsed.";
          }
          return components;
        }
        function _recomposeAuthority(components, options2) {
          var protocol = options2.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          if (components.userinfo !== void 0) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
          }
          if (components.host !== void 0) {
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {
              return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
          }
          if (typeof components.port === "number" || typeof components.port === "string") {
            uriTokens.push(":");
            uriTokens.push(String(components.port));
          }
          return uriTokens.length ? uriTokens.join("") : void 0;
        }
        var RDS1 = /^\.\.?\//;
        var RDS2 = /^\/\.(\/|$)/;
        var RDS3 = /^\/\.\.(\/|$)/;
        var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
        function removeDotSegments(input) {
          var output = [];
          while (input.length) {
            if (input.match(RDS1)) {
              input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
              input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
              input = input.replace(RDS3, "/");
              output.pop();
            } else if (input === "." || input === "..") {
              input = "";
            } else {
              var im = input.match(RDS5);
              if (im) {
                var s = im[0];
                input = input.slice(s.length);
                output.push(s);
              } else {
                throw new Error("Unexpected dot segment condition");
              }
            }
          }
          return output.join("");
        }
        function serialize(components) {
          var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var protocol = options2.iri ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          var schemeHandler = SCHEMES[(options2.scheme || components.scheme || "").toLowerCase()];
          if (schemeHandler && schemeHandler.serialize)
            schemeHandler.serialize(components, options2);
          if (components.host) {
            if (protocol.IPV6ADDRESS.test(components.host)) {
            } else if (options2.domainHost || schemeHandler && schemeHandler.domainHost) {
              try {
                components.host = !options2.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
              } catch (e) {
                components.error = components.error || "Host's domain name can not be converted to " + (!options2.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
              }
            }
          }
          _normalizeComponentEncoding(components, protocol);
          if (options2.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
          }
          var authority2 = _recomposeAuthority(components, options2);
          if (authority2 !== void 0) {
            if (options2.reference !== "suffix") {
              uriTokens.push("//");
            }
            uriTokens.push(authority2);
            if (components.path && components.path.charAt(0) !== "/") {
              uriTokens.push("/");
            }
          }
          if (components.path !== void 0) {
            var s = components.path;
            if (!options2.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
              s = removeDotSegments(s);
            }
            if (authority2 === void 0) {
              s = s.replace(/^\/\//, "/%2F");
            }
            uriTokens.push(s);
          }
          if (components.query !== void 0) {
            uriTokens.push("?");
            uriTokens.push(components.query);
          }
          if (components.fragment !== void 0) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
          }
          return uriTokens.join("");
        }
        function resolveComponents(base2, relative) {
          var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var skipNormalization = arguments[3];
          var target = {};
          if (!skipNormalization) {
            base2 = parse2(serialize(base2, options2), options2);
            relative = parse2(serialize(relative, options2), options2);
          }
          options2 = options2 || {};
          if (!options2.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
              target.userinfo = relative.userinfo;
              target.host = relative.host;
              target.port = relative.port;
              target.path = removeDotSegments(relative.path || "");
              target.query = relative.query;
            } else {
              if (!relative.path) {
                target.path = base2.path;
                if (relative.query !== void 0) {
                  target.query = relative.query;
                } else {
                  target.query = base2.query;
                }
              } else {
                if (relative.path.charAt(0) === "/") {
                  target.path = removeDotSegments(relative.path);
                } else {
                  if ((base2.userinfo !== void 0 || base2.host !== void 0 || base2.port !== void 0) && !base2.path) {
                    target.path = "/" + relative.path;
                  } else if (!base2.path) {
                    target.path = relative.path;
                  } else {
                    target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
                  }
                  target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
              }
              target.userinfo = base2.userinfo;
              target.host = base2.host;
              target.port = base2.port;
            }
            target.scheme = base2.scheme;
          }
          target.fragment = relative.fragment;
          return target;
        }
        function resolve(baseURI, relativeURI, options2) {
          var schemelessOptions = assign({ scheme: "null" }, options2);
          return serialize(resolveComponents(parse2(baseURI, schemelessOptions), parse2(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
        }
        function normalize(uri, options2) {
          if (typeof uri === "string") {
            uri = serialize(parse2(uri, options2), options2);
          } else if (typeOf(uri) === "object") {
            uri = parse2(serialize(uri, options2), options2);
          }
          return uri;
        }
        function equal(uriA, uriB, options2) {
          if (typeof uriA === "string") {
            uriA = serialize(parse2(uriA, options2), options2);
          } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options2);
          }
          if (typeof uriB === "string") {
            uriB = serialize(parse2(uriB, options2), options2);
          } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options2);
          }
          return uriA === uriB;
        }
        function escapeComponent(str, options2) {
          return str && str.toString().replace(!options2 || !options2.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
        }
        function unescapeComponent(str, options2) {
          return str && str.toString().replace(!options2 || !options2.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
        }
        var handler = {
          scheme: "http",
          domainHost: true,
          parse: function parse3(components, options2) {
            if (!components.host) {
              components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
          },
          serialize: function serialize2(components, options2) {
            var secure = String(components.scheme).toLowerCase() === "https";
            if (components.port === (secure ? 443 : 80) || components.port === "") {
              components.port = void 0;
            }
            if (!components.path) {
              components.path = "/";
            }
            return components;
          }
        };
        var handler$1 = {
          scheme: "https",
          domainHost: handler.domainHost,
          parse: handler.parse,
          serialize: handler.serialize
        };
        function isSecure(wsComponents) {
          return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
        }
        var handler$2 = {
          scheme: "ws",
          domainHost: true,
          parse: function parse3(components, options2) {
            var wsComponents = components;
            wsComponents.secure = isSecure(wsComponents);
            wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
            wsComponents.path = void 0;
            wsComponents.query = void 0;
            return wsComponents;
          },
          serialize: function serialize2(wsComponents, options2) {
            if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
              wsComponents.port = void 0;
            }
            if (typeof wsComponents.secure === "boolean") {
              wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
              wsComponents.secure = void 0;
            }
            if (wsComponents.resourceName) {
              var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
              wsComponents.path = path && path !== "/" ? path : void 0;
              wsComponents.query = query;
              wsComponents.resourceName = void 0;
            }
            wsComponents.fragment = void 0;
            return wsComponents;
          }
        };
        var handler$3 = {
          scheme: "wss",
          domainHost: handler$2.domainHost,
          parse: handler$2.parse,
          serialize: handler$2.serialize
        };
        var O = {};
        var isIRI = true;
        var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
        var HEXDIG$$ = "[0-9A-Fa-f]";
        var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
        var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
        var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
        var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
        var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
        var UNRESERVED = new RegExp(UNRESERVED$$, "g");
        var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
        var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
        var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
        var NOT_HFVALUE = NOT_HFNAME;
        function decodeUnreserved(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(UNRESERVED) ? str : decStr;
        }
        var handler$4 = {
          scheme: "mailto",
          parse: function parse$$1(components, options2) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = void 0;
            if (mailtoComponents.query) {
              var unknownHeaders = false;
              var headers = {};
              var hfields = mailtoComponents.query.split("&");
              for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=");
                switch (hfield[0]) {
                  case "to":
                    var toAddrs = hfield[1].split(",");
                    for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                      to.push(toAddrs[_x]);
                    }
                    break;
                  case "subject":
                    mailtoComponents.subject = unescapeComponent(hfield[1], options2);
                    break;
                  case "body":
                    mailtoComponents.body = unescapeComponent(hfield[1], options2);
                    break;
                  default:
                    unknownHeaders = true;
                    headers[unescapeComponent(hfield[0], options2)] = unescapeComponent(hfield[1], options2);
                    break;
                }
              }
              if (unknownHeaders)
                mailtoComponents.headers = headers;
            }
            mailtoComponents.query = void 0;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
              var addr = to[_x2].split("@");
              addr[0] = unescapeComponent(addr[0]);
              if (!options2.unicodeSupport) {
                try {
                  addr[1] = punycode.toASCII(unescapeComponent(addr[1], options2).toLowerCase());
                } catch (e) {
                  mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
              } else {
                addr[1] = unescapeComponent(addr[1], options2).toLowerCase();
              }
              to[_x2] = addr.join("@");
            }
            return mailtoComponents;
          },
          serialize: function serialize$$1(mailtoComponents, options2) {
            var components = mailtoComponents;
            var to = toArray(mailtoComponents.to);
            if (to) {
              for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x]);
                var atIdx = toAddr.lastIndexOf("@");
                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                var domain = toAddr.slice(atIdx + 1);
                try {
                  domain = !options2.iri ? punycode.toASCII(unescapeComponent(domain, options2).toLowerCase()) : punycode.toUnicode(domain);
                } catch (e) {
                  components.error = components.error || "Email address's domain name can not be converted to " + (!options2.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[x] = localPart + "@" + domain;
              }
              components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject)
              headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body)
              headers["body"] = mailtoComponents.body;
            var fields = [];
            for (var name in headers) {
              if (headers[name] !== O[name]) {
                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
              }
            }
            if (fields.length) {
              components.query = fields.join("&");
            }
            return components;
          }
        };
        var URN_PARSE = /^([^\:]+)\:(.*)/;
        var handler$5 = {
          scheme: "urn",
          parse: function parse$$1(components, options2) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
              var scheme = options2.scheme || urnComponents.scheme || "urn";
              var nid = matches[1].toLowerCase();
              var nss = matches[2];
              var urnScheme = scheme + ":" + (options2.nid || nid);
              var schemeHandler = SCHEMES[urnScheme];
              urnComponents.nid = nid;
              urnComponents.nss = nss;
              urnComponents.path = void 0;
              if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options2);
              }
            } else {
              urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
          },
          serialize: function serialize$$1(urnComponents, options2) {
            var scheme = options2.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options2.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
              urnComponents = schemeHandler.serialize(urnComponents, options2);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options2.nid) + ":" + nss;
            return uriComponents;
          }
        };
        var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
        var handler$6 = {
          scheme: "urn:uuid",
          parse: function parse3(urnComponents, options2) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = void 0;
            if (!options2.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
              uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
          },
          serialize: function serialize2(uuidComponents, options2) {
            var urnComponents = uuidComponents;
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
          }
        };
        SCHEMES[handler.scheme] = handler;
        SCHEMES[handler$1.scheme] = handler$1;
        SCHEMES[handler$2.scheme] = handler$2;
        SCHEMES[handler$3.scheme] = handler$3;
        SCHEMES[handler$4.scheme] = handler$4;
        SCHEMES[handler$5.scheme] = handler$5;
        SCHEMES[handler$6.scheme] = handler$6;
        exports2.SCHEMES = SCHEMES;
        exports2.pctEncChar = pctEncChar;
        exports2.pctDecChars = pctDecChars;
        exports2.parse = parse2;
        exports2.removeDotSegments = removeDotSegments;
        exports2.serialize = serialize;
        exports2.resolveComponents = resolveComponents;
        exports2.resolve = resolve;
        exports2.normalize = normalize;
        exports2.equal = equal;
        exports2.escapeComponent = escapeComponent;
        exports2.unescapeComponent = unescapeComponent;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/ajv/dist/runtime/uri.js
  var require_uri = __commonJS({
    "node_modules/ajv/dist/runtime/uri.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var uri = require_uri_all();
      uri.code = 'require("ajv/dist/runtime/uri").default';
      exports.default = uri;
    }
  });

  // node_modules/ajv/dist/core.js
  var require_core = __commonJS({
    "node_modules/ajv/dist/core.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
      var validate_1 = require_validate();
      Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen();
      Object.defineProperty(exports, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
      var validation_error_1 = require_validation_error();
      var ref_error_1 = require_ref_error();
      var rules_1 = require_rules();
      var compile_1 = require_compile();
      var codegen_2 = require_codegen();
      var resolve_1 = require_resolve();
      var dataType_1 = require_dataType();
      var util_1 = require_util();
      var $dataRefSchema = require_data();
      var uri_1 = require_uri();
      var defaultRegExp = (str, flags) => new RegExp(str, flags);
      defaultRegExp.code = "new RegExp";
      var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
      var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
        "validate",
        "serialize",
        "parse",
        "wrapper",
        "root",
        "schema",
        "keyword",
        "pattern",
        "formats",
        "validate$data",
        "func",
        "obj",
        "Error"
      ]);
      var removedOptions = {
        errorDataPath: "",
        format: "`validateFormats: false` can be used instead.",
        nullable: '"nullable" keyword is supported by default.',
        jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
        extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
        missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
        processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
        sourceCode: "Use option `code: {source: true}`",
        strictDefaults: "It is default now, see option `strict`.",
        strictKeywords: "It is default now, see option `strict`.",
        uniqueItems: '"uniqueItems" keyword is always validated.',
        unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
        cache: "Map is used as cache, schema object as key.",
        serialize: "Map is used as cache, schema object as key.",
        ajvErrors: "It is default now."
      };
      var deprecatedOptions = {
        ignoreKeywordsWithRef: "",
        jsPropertySyntax: "",
        unicode: '"minLength"/"maxLength" account for unicode characters by default.'
      };
      var MAX_EXPRESSION = 200;
      function requiredOptions(o) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
        const s = o.strict;
        const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
        const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
        const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
        const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
        return {
          strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
          strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
          strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
          strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
          strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
          code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
          loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
          loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
          meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
          messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
          inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
          schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
          addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
          validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
          validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
          unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
          int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
          uriResolver
        };
      }
      var Ajv = class {
        constructor(opts = {}) {
          this.schemas = {};
          this.refs = {};
          this.formats = {};
          this._compilations = /* @__PURE__ */ new Set();
          this._loading = {};
          this._cache = /* @__PURE__ */ new Map();
          opts = this.opts = { ...opts, ...requiredOptions(opts) };
          const { es5, lines } = this.opts.code;
          this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
          this.logger = getLogger(opts.logger);
          const formatOpt = opts.validateFormats;
          opts.validateFormats = false;
          this.RULES = (0, rules_1.getRules)();
          checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
          checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
          this._metaOpts = getMetaSchemaOptions.call(this);
          if (opts.formats)
            addInitialFormats.call(this);
          this._addVocabularies();
          this._addDefaultMetaSchema();
          if (opts.keywords)
            addInitialKeywords.call(this, opts.keywords);
          if (typeof opts.meta == "object")
            this.addMetaSchema(opts.meta);
          addInitialSchemas.call(this);
          opts.validateFormats = formatOpt;
        }
        _addVocabularies() {
          this.addKeyword("$async");
        }
        _addDefaultMetaSchema() {
          const { $data, meta, schemaId } = this.opts;
          let _dataRefSchema = $dataRefSchema;
          if (schemaId === "id") {
            _dataRefSchema = { ...$dataRefSchema };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
          }
          if (meta && $data)
            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
        }
        defaultMeta() {
          const { meta, schemaId } = this.opts;
          return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
        }
        validate(schemaKeyRef, data) {
          let v;
          if (typeof schemaKeyRef == "string") {
            v = this.getSchema(schemaKeyRef);
            if (!v)
              throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
          } else {
            v = this.compile(schemaKeyRef);
          }
          const valid = v(data);
          if (!("$async" in v))
            this.errors = v.errors;
          return valid;
        }
        compile(schema2, _meta) {
          const sch = this._addSchema(schema2, _meta);
          return sch.validate || this._compileSchemaEnv(sch);
        }
        compileAsync(schema2, meta) {
          if (typeof this.opts.loadSchema != "function") {
            throw new Error("options.loadSchema should be a function");
          }
          const { loadSchema } = this.opts;
          return runCompileAsync.call(this, schema2, meta);
          async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
          }
          async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) {
              await runCompileAsync.call(this, { $ref }, true);
            }
          }
          async function _compileAsync(sch) {
            try {
              return this._compileSchemaEnv(sch);
            } catch (e) {
              if (!(e instanceof ref_error_1.default))
                throw e;
              checkLoaded.call(this, e);
              await loadMissingSchema.call(this, e.missingSchema);
              return _compileAsync.call(this, sch);
            }
          }
          function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) {
              throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
            }
          }
          async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref])
              await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref])
              this.addSchema(_schema, ref, meta);
          }
          async function _loadSchema(ref) {
            const p = this._loading[ref];
            if (p)
              return p;
            try {
              return await (this._loading[ref] = loadSchema(ref));
            } finally {
              delete this._loading[ref];
            }
          }
        }
        addSchema(schema2, key, _meta, _validateSchema = this.opts.validateSchema) {
          if (Array.isArray(schema2)) {
            for (const sch of schema2)
              this.addSchema(sch, void 0, _meta, _validateSchema);
            return this;
          }
          let id;
          if (typeof schema2 === "object") {
            const { schemaId } = this.opts;
            id = schema2[schemaId];
            if (id !== void 0 && typeof id != "string") {
              throw new Error(`schema ${schemaId} must be string`);
            }
          }
          key = (0, resolve_1.normalizeId)(key || id);
          this._checkUnique(key);
          this.schemas[key] = this._addSchema(schema2, _meta, key, _validateSchema, true);
          return this;
        }
        addMetaSchema(schema2, key, _validateSchema = this.opts.validateSchema) {
          this.addSchema(schema2, key, true, _validateSchema);
          return this;
        }
        validateSchema(schema2, throwOrLogError) {
          if (typeof schema2 == "boolean")
            return true;
          let $schema;
          $schema = schema2.$schema;
          if ($schema !== void 0 && typeof $schema != "string") {
            throw new Error("$schema must be a string");
          }
          $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
          if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
          }
          const valid = this.validate($schema, schema2);
          if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log")
              this.logger.error(message);
            else
              throw new Error(message);
          }
          return valid;
        }
        getSchema(keyRef) {
          let sch;
          while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
            keyRef = sch;
          if (sch === void 0) {
            const { schemaId } = this.opts;
            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
            sch = compile_1.resolveSchema.call(this, root, keyRef);
            if (!sch)
              return;
            this.refs[keyRef] = sch;
          }
          return sch.validate || this._compileSchemaEnv(sch);
        }
        removeSchema(schemaKeyRef) {
          if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
          }
          switch (typeof schemaKeyRef) {
            case "undefined":
              this._removeAllSchemas(this.schemas);
              this._removeAllSchemas(this.refs);
              this._cache.clear();
              return this;
            case "string": {
              const sch = getSchEnv.call(this, schemaKeyRef);
              if (typeof sch == "object")
                this._cache.delete(sch.schema);
              delete this.schemas[schemaKeyRef];
              delete this.refs[schemaKeyRef];
              return this;
            }
            case "object": {
              const cacheKey = schemaKeyRef;
              this._cache.delete(cacheKey);
              let id = schemaKeyRef[this.opts.schemaId];
              if (id) {
                id = (0, resolve_1.normalizeId)(id);
                delete this.schemas[id];
                delete this.refs[id];
              }
              return this;
            }
            default:
              throw new Error("ajv.removeSchema: invalid parameter");
          }
        }
        addVocabulary(definitions) {
          for (const def of definitions)
            this.addKeyword(def);
          return this;
        }
        addKeyword(kwdOrDef, def) {
          let keyword;
          if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
              this.logger.warn("these parameters are deprecated, see docs for addKeyword");
              def.keyword = keyword;
            }
          } else if (typeof kwdOrDef == "object" && def === void 0) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) {
              throw new Error("addKeywords: keyword must be string or non-empty array");
            }
          } else {
            throw new Error("invalid addKeywords parameters");
          }
          checkKeyword.call(this, keyword, def);
          if (!def) {
            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
            return this;
          }
          keywordMetaschema.call(this, def);
          const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
          };
          (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k) => addRule.call(this, k, definition) : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
          return this;
        }
        getKeyword(keyword) {
          const rule = this.RULES.all[keyword];
          return typeof rule == "object" ? rule.definition : !!rule;
        }
        removeKeyword(keyword) {
          const { RULES } = this;
          delete RULES.keywords[keyword];
          delete RULES.all[keyword];
          for (const group of RULES.rules) {
            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
            if (i >= 0)
              group.rules.splice(i, 1);
          }
          return this;
        }
        addFormat(name, format) {
          if (typeof format == "string")
            format = new RegExp(format);
          this.formats[name] = format;
          return this;
        }
        errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
          if (!errors || errors.length === 0)
            return "No errors";
          return errors.map((e) => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
        }
        $dataMetaSchema(metaSchema, keywordsJsonPointers) {
          const rules = this.RULES.all;
          metaSchema = JSON.parse(JSON.stringify(metaSchema));
          for (const jsonPointer of keywordsJsonPointers) {
            const segments = jsonPointer.split("/").slice(1);
            let keywords2 = metaSchema;
            for (const seg of segments)
              keywords2 = keywords2[seg];
            for (const key in rules) {
              const rule = rules[key];
              if (typeof rule != "object")
                continue;
              const { $data } = rule.definition;
              const schema2 = keywords2[key];
              if ($data && schema2)
                keywords2[key] = schemaOrData(schema2);
            }
          }
          return metaSchema;
        }
        _removeAllSchemas(schemas, regex) {
          for (const keyRef in schemas) {
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
              if (typeof sch == "string") {
                delete schemas[keyRef];
              } else if (sch && !sch.meta) {
                this._cache.delete(sch.schema);
                delete schemas[keyRef];
              }
            }
          }
        }
        _addSchema(schema2, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
          let id;
          const { schemaId } = this.opts;
          if (typeof schema2 == "object") {
            id = schema2[schemaId];
          } else {
            if (this.opts.jtd)
              throw new Error("schema must be object");
            else if (typeof schema2 != "boolean")
              throw new Error("schema must be object or boolean");
          }
          let sch = this._cache.get(schema2);
          if (sch !== void 0)
            return sch;
          baseId = (0, resolve_1.normalizeId)(id || baseId);
          const localRefs = resolve_1.getSchemaRefs.call(this, schema2, baseId);
          sch = new compile_1.SchemaEnv({ schema: schema2, schemaId, meta, baseId, localRefs });
          this._cache.set(sch.schema, sch);
          if (addSchema && !baseId.startsWith("#")) {
            if (baseId)
              this._checkUnique(baseId);
            this.refs[baseId] = sch;
          }
          if (validateSchema)
            this.validateSchema(schema2, true);
          return sch;
        }
        _checkUnique(id) {
          if (this.schemas[id] || this.refs[id]) {
            throw new Error(`schema with key or id "${id}" already exists`);
          }
        }
        _compileSchemaEnv(sch) {
          if (sch.meta)
            this._compileMetaSchema(sch);
          else
            compile_1.compileSchema.call(this, sch);
          if (!sch.validate)
            throw new Error("ajv implementation error");
          return sch.validate;
        }
        _compileMetaSchema(sch) {
          const currentOpts = this.opts;
          this.opts = this._metaOpts;
          try {
            compile_1.compileSchema.call(this, sch);
          } finally {
            this.opts = currentOpts;
          }
        }
      };
      exports.default = Ajv;
      Ajv.ValidationError = validation_error_1.default;
      Ajv.MissingRefError = ref_error_1.default;
      function checkOptions(checkOpts, options2, msg, log2 = "error") {
        for (const key in checkOpts) {
          const opt = key;
          if (opt in options2)
            this.logger[log2](`${msg}: option ${key}. ${checkOpts[opt]}`);
        }
      }
      function getSchEnv(keyRef) {
        keyRef = (0, resolve_1.normalizeId)(keyRef);
        return this.schemas[keyRef] || this.refs[keyRef];
      }
      function addInitialSchemas() {
        const optsSchemas = this.opts.schemas;
        if (!optsSchemas)
          return;
        if (Array.isArray(optsSchemas))
          this.addSchema(optsSchemas);
        else
          for (const key in optsSchemas)
            this.addSchema(optsSchemas[key], key);
      }
      function addInitialFormats() {
        for (const name in this.opts.formats) {
          const format = this.opts.formats[name];
          if (format)
            this.addFormat(name, format);
        }
      }
      function addInitialKeywords(defs) {
        if (Array.isArray(defs)) {
          this.addVocabulary(defs);
          return;
        }
        this.logger.warn("keywords option as map is deprecated, pass array");
        for (const keyword in defs) {
          const def = defs[keyword];
          if (!def.keyword)
            def.keyword = keyword;
          this.addKeyword(def);
        }
      }
      function getMetaSchemaOptions() {
        const metaOpts = { ...this.opts };
        for (const opt of META_IGNORE_OPTIONS)
          delete metaOpts[opt];
        return metaOpts;
      }
      var noLogs = { log() {
      }, warn() {
      }, error() {
      } };
      function getLogger(logger) {
        if (logger === false)
          return noLogs;
        if (logger === void 0)
          return console;
        if (logger.log && logger.warn && logger.error)
          return logger;
        throw new Error("logger must implement log, warn and error methods");
      }
      var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
      function checkKeyword(keyword, def) {
        const { RULES } = this;
        (0, util_1.eachItem)(keyword, (kwd) => {
          if (RULES.keywords[kwd])
            throw new Error(`Keyword ${kwd} is already defined`);
          if (!KEYWORD_NAME.test(kwd))
            throw new Error(`Keyword ${kwd} has invalid name`);
        });
        if (!def)
          return;
        if (def.$data && !("code" in def || "validate" in def)) {
          throw new Error('$data keyword must have "code" or "validate" function');
        }
      }
      function addRule(keyword, definition, dataType) {
        var _a;
        const post = definition === null || definition === void 0 ? void 0 : definition.post;
        if (dataType && post)
          throw new Error('keyword with "post" flag cannot have "type"');
        const { RULES } = this;
        let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
        if (!ruleGroup) {
          ruleGroup = { type: dataType, rules: [] };
          RULES.rules.push(ruleGroup);
        }
        RULES.keywords[keyword] = true;
        if (!definition)
          return;
        const rule = {
          keyword,
          definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
          }
        };
        if (definition.before)
          addBeforeRule.call(this, ruleGroup, rule, definition.before);
        else
          ruleGroup.rules.push(rule);
        RULES.all[keyword] = rule;
        (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
      }
      function addBeforeRule(ruleGroup, rule, before) {
        const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
        if (i >= 0) {
          ruleGroup.rules.splice(i, 0, rule);
        } else {
          ruleGroup.rules.push(rule);
          this.logger.warn(`rule ${before} is not defined`);
        }
      }
      function keywordMetaschema(def) {
        let { metaSchema } = def;
        if (metaSchema === void 0)
          return;
        if (def.$data && this.opts.$data)
          metaSchema = schemaOrData(metaSchema);
        def.validateSchema = this.compile(metaSchema, true);
      }
      var $dataRef = {
        $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
      };
      function schemaOrData(schema2) {
        return { anyOf: [schema2, $dataRef] };
      }
    }
  });

  // node_modules/ajv/dist/vocabularies/core/id.js
  var require_id = __commonJS({
    "node_modules/ajv/dist/vocabularies/core/id.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var def = {
        keyword: "id",
        code() {
          throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/core/ref.js
  var require_ref = __commonJS({
    "node_modules/ajv/dist/vocabularies/core/ref.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.callRef = exports.getValidate = void 0;
      var ref_error_1 = require_ref_error();
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var compile_1 = require_compile();
      var util_1 = require_util();
      var def = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
          const { gen, schema: $ref, it } = cxt;
          const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
          const { root } = env;
          if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
            return callRootRef();
          const schOrEnv = compile_1.resolveRef.call(self2, root, baseId, $ref);
          if (schOrEnv === void 0)
            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
          if (schOrEnv instanceof compile_1.SchemaEnv)
            return callValidate(schOrEnv);
          return inlineRefSchema(schOrEnv);
          function callRootRef() {
            if (env === root)
              return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", { ref: root });
            return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
          }
          function callValidate(sch) {
            const v = getValidate(cxt, sch);
            callRef(cxt, v, sch, sch.$async);
          }
          function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
              schema: sch,
              dataTypes: [],
              schemaPath: codegen_1.nil,
              topSchemaRef: schName,
              errSchemaPath: $ref
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
          }
        }
      };
      function getValidate(cxt, sch) {
        const { gen } = cxt;
        return sch.validate ? gen.scopeValue("validate", { ref: sch.validate }) : (0, codegen_1._)`${gen.scopeValue("wrapper", { ref: sch })}.validate`;
      }
      exports.getValidate = getValidate;
      function callRef(cxt, v, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
        if ($async)
          callAsyncRef();
        else
          callSyncRef();
        function callAsyncRef() {
          if (!env.$async)
            throw new Error("async schema referenced by sync schema");
          const valid = gen.let("valid");
          gen.try(() => {
            gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
            addEvaluatedFrom(v);
            if (!allErrors)
              gen.assign(valid, true);
          }, (e) => {
            gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
            addErrorsFrom(e);
            if (!allErrors)
              gen.assign(valid, false);
          });
          cxt.ok(valid);
        }
        function callSyncRef() {
          cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
        }
        function addErrorsFrom(source2) {
          const errs = (0, codegen_1._)`${source2}.errors`;
          gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
          gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source2) {
          var _a;
          if (!it.opts.unevaluated)
            return;
          const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
          if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
              if (schEvaluated.props !== void 0) {
                it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
              }
            } else {
              const props = gen.var("props", (0, codegen_1._)`${source2}.evaluated.props`);
              it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
          }
          if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
              if (schEvaluated.items !== void 0) {
                it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
              }
            } else {
              const items = gen.var("items", (0, codegen_1._)`${source2}.evaluated.items`);
              it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
          }
        }
      }
      exports.callRef = callRef;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/core/index.js
  var require_core2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/core/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var id_1 = require_id();
      var ref_1 = require_ref();
      var core = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1.default,
        ref_1.default
      ];
      exports.default = core;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitNumber.js
  var require_limitNumber = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitNumber.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var ops = codegen_1.operators;
      var KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE }
      };
      var error = {
        message: ({ keyword, schemaCode }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
      };
      var def = {
        keyword: Object.keys(KWDs),
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/multipleOf.js
  var require_multipleOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/multipleOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
      };
      var def = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, schemaCode, it } = cxt;
          const prec = it.opts.multipleOfPrecision;
          const res = gen.let("res");
          const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
          cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/runtime/ucs2length.js
  var require_ucs2length = __commonJS({
    "node_modules/ajv/dist/runtime/ucs2length.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function ucs2length(str) {
        const len = str.length;
        let length = 0;
        let pos = 0;
        let value;
        while (pos < len) {
          length++;
          value = str.charCodeAt(pos++);
          if (value >= 55296 && value <= 56319 && pos < len) {
            value = str.charCodeAt(pos);
            if ((value & 64512) === 56320)
              pos++;
          }
        }
        return length;
      }
      exports.default = ucs2length;
      ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitLength.js
  var require_limitLength = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitLength.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var ucs2length_1 = require_ucs2length();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxLength" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode, it } = cxt;
          const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
          const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
          cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/pattern.js
  var require_pattern = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/pattern.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
      };
      var def = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error,
        code(cxt) {
          const { data, $data, schema: schema2, schemaCode, it } = cxt;
          const u = it.opts.unicodeRegExp ? "u" : "";
          const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema2);
          cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitProperties.js
  var require_limitProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxProperties" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/required.js
  var require_required = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/required.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { missingProperty } }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
      };
      var def = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, schemaCode, data, $data, it } = cxt;
          const { opts } = it;
          if (!$data && schema2.length === 0)
            return;
          const useLoop = schema2.length >= opts.loopRequired;
          if (it.allErrors)
            allErrorsMode();
          else
            exitOnErrorMode();
          if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema2) {
              if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
                const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
              }
            }
          }
          function allErrorsMode() {
            if (useLoop || $data) {
              cxt.block$data(codegen_1.nil, loopAllRequired);
            } else {
              for (const prop of schema2) {
                (0, code_1.checkReportMissingProp)(cxt, prop);
              }
            }
          }
          function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
              const valid = gen.let("valid", true);
              cxt.block$data(valid, () => loopUntilMissing(missing, valid));
              cxt.ok(valid);
            } else {
              gen.if((0, code_1.checkMissingProp)(cxt, schema2, missing));
              (0, code_1.reportMissingProp)(cxt, missing);
              gen.else();
            }
          }
          function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop) => {
              cxt.setParams({ missingProperty: prop });
              gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
            });
          }
          function loopUntilMissing(missing, valid) {
            cxt.setParams({ missingProperty: missing });
            gen.forOf(missing, schemaCode, () => {
              gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
              gen.if((0, codegen_1.not)(valid), () => {
                cxt.error();
                gen.break();
              });
            }, codegen_1.nil);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitItems.js
  var require_limitItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message({ keyword, schemaCode }) {
          const comp = keyword === "maxItems" ? "more" : "fewer";
          return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`
      };
      var def = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error,
        code(cxt) {
          const { keyword, data, schemaCode } = cxt;
          const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
          cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/runtime/equal.js
  var require_equal = __commonJS({
    "node_modules/ajv/dist/runtime/equal.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var equal = require_fast_deep_equal();
      equal.code = 'require("ajv/dist/runtime/equal").default';
      exports.default = equal;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
  var require_uniqueItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dataType_1 = require_dataType();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var equal_1 = require_equal();
      var error = {
        message: ({ params: { i, j } }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
        params: ({ params: { i, j } }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`
      };
      var def = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema: schema2, parentSchema, schemaCode, it } = cxt;
          if (!$data && !schema2)
            return;
          const valid = gen.let("valid");
          const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
          cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
          cxt.ok(valid);
          function validateUniqueItems() {
            const i = gen.let("i", (0, codegen_1._)`${data}.length`);
            const j = gen.let("j");
            cxt.setParams({ i, j });
            gen.assign(valid, true);
            gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
          }
          function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
          }
          function loopN(i, j) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._)`{}`);
            gen.for((0, codegen_1._)`;${i}--;`, () => {
              gen.let(item, (0, codegen_1._)`${data}[${i}]`);
              gen.if(wrongType, (0, codegen_1._)`continue`);
              if (itemTypes.length > 1)
                gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
              gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
                gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
                cxt.error();
                gen.assign(valid, false).break();
              }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
            });
          }
          function loopN2(i, j) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
              cxt.error();
              gen.assign(valid, false).break(outer);
            })));
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/const.js
  var require_const = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/const.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var equal_1 = require_equal();
      var error = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
      };
      var def = {
        keyword: "const",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schemaCode, schema: schema2 } = cxt;
          if ($data || schema2 && typeof schema2 == "object") {
            cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
          } else {
            cxt.fail((0, codegen_1._)`${schema2} !== ${data}`);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/enum.js
  var require_enum = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/enum.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var equal_1 = require_equal();
      var error = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
      };
      var def = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error,
        code(cxt) {
          const { gen, data, $data, schema: schema2, schemaCode, it } = cxt;
          if (!$data && schema2.length === 0)
            throw new Error("enum must have non-empty array");
          const useLoop = schema2.length >= it.opts.loopEnum;
          let eql;
          const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
          let valid;
          if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
          } else {
            if (!Array.isArray(schema2))
              throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = (0, codegen_1.or)(...schema2.map((_x, i) => equalCode(vSchema, i)));
          }
          cxt.pass(valid);
          function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
          }
          function equalCode(vSchema, i) {
            const sch = schema2[i];
            return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/index.js
  var require_validation = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var limitNumber_1 = require_limitNumber();
      var multipleOf_1 = require_multipleOf();
      var limitLength_1 = require_limitLength();
      var pattern_1 = require_pattern();
      var limitProperties_1 = require_limitProperties();
      var required_1 = require_required();
      var limitItems_1 = require_limitItems();
      var uniqueItems_1 = require_uniqueItems();
      var const_1 = require_const();
      var enum_1 = require_enum();
      var validation = [
        limitNumber_1.default,
        multipleOf_1.default,
        limitLength_1.default,
        pattern_1.default,
        limitProperties_1.default,
        required_1.default,
        limitItems_1.default,
        uniqueItems_1.default,
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1.default,
        enum_1.default
      ];
      exports.default = validation;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
  var require_additionalItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/additionalItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAdditionalItems = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { parentSchema, it } = cxt;
          const { items } = parentSchema;
          if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
          }
          validateAdditionalItems(cxt, items);
        }
      };
      function validateAdditionalItems(cxt, items) {
        const { gen, schema: schema2, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        if (schema2 === false) {
          cxt.setParams({ len: items.length });
          cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
        } else if (typeof schema2 == "object" && !(0, util_1.alwaysValidSchema)(it, schema2)) {
          const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
          gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
          cxt.ok(valid);
        }
        function validateItems(valid) {
          gen.forRange("i", items.length, len, (i) => {
            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
            if (!it.allErrors)
              gen.if((0, codegen_1.not)(valid), () => gen.break());
          });
        }
      }
      exports.validateAdditionalItems = validateAdditionalItems;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/items.js
  var require_items = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/items.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateTuple = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var code_1 = require_code2();
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
          const { schema: schema2, it } = cxt;
          if (Array.isArray(schema2))
            return validateTuple(cxt, "additionalItems", schema2);
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema2))
            return;
          cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      function validateTuple(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
          it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        schArr.forEach((sch, i) => {
          if ((0, util_1.alwaysValidSchema)(it, sch))
            return;
          gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({
            keyword,
            schemaProp: i,
            dataProp: i
          }, valid));
          cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
          const { opts, errSchemaPath } = it;
          const l = schArr.length;
          const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
          if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
          }
        }
      }
      exports.validateTuple = validateTuple;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
  var require_prefixItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/prefixItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var items_1 = require_items();
      var def = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1.validateTuple)(cxt, "items")
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/items2020.js
  var require_items2020 = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/items2020.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var code_1 = require_code2();
      var additionalItems_1 = require_additionalItems();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error,
        code(cxt) {
          const { schema: schema2, parentSchema, it } = cxt;
          const { prefixItems } = parentSchema;
          it.items = true;
          if ((0, util_1.alwaysValidSchema)(it, schema2))
            return;
          if (prefixItems)
            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
          else
            cxt.ok((0, code_1.validateArray)(cxt));
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/contains.js
  var require_contains = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/contains.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
      };
      var def = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, parentSchema, data, it } = cxt;
          let min;
          let max;
          const { minContains, maxContains } = parentSchema;
          if (it.opts.next) {
            min = minContains === void 0 ? 1 : minContains;
            max = maxContains;
          } else {
            min = 1;
          }
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          cxt.setParams({ min, max });
          if (max === void 0 && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
          }
          if (max !== void 0 && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
          }
          if ((0, util_1.alwaysValidSchema)(it, schema2)) {
            let cond = (0, codegen_1._)`${len} >= ${min}`;
            if (max !== void 0)
              cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
          }
          it.items = true;
          const valid = gen.name("valid");
          if (max === void 0 && min === 1) {
            validateItems(valid, () => gen.if(valid, () => gen.break()));
          } else if (min === 0) {
            gen.let(valid, true);
            if (max !== void 0)
              gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
          } else {
            gen.let(valid, false);
            validateItemsWithCount();
          }
          cxt.result(valid, () => cxt.reset());
          function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
          }
          function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i) => {
              cxt.subschema({
                keyword: "contains",
                dataProp: i,
                dataPropType: util_1.Type.Num,
                compositeRule: true
              }, _valid);
              block();
            });
          }
          function checkLimits(count) {
            gen.code((0, codegen_1._)`${count}++`);
            if (max === void 0) {
              gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
            } else {
              gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());
              if (min === 1)
                gen.assign(valid, true);
              else
                gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));
            }
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/dependencies.js
  var require_dependencies = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/dependencies.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var code_1 = require_code2();
      exports.error = {
        message: ({ params: { property, depsCount, deps } }) => {
          const property_ies = depsCount === 1 ? "property" : "properties";
          return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
        },
        params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
      };
      var def = {
        keyword: "dependencies",
        type: "object",
        schemaType: "object",
        error: exports.error,
        code(cxt) {
          const [propDeps, schDeps] = splitDependencies(cxt);
          validatePropertyDeps(cxt, propDeps);
          validateSchemaDeps(cxt, schDeps);
        }
      };
      function splitDependencies({ schema: schema2 }) {
        const propertyDeps = {};
        const schemaDeps = {};
        for (const key in schema2) {
          if (key === "__proto__")
            continue;
          const deps = Array.isArray(schema2[key]) ? propertyDeps : schemaDeps;
          deps[key] = schema2[key];
        }
        return [propertyDeps, schemaDeps];
      }
      function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
        const { gen, data, it } = cxt;
        if (Object.keys(propertyDeps).length === 0)
          return;
        const missing = gen.let("missing");
        for (const prop in propertyDeps) {
          const deps = propertyDeps[prop];
          if (deps.length === 0)
            continue;
          const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
          cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", ")
          });
          if (it.allErrors) {
            gen.if(hasProperty, () => {
              for (const depProp of deps) {
                (0, code_1.checkReportMissingProp)(cxt, depProp);
              }
            });
          } else {
            gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
      }
      exports.validatePropertyDeps = validatePropertyDeps;
      function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        for (const prop in schemaDeps) {
          if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
            continue;
          gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
          }, () => gen.var(valid, true));
          cxt.ok(valid);
        }
      }
      exports.validateSchemaDeps = validateSchemaDeps;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
  var require_propertyNames = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/propertyNames.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
      };
      var def = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error,
        code(cxt) {
          const { gen, schema: schema2, data, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema2))
            return;
          const valid = gen.name("valid");
          gen.forIn("key", data, (key) => {
            cxt.setParams({ propertyName: key });
            cxt.subschema({
              keyword: "propertyNames",
              data: key,
              dataTypes: ["string"],
              propertyName: key,
              compositeRule: true
            }, valid);
            gen.if((0, codegen_1.not)(valid), () => {
              cxt.error(true);
              if (!it.allErrors)
                gen.break();
            });
          });
          cxt.ok(valid);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
  var require_additionalProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var util_1 = require_util();
      var error = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
      };
      var def = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, parentSchema, data, errsCount, it } = cxt;
          if (!errsCount)
            throw new Error("ajv implementation error");
          const { allErrors, opts } = it;
          it.props = true;
          if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema2))
            return;
          const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
          const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
          checkAdditionalProperties();
          cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
          function checkAdditionalProperties() {
            gen.forIn("key", data, (key) => {
              if (!props.length && !patProps.length)
                additionalPropertyCode(key);
              else
                gen.if(isAdditional(key), () => additionalPropertyCode(key));
            });
          }
          function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
              const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
              definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            } else if (props.length) {
              definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._)`${key} === ${p}`));
            } else {
              definedProp = codegen_1.nil;
            }
            if (patProps.length) {
              definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
            }
            return (0, codegen_1.not)(definedProp);
          }
          function deleteAdditional(key) {
            gen.code((0, codegen_1._)`delete ${data}[${key}]`);
          }
          function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || opts.removeAdditional && schema2 === false) {
              deleteAdditional(key);
              return;
            }
            if (schema2 === false) {
              cxt.setParams({ additionalProperty: key });
              cxt.error();
              if (!allErrors)
                gen.break();
              return;
            }
            if (typeof schema2 == "object" && !(0, util_1.alwaysValidSchema)(it, schema2)) {
              const valid = gen.name("valid");
              if (opts.removeAdditional === "failing") {
                applyAdditionalSchema(key, valid, false);
                gen.if((0, codegen_1.not)(valid), () => {
                  cxt.reset();
                  deleteAdditional(key);
                });
              } else {
                applyAdditionalSchema(key, valid);
                if (!allErrors)
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
              }
            }
          }
          function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
              keyword: "additionalProperties",
              dataProp: key,
              dataPropType: util_1.Type.Str
            };
            if (errors === false) {
              Object.assign(subschema, {
                compositeRule: true,
                createErrors: false,
                allErrors: false
              });
            }
            cxt.subschema(subschema, valid);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/properties.js
  var require_properties = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/properties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var validate_1 = require_validate();
      var code_1 = require_code2();
      var util_1 = require_util();
      var additionalProperties_1 = require_additionalProperties();
      var def = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema: schema2, parentSchema, data, it } = cxt;
          if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
          }
          const allProps = (0, code_1.allSchemaProperties)(schema2);
          for (const prop of allProps) {
            it.definedProperties.add(prop);
          }
          if (it.opts.unevaluated && allProps.length && it.props !== true) {
            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
          }
          const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema2[p]));
          if (properties.length === 0)
            return;
          const valid = gen.name("valid");
          for (const prop of properties) {
            if (hasDefault(prop)) {
              applyPropertySchema(prop);
            } else {
              gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
              applyPropertySchema(prop);
              if (!it.allErrors)
                gen.else().var(valid, true);
              gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
          }
          function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema2[prop].default !== void 0;
          }
          function applyPropertySchema(prop) {
            cxt.subschema({
              keyword: "properties",
              schemaProp: prop,
              dataProp: prop
            }, valid);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
  var require_patternProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/patternProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var util_2 = require_util();
      var def = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
          const { gen, schema: schema2, data, parentSchema, it } = cxt;
          const { opts } = it;
          const patterns = (0, code_1.allSchemaProperties)(schema2);
          const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema2[p]));
          if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
            return;
          }
          const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
          const valid = gen.name("valid");
          if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
          }
          const { props } = it;
          validatePatternProperties();
          function validatePatternProperties() {
            for (const pat of patterns) {
              if (checkProperties)
                checkMatchingProperties(pat);
              if (it.allErrors) {
                validateProperties(pat);
              } else {
                gen.var(valid, true);
                validateProperties(pat);
                gen.if(valid);
              }
            }
          }
          function checkMatchingProperties(pat) {
            for (const prop in checkProperties) {
              if (new RegExp(pat).test(prop)) {
                (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
              }
            }
          }
          function validateProperties(pat) {
            gen.forIn("key", data, (key) => {
              gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
                const alwaysValid = alwaysValidPatterns.includes(pat);
                if (!alwaysValid) {
                  cxt.subschema({
                    keyword: "patternProperties",
                    schemaProp: pat,
                    dataProp: key,
                    dataPropType: util_2.Type.Str
                  }, valid);
                }
                if (it.opts.unevaluated && props !== true) {
                  gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                } else if (!alwaysValid && !it.allErrors) {
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
                }
              });
            });
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/not.js
  var require_not = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/not.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
          const { gen, schema: schema2, it } = cxt;
          if ((0, util_1.alwaysValidSchema)(it, schema2)) {
            cxt.fail();
            return;
          }
          const valid = gen.name("valid");
          cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false
          }, valid);
          cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/anyOf.js
  var require_anyOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/anyOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var code_1 = require_code2();
      var def = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1.validateUnion,
        error: { message: "must match a schema in anyOf" }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/oneOf.js
  var require_oneOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/oneOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
      };
      var def = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, parentSchema, it } = cxt;
          if (!Array.isArray(schema2))
            throw new Error("ajv implementation error");
          if (it.opts.discriminator && parentSchema.discriminator)
            return;
          const schArr = schema2;
          const valid = gen.let("valid", false);
          const passing = gen.let("passing", null);
          const schValid = gen.name("_valid");
          cxt.setParams({ passing });
          gen.block(validateOneOf);
          cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
          function validateOneOf() {
            schArr.forEach((sch, i) => {
              let schCxt;
              if ((0, util_1.alwaysValidSchema)(it, sch)) {
                gen.var(schValid, true);
              } else {
                schCxt = cxt.subschema({
                  keyword: "oneOf",
                  schemaProp: i,
                  compositeRule: true
                }, schValid);
              }
              if (i > 0) {
                gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
              }
              gen.if(schValid, () => {
                gen.assign(valid, true);
                gen.assign(passing, i);
                if (schCxt)
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
              });
            });
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/allOf.js
  var require_allOf = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/allOf.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
          const { gen, schema: schema2, it } = cxt;
          if (!Array.isArray(schema2))
            throw new Error("ajv implementation error");
          const valid = gen.name("valid");
          schema2.forEach((sch, i) => {
            if ((0, util_1.alwaysValidSchema)(it, sch))
              return;
            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
          });
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/if.js
  var require_if = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/if.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
      };
      var def = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, parentSchema, it } = cxt;
          if (parentSchema.then === void 0 && parentSchema.else === void 0) {
            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
          }
          const hasThen = hasSchema(it, "then");
          const hasElse = hasSchema(it, "else");
          if (!hasThen && !hasElse)
            return;
          const valid = gen.let("valid", true);
          const schValid = gen.name("_valid");
          validateIf();
          cxt.reset();
          if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({ ifClause });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
          } else if (hasThen) {
            gen.if(schValid, validateClause("then"));
          } else {
            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
          }
          cxt.pass(valid, () => cxt.error(true));
          function validateIf() {
            const schCxt = cxt.subschema({
              keyword: "if",
              compositeRule: true,
              createErrors: false,
              allErrors: false
            }, schValid);
            cxt.mergeEvaluated(schCxt);
          }
          function validateClause(keyword, ifClause) {
            return () => {
              const schCxt = cxt.subschema({ keyword }, schValid);
              gen.assign(valid, schValid);
              cxt.mergeValidEvaluated(schCxt, valid);
              if (ifClause)
                gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
              else
                cxt.setParams({ ifClause: keyword });
            };
          }
        }
      };
      function hasSchema(it, keyword) {
        const schema2 = it.schema[keyword];
        return schema2 !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema2);
      }
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/thenElse.js
  var require_thenElse = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/thenElse.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
          if (parentSchema.if === void 0)
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/index.js
  var require_applicator = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var additionalItems_1 = require_additionalItems();
      var prefixItems_1 = require_prefixItems();
      var items_1 = require_items();
      var items2020_1 = require_items2020();
      var contains_1 = require_contains();
      var dependencies_1 = require_dependencies();
      var propertyNames_1 = require_propertyNames();
      var additionalProperties_1 = require_additionalProperties();
      var properties_1 = require_properties();
      var patternProperties_1 = require_patternProperties();
      var not_1 = require_not();
      var anyOf_1 = require_anyOf();
      var oneOf_1 = require_oneOf();
      var allOf_1 = require_allOf();
      var if_1 = require_if();
      var thenElse_1 = require_thenElse();
      function getApplicator(draft2020 = false) {
        const applicator = [
          not_1.default,
          anyOf_1.default,
          oneOf_1.default,
          allOf_1.default,
          if_1.default,
          thenElse_1.default,
          propertyNames_1.default,
          additionalProperties_1.default,
          dependencies_1.default,
          properties_1.default,
          patternProperties_1.default
        ];
        if (draft2020)
          applicator.push(prefixItems_1.default, items2020_1.default);
        else
          applicator.push(additionalItems_1.default, items_1.default);
        applicator.push(contains_1.default);
        return applicator;
      }
      exports.default = getApplicator;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/dynamicAnchor.js
  var require_dynamicAnchor = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/dynamicAnchor.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.dynamicAnchor = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var compile_1 = require_compile();
      var ref_1 = require_ref();
      var def = {
        keyword: "$dynamicAnchor",
        schemaType: "string",
        code: (cxt) => dynamicAnchor(cxt, cxt.schema)
      };
      function dynamicAnchor(cxt, anchor) {
        const { gen, it } = cxt;
        it.schemaEnv.root.dynamicAnchors[anchor] = true;
        const v = (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`;
        const validate = it.errSchemaPath === "#" ? it.validateName : _getValidate(cxt);
        gen.if((0, codegen_1._)`!${v}`, () => gen.assign(v, validate));
      }
      exports.dynamicAnchor = dynamicAnchor;
      function _getValidate(cxt) {
        const { schemaEnv, schema: schema2, self: self2 } = cxt.it;
        const { root, baseId, localRefs, meta } = schemaEnv.root;
        const { schemaId } = self2.opts;
        const sch = new compile_1.SchemaEnv({ schema: schema2, schemaId, root, baseId, localRefs, meta });
        compile_1.compileSchema.call(self2, sch);
        return (0, ref_1.getValidate)(cxt, sch);
      }
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/dynamicRef.js
  var require_dynamicRef = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/dynamicRef.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.dynamicRef = void 0;
      var codegen_1 = require_codegen();
      var names_1 = require_names();
      var ref_1 = require_ref();
      var def = {
        keyword: "$dynamicRef",
        schemaType: "string",
        code: (cxt) => dynamicRef(cxt, cxt.schema)
      };
      function dynamicRef(cxt, ref) {
        const { gen, keyword, it } = cxt;
        if (ref[0] !== "#")
          throw new Error(`"${keyword}" only supports hash fragment reference`);
        const anchor = ref.slice(1);
        if (it.allErrors) {
          _dynamicRef();
        } else {
          const valid = gen.let("valid", false);
          _dynamicRef(valid);
          cxt.ok(valid);
        }
        function _dynamicRef(valid) {
          if (it.schemaEnv.root.dynamicAnchors[anchor]) {
            const v = gen.let("_v", (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`);
            gen.if(v, _callRef(v, valid), _callRef(it.validateName, valid));
          } else {
            _callRef(it.validateName, valid)();
          }
        }
        function _callRef(validate, valid) {
          return valid ? () => gen.block(() => {
            (0, ref_1.callRef)(cxt, validate);
            gen.let(valid, true);
          }) : () => (0, ref_1.callRef)(cxt, validate);
        }
      }
      exports.dynamicRef = dynamicRef;
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/recursiveAnchor.js
  var require_recursiveAnchor = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/recursiveAnchor.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicAnchor_1 = require_dynamicAnchor();
      var util_1 = require_util();
      var def = {
        keyword: "$recursiveAnchor",
        schemaType: "boolean",
        code(cxt) {
          if (cxt.schema)
            (0, dynamicAnchor_1.dynamicAnchor)(cxt, "");
          else
            (0, util_1.checkStrictMode)(cxt.it, "$recursiveAnchor: false is ignored");
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/recursiveRef.js
  var require_recursiveRef = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/recursiveRef.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicRef_1 = require_dynamicRef();
      var def = {
        keyword: "$recursiveRef",
        schemaType: "string",
        code: (cxt) => (0, dynamicRef_1.dynamicRef)(cxt, cxt.schema)
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/dynamic/index.js
  var require_dynamic = __commonJS({
    "node_modules/ajv/dist/vocabularies/dynamic/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicAnchor_1 = require_dynamicAnchor();
      var dynamicRef_1 = require_dynamicRef();
      var recursiveAnchor_1 = require_recursiveAnchor();
      var recursiveRef_1 = require_recursiveRef();
      var dynamic = [dynamicAnchor_1.default, dynamicRef_1.default, recursiveAnchor_1.default, recursiveRef_1.default];
      exports.default = dynamic;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/dependentRequired.js
  var require_dependentRequired = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/dependentRequired.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dependencies_1 = require_dependencies();
      var def = {
        keyword: "dependentRequired",
        type: "object",
        schemaType: "object",
        error: dependencies_1.error,
        code: (cxt) => (0, dependencies_1.validatePropertyDeps)(cxt)
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/applicator/dependentSchemas.js
  var require_dependentSchemas = __commonJS({
    "node_modules/ajv/dist/vocabularies/applicator/dependentSchemas.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dependencies_1 = require_dependencies();
      var def = {
        keyword: "dependentSchemas",
        type: "object",
        schemaType: "object",
        code: (cxt) => (0, dependencies_1.validateSchemaDeps)(cxt)
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/validation/limitContains.js
  var require_limitContains = __commonJS({
    "node_modules/ajv/dist/vocabularies/validation/limitContains.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var util_1 = require_util();
      var def = {
        keyword: ["maxContains", "minContains"],
        type: "array",
        schemaType: "number",
        code({ keyword, parentSchema, it }) {
          if (parentSchema.contains === void 0) {
            (0, util_1.checkStrictMode)(it, `"${keyword}" without "contains" is ignored`);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/next.js
  var require_next = __commonJS({
    "node_modules/ajv/dist/vocabularies/next.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var dependentRequired_1 = require_dependentRequired();
      var dependentSchemas_1 = require_dependentSchemas();
      var limitContains_1 = require_limitContains();
      var next = [dependentRequired_1.default, dependentSchemas_1.default, limitContains_1.default];
      exports.default = next;
    }
  });

  // node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedProperties.js
  var require_unevaluatedProperties = __commonJS({
    "node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedProperties.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var names_1 = require_names();
      var error = {
        message: "must NOT have unevaluated properties",
        params: ({ params }) => (0, codegen_1._)`{unevaluatedProperty: ${params.unevaluatedProperty}}`
      };
      var def = {
        keyword: "unevaluatedProperties",
        type: "object",
        schemaType: ["boolean", "object"],
        trackErrors: true,
        error,
        code(cxt) {
          const { gen, schema: schema2, data, errsCount, it } = cxt;
          if (!errsCount)
            throw new Error("ajv implementation error");
          const { allErrors, props } = it;
          if (props instanceof codegen_1.Name) {
            gen.if((0, codegen_1._)`${props} !== true`, () => gen.forIn("key", data, (key) => gen.if(unevaluatedDynamic(props, key), () => unevaluatedPropCode(key))));
          } else if (props !== true) {
            gen.forIn("key", data, (key) => props === void 0 ? unevaluatedPropCode(key) : gen.if(unevaluatedStatic(props, key), () => unevaluatedPropCode(key)));
          }
          it.props = true;
          cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
          function unevaluatedPropCode(key) {
            if (schema2 === false) {
              cxt.setParams({ unevaluatedProperty: key });
              cxt.error();
              if (!allErrors)
                gen.break();
              return;
            }
            if (!(0, util_1.alwaysValidSchema)(it, schema2)) {
              const valid = gen.name("valid");
              cxt.subschema({
                keyword: "unevaluatedProperties",
                dataProp: key,
                dataPropType: util_1.Type.Str
              }, valid);
              if (!allErrors)
                gen.if((0, codegen_1.not)(valid), () => gen.break());
            }
          }
          function unevaluatedDynamic(evaluatedProps, key) {
            return (0, codegen_1._)`!${evaluatedProps} || !${evaluatedProps}[${key}]`;
          }
          function unevaluatedStatic(evaluatedProps, key) {
            const ps = [];
            for (const p in evaluatedProps) {
              if (evaluatedProps[p] === true)
                ps.push((0, codegen_1._)`${key} !== ${p}`);
            }
            return (0, codegen_1.and)(...ps);
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedItems.js
  var require_unevaluatedItems = __commonJS({
    "node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedItems.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var util_1 = require_util();
      var error = {
        message: ({ params: { len } }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`
      };
      var def = {
        keyword: "unevaluatedItems",
        type: "array",
        schemaType: ["boolean", "object"],
        error,
        code(cxt) {
          const { gen, schema: schema2, data, it } = cxt;
          const items = it.items || 0;
          if (items === true)
            return;
          const len = gen.const("len", (0, codegen_1._)`${data}.length`);
          if (schema2 === false) {
            cxt.setParams({ len: items });
            cxt.fail((0, codegen_1._)`${len} > ${items}`);
          } else if (typeof schema2 == "object" && !(0, util_1.alwaysValidSchema)(it, schema2)) {
            const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items}`);
            gen.if((0, codegen_1.not)(valid), () => validateItems(valid, items));
            cxt.ok(valid);
          }
          it.items = true;
          function validateItems(valid, from) {
            gen.forRange("i", from, len, (i) => {
              cxt.subschema({ keyword: "unevaluatedItems", dataProp: i, dataPropType: util_1.Type.Num }, valid);
              if (!it.allErrors)
                gen.if((0, codegen_1.not)(valid), () => gen.break());
            });
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/unevaluated/index.js
  var require_unevaluated = __commonJS({
    "node_modules/ajv/dist/vocabularies/unevaluated/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var unevaluatedProperties_1 = require_unevaluatedProperties();
      var unevaluatedItems_1 = require_unevaluatedItems();
      var unevaluated = [unevaluatedProperties_1.default, unevaluatedItems_1.default];
      exports.default = unevaluated;
    }
  });

  // node_modules/ajv/dist/vocabularies/format/format.js
  var require_format = __commonJS({
    "node_modules/ajv/dist/vocabularies/format/format.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var error = {
        message: ({ schemaCode }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`
      };
      var def = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error,
        code(cxt, ruleType) {
          const { gen, data, $data, schema: schema2, schemaCode, it } = cxt;
          const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
          if (!opts.validateFormats)
            return;
          if ($data)
            validate$DataFormat();
          else
            validateFormat();
          function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
              ref: self2.formats,
              code: opts.code.formats
            });
            const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
              if (opts.strictSchema === false)
                return codegen_1.nil;
              return (0, codegen_1._)`${schemaCode} && !${format}`;
            }
            function invalidFmt() {
              const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
              const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
              return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
          }
          function validateFormat() {
            const formatDef = self2.formats[schema2];
            if (!formatDef) {
              unknownFormat();
              return;
            }
            if (formatDef === true)
              return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType)
              cxt.pass(validCondition());
            function unknownFormat() {
              if (opts.strictSchema === false) {
                self2.logger.warn(unknownMsg());
                return;
              }
              throw new Error(unknownMsg());
              function unknownMsg() {
                return `unknown format "${schema2}" ignored in schema at path "${errSchemaPath}"`;
              }
            }
            function getFormat(fmtDef) {
              const code2 = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema2)}` : void 0;
              const fmt = gen.scopeValue("formats", { key: schema2, ref: fmtDef, code: code2 });
              if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
              }
              return ["string", fmtDef, fmt];
            }
            function validCondition() {
              if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                if (!schemaEnv.$async)
                  throw new Error("async format in sync schema");
                return (0, codegen_1._)`await ${fmtRef}(${data})`;
              }
              return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
            }
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/vocabularies/format/index.js
  var require_format2 = __commonJS({
    "node_modules/ajv/dist/vocabularies/format/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var format_1 = require_format();
      var format = [format_1.default];
      exports.default = format;
    }
  });

  // node_modules/ajv/dist/vocabularies/metadata.js
  var require_metadata = __commonJS({
    "node_modules/ajv/dist/vocabularies/metadata.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.contentVocabulary = exports.metadataVocabulary = void 0;
      exports.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples"
      ];
      exports.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema"
      ];
    }
  });

  // node_modules/ajv/dist/vocabularies/draft2020.js
  var require_draft2020 = __commonJS({
    "node_modules/ajv/dist/vocabularies/draft2020.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var core_1 = require_core2();
      var validation_1 = require_validation();
      var applicator_1 = require_applicator();
      var dynamic_1 = require_dynamic();
      var next_1 = require_next();
      var unevaluated_1 = require_unevaluated();
      var format_1 = require_format2();
      var metadata_1 = require_metadata();
      var draft2020Vocabularies = [
        dynamic_1.default,
        core_1.default,
        validation_1.default,
        (0, applicator_1.default)(true),
        format_1.default,
        metadata_1.metadataVocabulary,
        metadata_1.contentVocabulary,
        next_1.default,
        unevaluated_1.default
      ];
      exports.default = draft2020Vocabularies;
    }
  });

  // node_modules/ajv/dist/vocabularies/discriminator/types.js
  var require_types = __commonJS({
    "node_modules/ajv/dist/vocabularies/discriminator/types.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DiscrError = void 0;
      var DiscrError;
      (function(DiscrError2) {
        DiscrError2["Tag"] = "tag";
        DiscrError2["Mapping"] = "mapping";
      })(DiscrError = exports.DiscrError || (exports.DiscrError = {}));
    }
  });

  // node_modules/ajv/dist/vocabularies/discriminator/index.js
  var require_discriminator = __commonJS({
    "node_modules/ajv/dist/vocabularies/discriminator/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var types_1 = require_types();
      var compile_1 = require_compile();
      var util_1 = require_util();
      var error = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
      };
      var def = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error,
        code(cxt) {
          const { gen, data, schema: schema2, parentSchema, it } = cxt;
          const { oneOf } = parentSchema;
          if (!it.opts.discriminator) {
            throw new Error("discriminator: requires discriminator option");
          }
          const tagName = schema2.propertyName;
          if (typeof tagName != "string")
            throw new Error("discriminator: requires propertyName");
          if (schema2.mapping)
            throw new Error("discriminator: mapping is not supported");
          if (!oneOf)
            throw new Error("discriminator: requires oneOf keyword");
          const valid = gen.let("valid", false);
          const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
          gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
          cxt.ok(valid);
          function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for (const tagValue in mapping) {
              gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
              gen.assign(valid, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
            gen.endIf();
          }
          function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
          }
          function getMapping() {
            var _a;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for (let i = 0; i < oneOf.length; i++) {
              let sch = oneOf[i];
              if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                if (sch instanceof compile_1.SchemaEnv)
                  sch = sch.schema;
              }
              const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
              if (typeof propSch != "object") {
                throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
              }
              tagRequired = tagRequired && (topRequired || hasRequired(sch));
              addMappings(propSch, i);
            }
            if (!tagRequired)
              throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
              return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i) {
              if (sch.const) {
                addMapping(sch.const, i);
              } else if (sch.enum) {
                for (const tagValue of sch.enum) {
                  addMapping(tagValue, i);
                }
              } else {
                throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
              }
            }
            function addMapping(tagValue, i) {
              if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                throw new Error(`discriminator: "${tagName}" values must be unique strings`);
              }
              oneOfMapping[tagValue] = i;
            }
          }
        }
      };
      exports.default = def;
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/schema.json
  var require_schema = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/schema.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/schema",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/core": true,
          "https://json-schema.org/draft/2020-12/vocab/applicator": true,
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
          "https://json-schema.org/draft/2020-12/vocab/validation": true,
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        $dynamicAnchor: "meta",
        title: "Core and Validation specifications meta-schema",
        allOf: [
          { $ref: "meta/core" },
          { $ref: "meta/applicator" },
          { $ref: "meta/unevaluated" },
          { $ref: "meta/validation" },
          { $ref: "meta/meta-data" },
          { $ref: "meta/format-annotation" },
          { $ref: "meta/content" }
        ],
        type: ["object", "boolean"],
        $comment: "This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.",
        properties: {
          definitions: {
            $comment: '"definitions" has been replaced by "$defs".',
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            deprecated: true,
            default: {}
          },
          dependencies: {
            $comment: '"dependencies" has been split and replaced by "dependentSchemas" and "dependentRequired" in order to serve their differing semantics.',
            type: "object",
            additionalProperties: {
              anyOf: [{ $dynamicRef: "#meta" }, { $ref: "meta/validation#/$defs/stringArray" }]
            },
            deprecated: true,
            default: {}
          },
          $recursiveAnchor: {
            $comment: '"$recursiveAnchor" has been replaced by "$dynamicAnchor".',
            $ref: "meta/core#/$defs/anchorString",
            deprecated: true
          },
          $recursiveRef: {
            $comment: '"$recursiveRef" has been replaced by "$dynamicRef".',
            $ref: "meta/core#/$defs/uriReferenceString",
            deprecated: true
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json
  var require_applicator2 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/applicator",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/applicator": true
        },
        $dynamicAnchor: "meta",
        title: "Applicator vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          prefixItems: { $ref: "#/$defs/schemaArray" },
          items: { $dynamicRef: "#meta" },
          contains: { $dynamicRef: "#meta" },
          additionalProperties: { $dynamicRef: "#meta" },
          properties: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            default: {}
          },
          patternProperties: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            propertyNames: { format: "regex" },
            default: {}
          },
          dependentSchemas: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" },
            default: {}
          },
          propertyNames: { $dynamicRef: "#meta" },
          if: { $dynamicRef: "#meta" },
          then: { $dynamicRef: "#meta" },
          else: { $dynamicRef: "#meta" },
          allOf: { $ref: "#/$defs/schemaArray" },
          anyOf: { $ref: "#/$defs/schemaArray" },
          oneOf: { $ref: "#/$defs/schemaArray" },
          not: { $dynamicRef: "#meta" }
        },
        $defs: {
          schemaArray: {
            type: "array",
            minItems: 1,
            items: { $dynamicRef: "#meta" }
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json
  var require_unevaluated2 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/unevaluated",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true
        },
        $dynamicAnchor: "meta",
        title: "Unevaluated applicator vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          unevaluatedItems: { $dynamicRef: "#meta" },
          unevaluatedProperties: { $dynamicRef: "#meta" }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json
  var require_content = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/content",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        $dynamicAnchor: "meta",
        title: "Content vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          contentEncoding: { type: "string" },
          contentMediaType: { type: "string" },
          contentSchema: { $dynamicRef: "#meta" }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json
  var require_core3 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/core",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/core": true
        },
        $dynamicAnchor: "meta",
        title: "Core vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          $id: {
            $ref: "#/$defs/uriReferenceString",
            $comment: "Non-empty fragments not allowed.",
            pattern: "^[^#]*#?$"
          },
          $schema: { $ref: "#/$defs/uriString" },
          $ref: { $ref: "#/$defs/uriReferenceString" },
          $anchor: { $ref: "#/$defs/anchorString" },
          $dynamicRef: { $ref: "#/$defs/uriReferenceString" },
          $dynamicAnchor: { $ref: "#/$defs/anchorString" },
          $vocabulary: {
            type: "object",
            propertyNames: { $ref: "#/$defs/uriString" },
            additionalProperties: {
              type: "boolean"
            }
          },
          $comment: {
            type: "string"
          },
          $defs: {
            type: "object",
            additionalProperties: { $dynamicRef: "#meta" }
          }
        },
        $defs: {
          anchorString: {
            type: "string",
            pattern: "^[A-Za-z_][-A-Za-z0-9._]*$"
          },
          uriString: {
            type: "string",
            format: "uri"
          },
          uriReferenceString: {
            type: "string",
            format: "uri-reference"
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json
  var require_format_annotation = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/format-annotation",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true
        },
        $dynamicAnchor: "meta",
        title: "Format vocabulary meta-schema for annotation results",
        type: ["object", "boolean"],
        properties: {
          format: { type: "string" }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json
  var require_meta_data = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/meta-data",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true
        },
        $dynamicAnchor: "meta",
        title: "Meta-data vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          title: {
            type: "string"
          },
          description: {
            type: "string"
          },
          default: true,
          deprecated: {
            type: "boolean",
            default: false
          },
          readOnly: {
            type: "boolean",
            default: false
          },
          writeOnly: {
            type: "boolean",
            default: false
          },
          examples: {
            type: "array",
            items: true
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json
  var require_validation2 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json"(exports, module) {
      module.exports = {
        $schema: "https://json-schema.org/draft/2020-12/schema",
        $id: "https://json-schema.org/draft/2020-12/meta/validation",
        $vocabulary: {
          "https://json-schema.org/draft/2020-12/vocab/validation": true
        },
        $dynamicAnchor: "meta",
        title: "Validation vocabulary meta-schema",
        type: ["object", "boolean"],
        properties: {
          type: {
            anyOf: [
              { $ref: "#/$defs/simpleTypes" },
              {
                type: "array",
                items: { $ref: "#/$defs/simpleTypes" },
                minItems: 1,
                uniqueItems: true
              }
            ]
          },
          const: true,
          enum: {
            type: "array",
            items: true
          },
          multipleOf: {
            type: "number",
            exclusiveMinimum: 0
          },
          maximum: {
            type: "number"
          },
          exclusiveMaximum: {
            type: "number"
          },
          minimum: {
            type: "number"
          },
          exclusiveMinimum: {
            type: "number"
          },
          maxLength: { $ref: "#/$defs/nonNegativeInteger" },
          minLength: { $ref: "#/$defs/nonNegativeIntegerDefault0" },
          pattern: {
            type: "string",
            format: "regex"
          },
          maxItems: { $ref: "#/$defs/nonNegativeInteger" },
          minItems: { $ref: "#/$defs/nonNegativeIntegerDefault0" },
          uniqueItems: {
            type: "boolean",
            default: false
          },
          maxContains: { $ref: "#/$defs/nonNegativeInteger" },
          minContains: {
            $ref: "#/$defs/nonNegativeInteger",
            default: 1
          },
          maxProperties: { $ref: "#/$defs/nonNegativeInteger" },
          minProperties: { $ref: "#/$defs/nonNegativeIntegerDefault0" },
          required: { $ref: "#/$defs/stringArray" },
          dependentRequired: {
            type: "object",
            additionalProperties: {
              $ref: "#/$defs/stringArray"
            }
          }
        },
        $defs: {
          nonNegativeInteger: {
            type: "integer",
            minimum: 0
          },
          nonNegativeIntegerDefault0: {
            $ref: "#/$defs/nonNegativeInteger",
            default: 0
          },
          simpleTypes: {
            enum: ["array", "boolean", "integer", "null", "number", "object", "string"]
          },
          stringArray: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true,
            default: []
          }
        }
      };
    }
  });

  // node_modules/ajv/dist/refs/json-schema-2020-12/index.js
  var require_json_schema_2020_12 = __commonJS({
    "node_modules/ajv/dist/refs/json-schema-2020-12/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var metaSchema = require_schema();
      var applicator = require_applicator2();
      var unevaluated = require_unevaluated2();
      var content = require_content();
      var core = require_core3();
      var format = require_format_annotation();
      var metadata = require_meta_data();
      var validation = require_validation2();
      var META_SUPPORT_DATA = ["/properties"];
      function addMetaSchema2020($data) {
        ;
        [
          metaSchema,
          applicator,
          unevaluated,
          content,
          core,
          with$data(this, format),
          metadata,
          with$data(this, validation)
        ].forEach((sch) => this.addMetaSchema(sch, void 0, false));
        return this;
        function with$data(ajv, sch) {
          return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;
        }
      }
      exports.default = addMetaSchema2020;
    }
  });

  // node_modules/ajv/dist/2020.js
  var require__ = __commonJS({
    "node_modules/ajv/dist/2020.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
      var core_1 = require_core();
      var draft2020_1 = require_draft2020();
      var discriminator_1 = require_discriminator();
      var json_schema_2020_12_1 = require_json_schema_2020_12();
      var META_SCHEMA_ID = "https://json-schema.org/draft/2020-12/schema";
      var Ajv2020 = class extends core_1.default {
        constructor(opts = {}) {
          super({
            ...opts,
            dynamicRef: true,
            next: true,
            unevaluated: true
          });
        }
        _addVocabularies() {
          super._addVocabularies();
          draft2020_1.default.forEach((v) => this.addVocabulary(v));
          if (this.opts.discriminator)
            this.addKeyword(discriminator_1.default);
        }
        _addDefaultMetaSchema() {
          super._addDefaultMetaSchema();
          const { $data, meta } = this.opts;
          if (!meta)
            return;
          json_schema_2020_12_1.default.call(this, $data);
          this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
        }
        defaultMeta() {
          return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
        }
      };
      module.exports = exports = Ajv2020;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = Ajv2020;
      var validate_1 = require_validate();
      Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function() {
        return validate_1.KeywordCxt;
      } });
      var codegen_1 = require_codegen();
      Object.defineProperty(exports, "_", { enumerable: true, get: function() {
        return codegen_1._;
      } });
      Object.defineProperty(exports, "str", { enumerable: true, get: function() {
        return codegen_1.str;
      } });
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return codegen_1.stringify;
      } });
      Object.defineProperty(exports, "nil", { enumerable: true, get: function() {
        return codegen_1.nil;
      } });
      Object.defineProperty(exports, "Name", { enumerable: true, get: function() {
        return codegen_1.Name;
      } });
      Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function() {
        return codegen_1.CodeGen;
      } });
    }
  });

  // node_modules/ajv-keywords/dist/definitions/typeof.js
  var require_typeof = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/typeof.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var TYPES = ["undefined", "string", "number", "object", "function", "boolean", "symbol"];
      function getDef() {
        return {
          keyword: "typeof",
          schemaType: ["string", "array"],
          code(cxt) {
            const { data, schema: schema2, schemaValue } = cxt;
            cxt.fail(typeof schema2 == "string" ? (0, codegen_1._)`typeof ${data} != ${schema2}` : (0, codegen_1._)`${schemaValue}.indexOf(typeof ${data}) < 0`);
          },
          metaSchema: {
            anyOf: [
              { type: "string", enum: TYPES },
              { type: "array", items: { type: "string", enum: TYPES } }
            ]
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/typeof.js
  var require_typeof2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/typeof.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeof_1 = __importDefault(require_typeof());
      var typeofPlugin = (ajv) => ajv.addKeyword((0, typeof_1.default)());
      exports.default = typeofPlugin;
      module.exports = typeofPlugin;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/instanceof.js
  var require_instanceof = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/instanceof.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var CONSTRUCTORS = {
        Object,
        Array,
        Function,
        Number,
        String,
        Date,
        RegExp
      };
      if (typeof Buffer != "undefined")
        CONSTRUCTORS.Buffer = Buffer;
      if (typeof Promise != "undefined")
        CONSTRUCTORS.Promise = Promise;
      var getDef = Object.assign(_getDef, { CONSTRUCTORS });
      function _getDef() {
        return {
          keyword: "instanceof",
          schemaType: ["string", "array"],
          compile(schema2) {
            if (typeof schema2 == "string") {
              const C = getConstructor(schema2);
              return (data) => data instanceof C;
            }
            if (Array.isArray(schema2)) {
              const constructors = schema2.map(getConstructor);
              return (data) => {
                for (const C of constructors) {
                  if (data instanceof C)
                    return true;
                }
                return false;
              };
            }
            throw new Error("ajv implementation error");
          },
          metaSchema: {
            anyOf: [{ type: "string" }, { type: "array", items: { type: "string" } }]
          }
        };
      }
      function getConstructor(c) {
        const C = CONSTRUCTORS[c];
        if (C)
          return C;
        throw new Error(`invalid "instanceof" keyword value ${c}`);
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/instanceof.js
  var require_instanceof2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/instanceof.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var instanceof_1 = __importDefault(require_instanceof());
      var instanceofPlugin = (ajv) => ajv.addKeyword((0, instanceof_1.default)());
      exports.default = instanceofPlugin;
      module.exports = instanceofPlugin;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/_range.js
  var require_range = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/_range.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getRangeDef(keyword) {
        return () => ({
          keyword,
          type: "number",
          schemaType: "array",
          macro: function([min, max]) {
            validateRangeSchema(min, max);
            return keyword === "range" ? { minimum: min, maximum: max } : { exclusiveMinimum: min, exclusiveMaximum: max };
          },
          metaSchema: {
            type: "array",
            minItems: 2,
            maxItems: 2,
            items: { type: "number" }
          }
        });
        function validateRangeSchema(min, max) {
          if (min > max || keyword === "exclusiveRange" && min === max) {
            throw new Error("There are no numbers in range");
          }
        }
      }
      exports.default = getRangeDef;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/range.js
  var require_range2 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/range.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _range_1 = __importDefault(require_range());
      var getDef = (0, _range_1.default)("range");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/range.js
  var require_range3 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/range.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var range_1 = __importDefault(require_range2());
      var range = (ajv) => ajv.addKeyword((0, range_1.default)());
      exports.default = range;
      module.exports = range;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/exclusiveRange.js
  var require_exclusiveRange = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/exclusiveRange.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _range_1 = __importDefault(require_range());
      var getDef = (0, _range_1.default)("exclusiveRange");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/exclusiveRange.js
  var require_exclusiveRange2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/exclusiveRange.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var exclusiveRange_1 = __importDefault(require_exclusiveRange());
      var exclusiveRange = (ajv) => ajv.addKeyword((0, exclusiveRange_1.default)());
      exports.default = exclusiveRange;
      module.exports = exclusiveRange;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/_util.js
  var require_util2 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/_util.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.usePattern = exports.metaSchemaRef = void 0;
      var codegen_1 = require_codegen();
      var META_SCHEMA_ID = "http://json-schema.org/schema";
      function metaSchemaRef({ defaultMeta } = {}) {
        return defaultMeta === false ? {} : { $ref: defaultMeta || META_SCHEMA_ID };
      }
      exports.metaSchemaRef = metaSchemaRef;
      function usePattern({ gen, it: { opts } }, pattern, flags = opts.unicodeRegExp ? "u" : "") {
        const rx = new RegExp(pattern, flags);
        return gen.scopeValue("pattern", {
          key: rx.toString(),
          ref: rx,
          code: (0, codegen_1._)`new RegExp(${pattern}, ${flags})`
        });
      }
      exports.usePattern = usePattern;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/regexp.js
  var require_regexp = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/regexp.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var _util_1 = require_util2();
      var regexpMetaSchema = {
        type: "object",
        properties: {
          pattern: { type: "string" },
          flags: { type: "string", nullable: true }
        },
        required: ["pattern"],
        additionalProperties: false
      };
      var metaRegexp = /^\/(.*)\/([gimuy]*)$/;
      function getDef() {
        return {
          keyword: "regexp",
          type: "string",
          schemaType: ["string", "object"],
          code(cxt) {
            const { data, schema: schema2 } = cxt;
            const regx = getRegExp(schema2);
            cxt.pass((0, codegen_1._)`${regx}.test(${data})`);
            function getRegExp(sch) {
              if (typeof sch == "object")
                return (0, _util_1.usePattern)(cxt, sch.pattern, sch.flags);
              const rx = metaRegexp.exec(sch);
              if (rx)
                return (0, _util_1.usePattern)(cxt, rx[1], rx[2]);
              throw new Error("cannot parse string into RegExp");
            }
          },
          metaSchema: {
            anyOf: [{ type: "string" }, regexpMetaSchema]
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/regexp.js
  var require_regexp2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/regexp.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var regexp_1 = __importDefault(require_regexp());
      var regexp = (ajv) => ajv.addKeyword((0, regexp_1.default)());
      exports.default = regexp;
      module.exports = regexp;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/transform.js
  var require_transform = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/transform.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var transform = {
        trimStart: (s) => s.trimStart(),
        trimEnd: (s) => s.trimEnd(),
        trimLeft: (s) => s.trimStart(),
        trimRight: (s) => s.trimEnd(),
        trim: (s) => s.trim(),
        toLowerCase: (s) => s.toLowerCase(),
        toUpperCase: (s) => s.toUpperCase(),
        toEnumCase: (s, cfg) => (cfg === null || cfg === void 0 ? void 0 : cfg.hash[configKey(s)]) || s
      };
      var getDef = Object.assign(_getDef, { transform });
      function _getDef() {
        return {
          keyword: "transform",
          schemaType: "array",
          before: "enum",
          code(cxt) {
            const { gen, data, schema: schema2, parentSchema, it } = cxt;
            const { parentData, parentDataProperty } = it;
            const tNames = schema2;
            if (!tNames.length)
              return;
            let cfg;
            if (tNames.includes("toEnumCase")) {
              const config = getEnumCaseCfg(parentSchema);
              cfg = gen.scopeValue("obj", { ref: config, code: (0, codegen_1.stringify)(config) });
            }
            gen.if((0, codegen_1._)`typeof ${data} == "string" && ${parentData} !== undefined`, () => {
              gen.assign(data, transformExpr(tNames.slice()));
              gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, data);
            });
            function transformExpr(ts) {
              if (!ts.length)
                return data;
              const t = ts.pop();
              if (!(t in transform))
                throw new Error(`transform: unknown transformation ${t}`);
              const func = gen.scopeValue("func", {
                ref: transform[t],
                code: (0, codegen_1._)`require("ajv-keywords/dist/definitions/transform").transform${(0, codegen_1.getProperty)(t)}`
              });
              const arg = transformExpr(ts);
              return cfg && t === "toEnumCase" ? (0, codegen_1._)`${func}(${arg}, ${cfg})` : (0, codegen_1._)`${func}(${arg})`;
            }
          },
          metaSchema: {
            type: "array",
            items: { type: "string", enum: Object.keys(transform) }
          }
        };
      }
      function getEnumCaseCfg(parentSchema) {
        const cfg = { hash: {} };
        if (!parentSchema.enum)
          throw new Error('transform: "toEnumCase" requires "enum"');
        for (const v of parentSchema.enum) {
          if (typeof v !== "string")
            continue;
          const k = configKey(v);
          if (cfg.hash[k]) {
            throw new Error('transform: "toEnumCase" requires all lowercased "enum" values to be unique');
          }
          cfg.hash[k] = v;
        }
        return cfg;
      }
      function configKey(s) {
        return s.toLowerCase();
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/transform.js
  var require_transform2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/transform.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var transform_1 = __importDefault(require_transform());
      var transform = (ajv) => ajv.addKeyword((0, transform_1.default)());
      exports.default = transform;
      module.exports = transform;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/uniqueItemProperties.js
  var require_uniqueItemProperties = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/uniqueItemProperties.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var equal = require_fast_deep_equal();
      var SCALAR_TYPES = ["number", "integer", "string", "boolean", "null"];
      function getDef() {
        return {
          keyword: "uniqueItemProperties",
          type: "array",
          schemaType: "array",
          compile(keys, parentSchema) {
            const scalar = getScalarKeys(keys, parentSchema);
            return (data) => {
              if (data.length <= 1)
                return true;
              for (let k = 0; k < keys.length; k++) {
                const key = keys[k];
                if (scalar[k]) {
                  const hash = {};
                  for (const x of data) {
                    if (!x || typeof x != "object")
                      continue;
                    let p = x[key];
                    if (p && typeof p == "object")
                      continue;
                    if (typeof p == "string")
                      p = '"' + p;
                    if (hash[p])
                      return false;
                    hash[p] = true;
                  }
                } else {
                  for (let i = data.length; i--; ) {
                    const x = data[i];
                    if (!x || typeof x != "object")
                      continue;
                    for (let j = i; j--; ) {
                      const y = data[j];
                      if (y && typeof y == "object" && equal(x[key], y[key]))
                        return false;
                    }
                  }
                }
              }
              return true;
            };
          },
          metaSchema: {
            type: "array",
            items: { type: "string" }
          }
        };
      }
      exports.default = getDef;
      function getScalarKeys(keys, schema2) {
        return keys.map((key) => {
          var _a, _b, _c;
          const t = (_c = (_b = (_a = schema2.items) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b[key]) === null || _c === void 0 ? void 0 : _c.type;
          return Array.isArray(t) ? !t.includes("object") && !t.includes("array") : SCALAR_TYPES.includes(t);
        });
      }
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/uniqueItemProperties.js
  var require_uniqueItemProperties2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/uniqueItemProperties.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var uniqueItemProperties_1 = __importDefault(require_uniqueItemProperties());
      var uniqueItemProperties = (ajv) => ajv.addKeyword((0, uniqueItemProperties_1.default)());
      exports.default = uniqueItemProperties;
      module.exports = uniqueItemProperties;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/allRequired.js
  var require_allRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/allRequired.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getDef() {
        return {
          keyword: "allRequired",
          type: "object",
          schemaType: "boolean",
          macro(schema2, parentSchema) {
            if (!schema2)
              return true;
            const required = Object.keys(parentSchema.properties);
            if (required.length === 0)
              return true;
            return { required };
          },
          dependencies: ["properties"]
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/allRequired.js
  var require_allRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/allRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var allRequired_1 = __importDefault(require_allRequired());
      var allRequired = (ajv) => ajv.addKeyword((0, allRequired_1.default)());
      exports.default = allRequired;
      module.exports = allRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/_required.js
  var require_required2 = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/_required.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getRequiredDef(keyword) {
        return () => ({
          keyword,
          type: "object",
          schemaType: "array",
          macro(schema2) {
            if (schema2.length === 0)
              return true;
            if (schema2.length === 1)
              return { required: schema2 };
            const comb = keyword === "anyRequired" ? "anyOf" : "oneOf";
            return { [comb]: schema2.map((p) => ({ required: [p] })) };
          },
          metaSchema: {
            type: "array",
            items: { type: "string" }
          }
        });
      }
      exports.default = getRequiredDef;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/anyRequired.js
  var require_anyRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/anyRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _required_1 = __importDefault(require_required2());
      var getDef = (0, _required_1.default)("anyRequired");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/anyRequired.js
  var require_anyRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/anyRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var anyRequired_1 = __importDefault(require_anyRequired());
      var anyRequired = (ajv) => ajv.addKeyword((0, anyRequired_1.default)());
      exports.default = anyRequired;
      module.exports = anyRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/oneRequired.js
  var require_oneRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/oneRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var _required_1 = __importDefault(require_required2());
      var getDef = (0, _required_1.default)("oneRequired");
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/oneRequired.js
  var require_oneRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/oneRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var oneRequired_1 = __importDefault(require_oneRequired());
      var oneRequired = (ajv) => ajv.addKeyword((0, oneRequired_1.default)());
      exports.default = oneRequired;
      module.exports = oneRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/patternRequired.js
  var require_patternRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/patternRequired.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var _util_1 = require_util2();
      var error = {
        message: ({ params: { missingPattern } }) => (0, codegen_1.str)`should have property matching pattern '${missingPattern}'`,
        params: ({ params: { missingPattern } }) => (0, codegen_1._)`{missingPattern: ${missingPattern}}`
      };
      function getDef() {
        return {
          keyword: "patternRequired",
          type: "object",
          schemaType: "array",
          error,
          code(cxt) {
            const { gen, schema: schema2, data } = cxt;
            if (schema2.length === 0)
              return;
            const valid = gen.let("valid", true);
            for (const pat of schema2)
              validateProperties(pat);
            function validateProperties(pattern) {
              const matched = gen.let("matched", false);
              gen.forIn("key", data, (key) => {
                gen.assign(matched, (0, codegen_1._)`${(0, _util_1.usePattern)(cxt, pattern)}.test(${key})`);
                gen.if(matched, () => gen.break());
              });
              cxt.setParams({ missingPattern: pattern });
              gen.assign(valid, (0, codegen_1.and)(valid, matched));
              cxt.pass(valid);
            }
          },
          metaSchema: {
            type: "array",
            items: { type: "string", format: "regex" },
            uniqueItems: true
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/patternRequired.js
  var require_patternRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/patternRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var patternRequired_1 = __importDefault(require_patternRequired());
      var patternRequired = (ajv) => ajv.addKeyword((0, patternRequired_1.default)());
      exports.default = patternRequired;
      module.exports = patternRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/prohibited.js
  var require_prohibited = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/prohibited.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      function getDef() {
        return {
          keyword: "prohibited",
          type: "object",
          schemaType: "array",
          macro: function(schema2) {
            if (schema2.length === 0)
              return true;
            if (schema2.length === 1)
              return { not: { required: schema2 } };
            return { not: { anyOf: schema2.map((p) => ({ required: [p] })) } };
          },
          metaSchema: {
            type: "array",
            items: { type: "string" }
          }
        };
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/prohibited.js
  var require_prohibited2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/prohibited.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var prohibited_1 = __importDefault(require_prohibited());
      var prohibited = (ajv) => ajv.addKeyword((0, prohibited_1.default)());
      exports.default = prohibited;
      module.exports = prohibited;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/deepProperties.js
  var require_deepProperties = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/deepProperties.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var _util_1 = require_util2();
      function getDef(opts) {
        return {
          keyword: "deepProperties",
          type: "object",
          schemaType: "object",
          macro: function(schema2) {
            const allOf = [];
            for (const pointer2 in schema2)
              allOf.push(getSchema(pointer2, schema2[pointer2]));
            return { allOf };
          },
          metaSchema: {
            type: "object",
            propertyNames: { type: "string", format: "json-pointer" },
            additionalProperties: (0, _util_1.metaSchemaRef)(opts)
          }
        };
      }
      exports.default = getDef;
      function getSchema(jsonPointer, schema2) {
        const segments = jsonPointer.split("/");
        const rootSchema = {};
        let pointerSchema = rootSchema;
        for (let i = 1; i < segments.length; i++) {
          let segment = segments[i];
          const isLast = i === segments.length - 1;
          segment = unescapeJsonPointer(segment);
          const properties = pointerSchema.properties = {};
          let items;
          if (/[0-9]+/.test(segment)) {
            let count = +segment;
            items = pointerSchema.items = [];
            pointerSchema.type = ["object", "array"];
            while (count--)
              items.push({});
          } else {
            pointerSchema.type = "object";
          }
          pointerSchema = isLast ? schema2 : {};
          properties[segment] = pointerSchema;
          if (items)
            items.push(pointerSchema);
        }
        return rootSchema;
      }
      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/deepProperties.js
  var require_deepProperties2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/deepProperties.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var deepProperties_1 = __importDefault(require_deepProperties());
      var deepProperties = (ajv, opts) => ajv.addKeyword((0, deepProperties_1.default)(opts));
      exports.default = deepProperties;
      module.exports = deepProperties;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/deepRequired.js
  var require_deepRequired = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/deepRequired.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      function getDef() {
        return {
          keyword: "deepRequired",
          type: "object",
          schemaType: "array",
          code(ctx) {
            const { schema: schema2, data } = ctx;
            const props = schema2.map((jp) => (0, codegen_1._)`(${getData(jp)}) === undefined`);
            ctx.fail((0, codegen_1.or)(...props));
            function getData(jsonPointer) {
              if (jsonPointer === "")
                throw new Error("empty JSON pointer not allowed");
              const segments = jsonPointer.split("/");
              let x = data;
              const xs = segments.map((s, i) => i ? x = (0, codegen_1._)`${x}${(0, codegen_1.getProperty)(unescapeJPSegment(s))}` : x);
              return (0, codegen_1.and)(...xs);
            }
          },
          metaSchema: {
            type: "array",
            items: { type: "string", format: "json-pointer" }
          }
        };
      }
      exports.default = getDef;
      function unescapeJPSegment(s) {
        return s.replace(/~1/g, "/").replace(/~0/g, "~");
      }
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/deepRequired.js
  var require_deepRequired2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/deepRequired.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var deepRequired_1 = __importDefault(require_deepRequired());
      var deepRequired = (ajv) => ajv.addKeyword((0, deepRequired_1.default)());
      exports.default = deepRequired;
      module.exports = deepRequired;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/dynamicDefaults.js
  var require_dynamicDefaults = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/dynamicDefaults.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var sequences = {};
      var DEFAULTS = {
        timestamp: () => () => Date.now(),
        datetime: () => () => new Date().toISOString(),
        date: () => () => new Date().toISOString().slice(0, 10),
        time: () => () => new Date().toISOString().slice(11),
        random: () => () => Math.random(),
        randomint: (args) => {
          var _a;
          const max = (_a = args === null || args === void 0 ? void 0 : args.max) !== null && _a !== void 0 ? _a : 2;
          return () => Math.floor(Math.random() * max);
        },
        seq: (args) => {
          var _a;
          const name = (_a = args === null || args === void 0 ? void 0 : args.name) !== null && _a !== void 0 ? _a : "";
          sequences[name] || (sequences[name] = 0);
          return () => sequences[name]++;
        }
      };
      var getDef = Object.assign(_getDef, { DEFAULTS });
      function _getDef() {
        return {
          keyword: "dynamicDefaults",
          type: "object",
          schemaType: ["string", "object"],
          modifying: true,
          valid: true,
          compile(schema2, _parentSchema, it) {
            if (!it.opts.useDefaults || it.compositeRule)
              return () => true;
            const fs = {};
            for (const key in schema2)
              fs[key] = getDefault(schema2[key]);
            const empty = it.opts.useDefaults === "empty";
            return (data) => {
              for (const prop in schema2) {
                if (data[prop] === void 0 || empty && (data[prop] === null || data[prop] === "")) {
                  data[prop] = fs[prop]();
                }
              }
              return true;
            };
          },
          metaSchema: {
            type: "object",
            additionalProperties: {
              anyOf: [
                { type: "string" },
                {
                  type: "object",
                  additionalProperties: false,
                  required: ["func", "args"],
                  properties: {
                    func: { type: "string" },
                    args: { type: "object" }
                  }
                }
              ]
            }
          }
        };
      }
      function getDefault(d) {
        return typeof d == "object" ? getObjDefault(d) : getStrDefault(d);
      }
      function getObjDefault({ func, args }) {
        const def = DEFAULTS[func];
        assertDefined(func, def);
        return def(args);
      }
      function getStrDefault(d = "") {
        const def = DEFAULTS[d];
        assertDefined(d, def);
        return def();
      }
      function assertDefined(name, def) {
        if (!def)
          throw new Error(`invalid "dynamicDefaults" keyword property value: ${name}`);
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/dynamicDefaults.js
  var require_dynamicDefaults2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/dynamicDefaults.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var dynamicDefaults_1 = __importDefault(require_dynamicDefaults());
      var dynamicDefaults = (ajv) => ajv.addKeyword((0, dynamicDefaults_1.default)());
      exports.default = dynamicDefaults;
      module.exports = dynamicDefaults;
    }
  });

  // node_modules/ajv-keywords/dist/definitions/select.js
  var require_select = __commonJS({
    "node_modules/ajv-keywords/dist/definitions/select.js"(exports, module) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var codegen_1 = require_codegen();
      var _util_1 = require_util2();
      var error = {
        message: ({ params: { schemaProp } }) => schemaProp ? (0, codegen_1.str)`should match case "${schemaProp}" schema` : (0, codegen_1.str)`should match default case schema`,
        params: ({ params: { schemaProp } }) => schemaProp ? (0, codegen_1._)`{failingCase: ${schemaProp}}` : (0, codegen_1._)`{failingDefault: true}`
      };
      function getDef(opts) {
        const metaSchema = (0, _util_1.metaSchemaRef)(opts);
        return [
          {
            keyword: "select",
            schemaType: ["string", "number", "boolean", "null"],
            $data: true,
            error,
            dependencies: ["selectCases"],
            code(cxt) {
              const { gen, schemaCode, parentSchema } = cxt;
              cxt.block$data(codegen_1.nil, () => {
                const valid = gen.let("valid", true);
                const schValid = gen.name("_valid");
                const value = gen.const("value", (0, codegen_1._)`${schemaCode} === null ? "null" : ${schemaCode}`);
                gen.if(false);
                for (const schemaProp in parentSchema.selectCases) {
                  cxt.setParams({ schemaProp });
                  gen.elseIf((0, codegen_1._)`"" + ${value} == ${schemaProp}`);
                  const schCxt = cxt.subschema({ keyword: "selectCases", schemaProp }, schValid);
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
                  gen.assign(valid, schValid);
                }
                gen.else();
                if (parentSchema.selectDefault !== void 0) {
                  cxt.setParams({ schemaProp: void 0 });
                  const schCxt = cxt.subschema({ keyword: "selectDefault" }, schValid);
                  cxt.mergeEvaluated(schCxt, codegen_1.Name);
                  gen.assign(valid, schValid);
                }
                gen.endIf();
                cxt.pass(valid);
              });
            }
          },
          {
            keyword: "selectCases",
            dependencies: ["select"],
            metaSchema: {
              type: "object",
              additionalProperties: metaSchema
            }
          },
          {
            keyword: "selectDefault",
            dependencies: ["select", "selectCases"],
            metaSchema
          }
        ];
      }
      exports.default = getDef;
      module.exports = getDef;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/select.js
  var require_select2 = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/select.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var select_1 = __importDefault(require_select());
      var select = (ajv, opts) => {
        (0, select_1.default)(opts).forEach((d) => ajv.addKeyword(d));
        return ajv;
      };
      exports.default = select;
      module.exports = select;
    }
  });

  // node_modules/ajv-keywords/dist/keywords/index.js
  var require_keywords = __commonJS({
    "node_modules/ajv-keywords/dist/keywords/index.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeof_1 = __importDefault(require_typeof2());
      var instanceof_1 = __importDefault(require_instanceof2());
      var range_1 = __importDefault(require_range3());
      var exclusiveRange_1 = __importDefault(require_exclusiveRange2());
      var regexp_1 = __importDefault(require_regexp2());
      var transform_1 = __importDefault(require_transform2());
      var uniqueItemProperties_1 = __importDefault(require_uniqueItemProperties2());
      var allRequired_1 = __importDefault(require_allRequired2());
      var anyRequired_1 = __importDefault(require_anyRequired2());
      var oneRequired_1 = __importDefault(require_oneRequired2());
      var patternRequired_1 = __importDefault(require_patternRequired2());
      var prohibited_1 = __importDefault(require_prohibited2());
      var deepProperties_1 = __importDefault(require_deepProperties2());
      var deepRequired_1 = __importDefault(require_deepRequired2());
      var dynamicDefaults_1 = __importDefault(require_dynamicDefaults2());
      var select_1 = __importDefault(require_select2());
      var ajvKeywords = {
        typeof: typeof_1.default,
        instanceof: instanceof_1.default,
        range: range_1.default,
        exclusiveRange: exclusiveRange_1.default,
        regexp: regexp_1.default,
        transform: transform_1.default,
        uniqueItemProperties: uniqueItemProperties_1.default,
        allRequired: allRequired_1.default,
        anyRequired: anyRequired_1.default,
        oneRequired: oneRequired_1.default,
        patternRequired: patternRequired_1.default,
        prohibited: prohibited_1.default,
        deepProperties: deepProperties_1.default,
        deepRequired: deepRequired_1.default,
        dynamicDefaults: dynamicDefaults_1.default,
        select: select_1.default
      };
      exports.default = ajvKeywords;
      module.exports = ajvKeywords;
    }
  });

  // node_modules/ajv-keywords/dist/index.js
  var require_dist = __commonJS({
    "node_modules/ajv-keywords/dist/index.js"(exports, module) {
      init_globals();
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var keywords_1 = __importDefault(require_keywords());
      var ajvKeywords = (ajv, keyword) => {
        if (Array.isArray(keyword)) {
          for (const k of keyword)
            get2(k)(ajv);
          return ajv;
        }
        if (keyword) {
          get2(keyword)(ajv);
          return ajv;
        }
        for (keyword in keywords_1.default)
          get2(keyword)(ajv);
        return ajv;
      };
      ajvKeywords.get = get2;
      function get2(keyword) {
        const defFunc = keywords_1.default[keyword];
        if (!defFunc)
          throw new Error("Unknown keyword " + keyword);
        return defFunc;
      }
      exports.default = ajvKeywords;
      module.exports = ajvKeywords;
      module.exports.default = ajvKeywords;
    }
  });

  // node_modules/@humanwhocodes/momoa/api.js
  var require_api = __commonJS({
    "node_modules/@humanwhocodes/momoa/api.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", { value: true });
      var LBRACKET = "[";
      var RBRACKET = "]";
      var LBRACE = "{";
      var RBRACE = "}";
      var COLON = ":";
      var COMMA = ",";
      var TRUE = "true";
      var FALSE = "false";
      var NULL = "null";
      var QUOTE = '"';
      var expectedKeywords = /* @__PURE__ */ new Map([
        ["t", TRUE],
        ["f", FALSE],
        ["n", NULL]
      ]);
      var escapeToChar = /* @__PURE__ */ new Map([
        [QUOTE, QUOTE],
        ["\\", "\\"],
        ["/", "/"],
        ["b", "\b"],
        ["n", "\n"],
        ["f", "\f"],
        ["r", "\r"],
        ["t", "	"]
      ]);
      var knownTokenTypes = /* @__PURE__ */ new Map([
        [LBRACKET, "Punctuator"],
        [RBRACKET, "Punctuator"],
        [LBRACE, "Punctuator"],
        [RBRACE, "Punctuator"],
        [COLON, "Punctuator"],
        [COMMA, "Punctuator"],
        [TRUE, "Boolean"],
        [FALSE, "Boolean"],
        [NULL, "Null"]
      ]);
      var ErrorWithLocation = class extends Error {
        constructor(message, { line, column, index }) {
          super(`${message} (${line}:${column})`);
          this.line = line;
          this.column = column;
          this.index = index;
        }
      };
      var UnexpectedChar = class extends ErrorWithLocation {
        constructor(unexpected, loc) {
          super(`Unexpected character ${unexpected} found.`, loc);
        }
      };
      var UnexpectedToken = class extends ErrorWithLocation {
        constructor(token) {
          super(`Unexpected token ${token.type}(${token.value}) found.`, token.loc.start);
        }
      };
      var UnexpectedEOF = class extends ErrorWithLocation {
        constructor(loc) {
          super("Unexpected end of input found.", loc);
        }
      };
      var QUOTE$1 = '"';
      var SLASH = "/";
      var STAR = "*";
      var DEFAULT_OPTIONS = {
        comments: false,
        ranges: false
      };
      function isWhitespace(c) {
        return /[\s\n]/.test(c);
      }
      function isDigit(c) {
        return c >= "0" && c <= "9";
      }
      function isHexDigit(c) {
        return isDigit(c) || /[a-f]/i.test(c);
      }
      function isPositiveDigit(c) {
        return c >= "1" && c <= "9";
      }
      function isKeywordStart(c) {
        return /[tfn]/.test(c);
      }
      function isNumberStart(c) {
        return isDigit(c) || c === "." || c === "-";
      }
      function tokenize(text, options2) {
        options2 = Object.freeze({
          ...DEFAULT_OPTIONS,
          ...options2
        });
        let offset = -1;
        let line = 1;
        let column = 0;
        let newLine = false;
        const tokens = [];
        function createToken(tokenType, value, startLoc, endLoc) {
          const endOffset = startLoc.offset + value.length;
          let range = options2.ranges ? {
            range: [startLoc.offset, endOffset]
          } : void 0;
          return {
            type: tokenType,
            value,
            loc: {
              start: startLoc,
              end: endLoc || {
                line: startLoc.line,
                column: startLoc.column + value.length,
                offset: endOffset
              }
            },
            ...range
          };
        }
        function next() {
          let c2 = text.charAt(++offset);
          if (newLine) {
            line++;
            column = 1;
            newLine = false;
          } else {
            column++;
          }
          if (c2 === "\r") {
            newLine = true;
            if (text.charAt(offset + 1) === "\n") {
              offset++;
            }
          } else if (c2 === "\n") {
            newLine = true;
          }
          return c2;
        }
        function locate() {
          return {
            line,
            column,
            offset
          };
        }
        function readKeyword(c2) {
          let value = expectedKeywords.get(c2);
          if (text.slice(offset, offset + value.length) === value) {
            offset += value.length - 1;
            column += value.length - 1;
            return { value, c: next() };
          }
          for (let j = 1; j < value.length; j++) {
            if (value[j] !== text.charAt(offset + j)) {
              unexpected(next());
            }
          }
        }
        function readString(c2) {
          let value = c2;
          c2 = next();
          while (c2 && c2 !== QUOTE$1) {
            if (c2 === "\\") {
              value += c2;
              c2 = next();
              if (escapeToChar.has(c2)) {
                value += c2;
              } else if (c2 === "u") {
                value += c2;
                for (let i = 0; i < 4; i++) {
                  c2 = next();
                  if (isHexDigit(c2)) {
                    value += c2;
                  } else {
                    unexpected(c2);
                  }
                }
              } else {
                unexpected(c2);
              }
            } else {
              value += c2;
            }
            c2 = next();
          }
          if (!c2) {
            unexpectedEOF();
          }
          value += c2;
          return { value, c: next() };
        }
        function readNumber(c2) {
          let value = "";
          if (c2 === "-") {
            value += c2;
            c2 = next();
            if (!isDigit(c2)) {
              unexpected(c2);
            }
          }
          if (c2 === "0") {
            value += c2;
            c2 = next();
            if (isDigit(c2)) {
              unexpected(c2);
            }
          } else {
            if (!isPositiveDigit(c2)) {
              unexpected(c2);
            }
            do {
              value += c2;
              c2 = next();
            } while (isDigit(c2));
          }
          if (c2 === ".") {
            do {
              value += c2;
              c2 = next();
            } while (isDigit(c2));
          }
          if (c2 === "e" || c2 === "E") {
            value += c2;
            c2 = next();
            if (c2 === "+" || c2 === "-") {
              value += c2;
              c2 = next();
            }
            if (!isDigit(c2)) {
              unexpected(c2);
            }
            while (isDigit(c2)) {
              value += c2;
              c2 = next();
            }
          }
          return { value, c: c2 };
        }
        function readComment(c2) {
          let value = c2;
          c2 = next();
          if (c2 === "/") {
            do {
              value += c2;
              c2 = next();
            } while (c2 && c2 !== "\r" && c2 !== "\n");
            return { value, c: c2 };
          }
          if (c2 === STAR) {
            while (c2) {
              value += c2;
              c2 = next();
              if (c2 === STAR) {
                value += c2;
                c2 = next();
                if (c2 === SLASH) {
                  value += c2;
                  c2 = next();
                  return { value, c: c2 };
                }
              }
            }
            unexpectedEOF();
          }
          unexpected(c2);
        }
        function unexpected(c2) {
          throw new UnexpectedChar(c2, locate());
        }
        function unexpectedEOF() {
          throw new UnexpectedEOF(locate());
        }
        let c = next();
        while (offset < text.length) {
          while (isWhitespace(c)) {
            c = next();
          }
          if (!c) {
            break;
          }
          const start = locate();
          if (knownTokenTypes.has(c)) {
            tokens.push(createToken(knownTokenTypes.get(c), c, start));
            c = next();
          } else if (isKeywordStart(c)) {
            const result = readKeyword(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken(knownTokenTypes.get(value), value, start));
          } else if (isNumberStart(c)) {
            const result = readNumber(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken("Number", value, start));
          } else if (c === QUOTE$1) {
            const result = readString(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken("String", value, start));
          } else if (c === SLASH && options2.comments) {
            const result = readComment(c);
            let value = result.value;
            c = result.c;
            tokens.push(createToken(value.startsWith("//") ? "LineComment" : "BlockComment", value, start, locate()));
          } else {
            unexpected(c);
          }
        }
        return tokens;
      }
      var types = {
        document(body, parts = {}) {
          return {
            type: "Document",
            body,
            ...parts
          };
        },
        string(value, parts = {}) {
          return {
            type: "String",
            value,
            ...parts
          };
        },
        number(value, parts = {}) {
          return {
            type: "Number",
            value,
            ...parts
          };
        },
        boolean(value, parts = {}) {
          return {
            type: "Boolean",
            value,
            ...parts
          };
        },
        null(parts = {}) {
          return {
            type: "Null",
            value: "null",
            ...parts
          };
        },
        array(elements, parts = {}) {
          return {
            type: "Array",
            elements,
            ...parts
          };
        },
        object(members, parts = {}) {
          return {
            type: "Object",
            members,
            ...parts
          };
        },
        member(name, value, parts = {}) {
          return {
            type: "Member",
            name,
            value,
            ...parts
          };
        }
      };
      var DEFAULT_OPTIONS$1 = {
        tokens: false,
        comments: false,
        ranges: false
      };
      function getStringValue(token) {
        let value = token.value.slice(1, -1);
        let result = "";
        let escapeIndex = value.indexOf("\\");
        let lastIndex = 0;
        while (escapeIndex >= 0) {
          result += value.slice(lastIndex, escapeIndex);
          const escapeChar = value.charAt(escapeIndex + 1);
          if (escapeToChar.has(escapeChar)) {
            result += escapeToChar.get(escapeChar);
            lastIndex = escapeIndex + 2;
          } else if (escapeChar === "u") {
            const hexCode = value.slice(escapeIndex + 2, escapeIndex + 6);
            if (hexCode.length < 4 || /[^0-9a-f]/i.test(hexCode)) {
              throw new ErrorWithLocation(`Invalid unicode escape \\u${hexCode}.`, {
                line: token.loc.start.line,
                column: token.loc.start.column + escapeIndex,
                offset: token.loc.start.offset + escapeIndex
              });
            }
            result += String.fromCharCode(parseInt(hexCode, 16));
            lastIndex = escapeIndex + 6;
          } else {
            throw new ErrorWithLocation(`Invalid escape \\${escapeChar}.`, {
              line: token.loc.start.line,
              column: token.loc.start.column + escapeIndex,
              offset: token.loc.start.offset + escapeIndex
            });
          }
          escapeIndex = value.indexOf("\\", lastIndex);
        }
        result += value.slice(lastIndex);
        return result;
      }
      function getLiteralValue(token) {
        switch (token.type) {
          case "Boolean":
            return token.value === "true";
          case "Number":
            return Number(token.value);
          case "Null":
            return null;
          case "String":
            return getStringValue(token);
        }
      }
      function parse2(text, options2) {
        options2 = Object.freeze({
          ...DEFAULT_OPTIONS$1,
          ...options2
        });
        const tokens = tokenize(text, {
          comments: !!options2.comments,
          ranges: !!options2.ranges
        });
        let tokenIndex = 0;
        function nextNoComments() {
          return tokens[tokenIndex++];
        }
        function nextSkipComments() {
          const nextToken = tokens[tokenIndex++];
          if (nextToken && nextToken.type.endsWith("Comment")) {
            return nextSkipComments();
          }
          return nextToken;
        }
        const next = options2.comments ? nextSkipComments : nextNoComments;
        function assertTokenValue(token, value) {
          if (!token || token.value !== value) {
            throw new UnexpectedToken(token);
          }
        }
        function assertTokenType(token, type2) {
          if (!token || token.type !== type2) {
            throw new UnexpectedToken(token);
          }
        }
        function createRange(start, end) {
          return options2.ranges ? {
            range: [start.offset, end.offset]
          } : void 0;
        }
        function createLiteralNode(token) {
          const range = createRange(token.loc.start, token.loc.end);
          return {
            type: token.type,
            value: getLiteralValue(token),
            loc: {
              start: {
                ...token.loc.start
              },
              end: {
                ...token.loc.end
              }
            },
            ...range
          };
        }
        function parseProperty(token) {
          assertTokenType(token, "String");
          const name = createLiteralNode(token);
          token = next();
          assertTokenValue(token, ":");
          const value = parseValue();
          const range = createRange(name.loc.start, value.loc.end);
          return types.member(name, value, {
            loc: {
              start: {
                ...name.loc.start
              },
              end: {
                ...value.loc.end
              }
            },
            ...range
          });
        }
        function parseObject(firstToken) {
          assertTokenValue(firstToken, "{");
          const members = [];
          let token = next();
          if (token && token.value !== "}") {
            do {
              members.push(parseProperty(token));
              token = next();
              if (token.value === ",") {
                token = next();
              } else {
                break;
              }
            } while (token);
          }
          assertTokenValue(token, "}");
          const range = createRange(firstToken.loc.start, token.loc.end);
          return types.object(members, {
            loc: {
              start: {
                ...firstToken.loc.start
              },
              end: {
                ...token.loc.end
              }
            },
            ...range
          });
        }
        function parseArray(firstToken) {
          assertTokenValue(firstToken, "[");
          const elements = [];
          let token = next();
          if (token && token.value !== "]") {
            do {
              elements.push(parseValue(token));
              token = next();
              if (token.value === ",") {
                token = next();
              } else {
                break;
              }
            } while (token);
          }
          assertTokenValue(token, "]");
          const range = createRange(firstToken.loc.start, token.loc.end);
          return types.array(elements, {
            type: "Array",
            elements,
            loc: {
              start: {
                ...firstToken.loc.start
              },
              end: {
                ...token.loc.end
              }
            },
            ...range
          });
        }
        function parseValue(token) {
          token = token || next();
          switch (token.type) {
            case "String":
            case "Boolean":
            case "Number":
            case "Null":
              return createLiteralNode(token);
            case "Punctuator":
              if (token.value === "{") {
                return parseObject(token);
              } else if (token.value === "[") {
                return parseArray(token);
              }
            default:
              throw new UnexpectedToken(token);
          }
        }
        const docBody = parseValue();
        const unexpectedToken = next();
        if (unexpectedToken) {
          throw new UnexpectedToken(unexpectedToken);
        }
        const docParts = {
          loc: {
            start: {
              line: 1,
              column: 1,
              offset: 0
            },
            end: {
              ...docBody.loc.end
            }
          }
        };
        if (options2.tokens) {
          docParts.tokens = tokens;
        }
        if (options2.ranges) {
          docParts.range = createRange(docParts.loc.start, docParts.loc.end);
        }
        return types.document(docBody, docParts);
      }
      var childKeys = /* @__PURE__ */ new Map([
        ["Document", ["body"]],
        ["Object", ["members"]],
        ["Member", ["name", "value"]],
        ["Array", ["elements"]],
        ["String", []],
        ["Number", []],
        ["Boolean", []],
        ["Null", []]
      ]);
      function isObject(value) {
        return value && typeof value === "object";
      }
      function isNode(value) {
        return isObject(value) && typeof value.type === "string";
      }
      function traverse(root, visitor) {
        function visitNode(node, parent) {
          if (typeof visitor.enter === "function") {
            visitor.enter(node, parent);
          }
          for (const key of childKeys.get(node.type)) {
            const value = node[key];
            if (isObject(value)) {
              if (Array.isArray(value)) {
                value.forEach((child) => visitNode(child, node));
              } else if (isNode(value)) {
                visitNode(value, node);
              }
            }
          }
          if (typeof visitor.exit === "function") {
            visitor.exit(node, parent);
          }
        }
        visitNode(root);
      }
      function iterator(root, filter = () => true) {
        const traversal = [];
        traverse(root, {
          enter(node, parent) {
            traversal.push({ node, parent, phase: "enter" });
          },
          exit(node, parent) {
            traversal.push({ node, parent, phase: "exit" });
          }
        });
        return traversal.filter(filter).values();
      }
      function evaluate(node) {
        switch (node.type) {
          case "String":
          case "Number":
          case "Boolean":
            return node.value;
          case "Null":
            return null;
          case "Array":
            return node.elements.map(evaluate);
          case "Object": {
            const object = {};
            node.members.forEach((member) => {
              object[evaluate(member.name)] = evaluate(member.value);
            });
            return object;
          }
          case "Document":
            return evaluate(node.body);
          case "Property":
            throw new Error("Cannot evaluate object property outside of an object.");
          default:
            throw new Error(`Unknown node type ${node.type}.`);
        }
      }
      function print2(node, { indent = 0 } = {}) {
        const value = evaluate(node);
        return JSON.stringify(value, null, indent);
      }
      exports.evaluate = evaluate;
      exports.iterator = iterator;
      exports.parse = parse2;
      exports.print = print2;
      exports.tokenize = tokenize;
      exports.traverse = traverse;
      exports.types = types;
    }
  });

  // node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/color-name/index.js"(exports, module) {
      init_globals();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/color-convert/conversions.js"(exports, module) {
      init_globals();
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        const t1 = 2 * l - t2;
        const rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = y ** 3;
        const x2 = x ** 3;
        const z2 = z ** 3;
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/color-convert/route.js"(exports, module) {
      init_globals();
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/color-convert/index.js"(exports, module) {
      init_globals();
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "node_modules/ansi-styles/index.js"(exports, module) {
      init_globals();
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code2 = fn(...args);
        return `\x1B[${code2 + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code2 = fn(...args);
        return `\x1B[${38 + offset};5;${code2}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n) => n;
      var rgb2rgb = (r, g, b) => [r, g, b];
      var setLazyProperty = (object, property, get2) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get2();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
        if (colorConvert === void 0) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles[name] = wrap(identity, offset);
          } else if (typeof suite === "object") {
            styles[name] = wrap(suite[targetSpace], offset);
          }
        }
        return styles;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.gray = styles.color.blackBright;
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
        styles.color.grey = styles.color.blackBright;
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/supports-color/browser.js
  var require_browser2 = __commonJS({
    "node_modules/supports-color/browser.js"(exports, module) {
      init_globals();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/chalk/source/util.js
  var require_util3 = __commonJS({
    "node_modules/chalk/source/util.js"(exports, module) {
      init_globals();
      var stringReplaceAll = (string, substring, replacer) => {
        let index = string.indexOf(substring);
        if (index === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
          endIndex = index + substringLength;
          index = string.indexOf(substring, endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
          endIndex = index + 1;
          index = string.indexOf("\n", endIndex);
        } while (index !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });

  // node_modules/chalk/source/templates.js
  var require_templates = __commonJS({
    "node_modules/chalk/source/templates.js"(exports, module) {
      init_globals();
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        const u = c[0] === "u";
        const bracket = c[1] === "{";
        if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number2 = Number(chunk);
          if (!Number.isNaN(number2)) {
            results.push(number2);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk5, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk5;
        for (const [styleName, styles2] of Object.entries(enabled)) {
          if (!Array.isArray(styles2)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
        }
        return current;
      }
      module.exports = (chalk5, temporary) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? string : buildStyle(chalk5, styles)(string));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk5, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMessage);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/chalk/source/index.js
  var require_source = __commonJS({
    "node_modules/chalk/source/index.js"(exports, module) {
      init_globals();
      var ansiStyles = require_ansi_styles();
      var { stdout: stdoutColor, stderr: stderrColor } = require_browser2();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util3();
      var { isArray } = Array;
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles = /* @__PURE__ */ Object.create(null);
      var applyOptions = (object, options2 = {}) => {
        if (options2.level && !(Number.isInteger(options2.level) && options2.level >= 0 && options2.level <= 3)) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options2.level === void 0 ? colorLevel : options2.level;
      };
      var ChalkClass = class {
        constructor(options2) {
          return chalkFactory(options2);
        }
      };
      var chalkFactory = (options2) => {
        const chalk6 = {};
        applyOptions(chalk6, options2);
        chalk6.template = (...arguments_) => chalkTag(chalk6.template, ...arguments_);
        Object.setPrototypeOf(chalk6, Chalk.prototype);
        Object.setPrototypeOf(chalk6.template, chalk6);
        chalk6.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk6.template.Instance = ChalkClass;
        return chalk6.template;
      };
      function Chalk(options2) {
        return chalkFactory(options2);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, { value: builder });
            return builder;
          }
        };
      }
      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", { value: builder });
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles[model] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, {
        ...styles,
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      });
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === void 0) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
            return applyStyle(builder, chalkTag(builder, ...arguments_));
          }
          return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        Object.setPrototypeOf(builder, proto);
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === void 0) {
          return string;
        }
        const { openAll, closeAll } = styler;
        if (string.indexOf("\x1B") !== -1) {
          while (styler !== void 0) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf("\n");
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk6, ...strings) => {
        const [firstString] = strings;
        if (!isArray(firstString) || !isArray(firstString.raw)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i = 1; i < firstString.length; i++) {
          parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
        }
        if (template === void 0) {
          template = require_templates();
        }
        return template(chalk6, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles);
      var chalk5 = Chalk();
      chalk5.supportsColor = stdoutColor;
      chalk5.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk5.stderr.supportsColor = stderrColor;
      module.exports = chalk5;
    }
  });

  // node_modules/js-tokens/index.js
  var require_js_tokens = __commonJS({
    "node_modules/js-tokens/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
      exports.matchToToken = function(match) {
        var token = { type: "invalid", value: match[0], closed: void 0 };
        if (match[1])
          token.type = "string", token.closed = !!(match[3] || match[4]);
        else if (match[5])
          token.type = "comment";
        else if (match[6])
          token.type = "comment", token.closed = !!match[7];
        else if (match[8])
          token.type = "regex";
        else if (match[9])
          token.type = "number";
        else if (match[10])
          token.type = "name";
        else if (match[11])
          token.type = "punctuator";
        else if (match[12])
          token.type = "whitespace";
        return token;
      };
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/identifier.js
  var require_identifier = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/identifier.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isIdentifierChar = isIdentifierChar;
      exports.isIdentifierName = isIdentifierName;
      exports.isIdentifierStart = isIdentifierStart;
      var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code2, set) {
        let pos = 65536;
        for (let i = 0, length = set.length; i < length; i += 2) {
          pos += set[i];
          if (pos > code2)
            return false;
          pos += set[i + 1];
          if (pos >= code2)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code2) {
        if (code2 < 65)
          return code2 === 36;
        if (code2 <= 90)
          return true;
        if (code2 < 97)
          return code2 === 95;
        if (code2 <= 122)
          return true;
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2));
        }
        return isInAstralSet(code2, astralIdentifierStartCodes);
      }
      function isIdentifierChar(code2) {
        if (code2 < 48)
          return code2 === 36;
        if (code2 < 58)
          return true;
        if (code2 < 65)
          return false;
        if (code2 <= 90)
          return true;
        if (code2 < 97)
          return code2 === 95;
        if (code2 <= 122)
          return true;
        if (code2 <= 65535) {
          return code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2));
        }
        return isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes);
      }
      function isIdentifierName(name) {
        let isFirst = true;
        for (let i = 0; i < name.length; i++) {
          let cp = name.charCodeAt(i);
          if ((cp & 64512) === 55296 && i + 1 < name.length) {
            const trail = name.charCodeAt(++i);
            if ((trail & 64512) === 56320) {
              cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
            }
          }
          if (isFirst) {
            isFirst = false;
            if (!isIdentifierStart(cp)) {
              return false;
            }
          } else if (!isIdentifierChar(cp)) {
            return false;
          }
        }
        return !isFirst;
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/keyword.js
  var require_keyword2 = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/keyword.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isKeyword = isKeyword;
      exports.isReservedWord = isReservedWord;
      exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
      exports.isStrictBindReservedWord = isStrictBindReservedWord;
      exports.isStrictReservedWord = isStrictReservedWord;
      var reservedWords = {
        keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
        strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
        strictBind: ["eval", "arguments"]
      };
      var keywords2 = new Set(reservedWords.keyword);
      var reservedWordsStrictSet = new Set(reservedWords.strict);
      var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }
      function isKeyword(word) {
        return keywords2.has(word);
      }
    }
  });

  // node_modules/@babel/helper-validator-identifier/lib/index.js
  var require_lib = __commonJS({
    "node_modules/@babel/helper-validator-identifier/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "isIdentifierChar", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierChar;
        }
      });
      Object.defineProperty(exports, "isIdentifierName", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierName;
        }
      });
      Object.defineProperty(exports, "isIdentifierStart", {
        enumerable: true,
        get: function() {
          return _identifier.isIdentifierStart;
        }
      });
      Object.defineProperty(exports, "isKeyword", {
        enumerable: true,
        get: function() {
          return _keyword.isKeyword;
        }
      });
      Object.defineProperty(exports, "isReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictBindReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictBindReservedWord;
        }
      });
      Object.defineProperty(exports, "isStrictReservedWord", {
        enumerable: true,
        get: function() {
          return _keyword.isStrictReservedWord;
        }
      });
      var _identifier = require_identifier();
      var _keyword = require_keyword2();
    }
  });

  // node_modules/@babel/highlight/node_modules/escape-string-regexp/index.js
  var require_escape_string_regexp = __commonJS({
    "node_modules/@babel/highlight/node_modules/escape-string-regexp/index.js"(exports, module) {
      init_globals();
      var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
      module.exports = function(str) {
        if (typeof str !== "string") {
          throw new TypeError("Expected a string");
        }
        return str.replace(matchOperatorsRe, "\\$&");
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-name/index.js
  var require_color_name2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-name/index.js"(exports, module) {
      init_globals();
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/conversions.js
  var require_conversions2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/conversions.js"(exports, module) {
      init_globals();
      var cssKeywords = require_color_name2();
      var reverseKeywords = {};
      for (key in cssKeywords) {
        if (cssKeywords.hasOwnProperty(key)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
      }
      var key;
      var convert = module.exports = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      for (model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          channels = convert[model].channels;
          labels = convert[model].labels;
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
      }
      var channels;
      var labels;
      var model;
      convert.rgb.hsl = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h;
        var s;
        var l;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        var rdif;
        var gdif;
        var bdif;
        var h;
        var s;
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var v = Math.max(r, g, b);
        var diff = v - Math.min(r, g, b);
        var diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var h = convert.rgb.hsl(rgb)[0];
        var w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var c;
        var m;
        var y;
        var k;
        k = Math.min(1 - r, 1 - g, 1 - b);
        c = (1 - r - k) / (1 - k) || 0;
        m = (1 - g - k) / (1 - k) || 0;
        y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
      }
      convert.rgb.keyword = function(rgb) {
        var reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        var currentClosestDistance = Infinity;
        var currentClosestKeyword;
        for (var keyword in cssKeywords) {
          if (cssKeywords.hasOwnProperty(keyword)) {
            var value = cssKeywords[keyword];
            var distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        var xyz = convert.rgb.xyz(rgb);
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        var h = hsl[0] / 360;
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var t1;
        var t2;
        var t3;
        var rgb;
        var val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        t1 = 2 * l - t2;
        rgb = [0, 0, 0];
        for (var i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        var h = hsl[0];
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var smin = s;
        var lmin = Math.max(l, 0.01);
        var sv;
        var v;
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (l + s) / 2;
        sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        var h = hsv[0] / 60;
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var hi = Math.floor(h) % 6;
        var f = h - Math.floor(h);
        var p = 255 * v * (1 - s);
        var q = 255 * v * (1 - s * f);
        var t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        var h = hsv[0];
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var vmin = Math.max(v, 0.01);
        var lmin;
        var sl;
        var l;
        l = (2 - s) * v;
        lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        var h = hwb[0] / 360;
        var wh = hwb[1] / 100;
        var bl = hwb[2] / 100;
        var ratio = wh + bl;
        var i;
        var v;
        var f;
        var n;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        i = Math.floor(6 * h);
        v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        n = wh + f * (v - wh);
        var r;
        var g;
        var b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        var c = cmyk[0] / 100;
        var m = cmyk[1] / 100;
        var y = cmyk[2] / 100;
        var k = cmyk[3] / 100;
        var r;
        var g;
        var b;
        r = 1 - Math.min(1, c * (1 - k) + k);
        g = 1 - Math.min(1, m * (1 - k) + k);
        b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        var x = xyz[0] / 100;
        var y = xyz[1] / 100;
        var z = xyz[2] / 100;
        var r;
        var g;
        var b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var x;
        var y;
        var z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        var y2 = Math.pow(y, 3);
        var x2 = Math.pow(x, 3);
        var z2 = Math.pow(z, 3);
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var hr;
        var h;
        var c;
        hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        var l = lch[0];
        var c = lch[1];
        var h = lch[2];
        var a;
        var b;
        var hr;
        hr = h / 360 * 2 * Math.PI;
        a = c * Math.cos(hr);
        b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        var color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        var mult = (~~(args > 50) + 1) * 0.5;
        var r = (color & 1) * mult * 255;
        var g = (color >> 1 & 1) * mult * 255;
        var b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          var c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        var rem;
        var r = Math.floor(args / 36) / 5 * 255;
        var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        var b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        var colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map(function(char) {
            return char + char;
          }).join("");
        }
        var integer = parseInt(colorString, 16);
        var r = integer >> 16 & 255;
        var g = integer >> 8 & 255;
        var b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var max = Math.max(Math.max(r, g), b);
        var min = Math.min(Math.min(r, g), b);
        var chroma = max - min;
        var grayscale;
        var hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma + 4;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var c = 1;
        var f = 0;
        if (l < 0.5) {
          c = 2 * s * l;
        } else {
          c = 2 * s * (1 - l);
        }
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var c = s * v;
        var f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        var h = hcg[0] / 360;
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        var pure = [0, 0, 0];
        var hi = h % 1 * 6;
        var v = hi % 1;
        var w = 1 - v;
        var mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        var f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var l = g * (1 - c) + 0.5 * c;
        var s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        var w = hwb[1] / 100;
        var b = hwb[2] / 100;
        var v = 1 - b;
        var c = v - w;
        var g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = convert.gray.hsv = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        var val = Math.round(gray[0] / 100 * 255) & 255;
        var integer = (val << 16) + (val << 8) + val;
        var string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/route.js
  var require_route2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/route.js"(exports, module) {
      init_globals();
      var conversions = require_conversions2();
      function buildGraph() {
        var graph = {};
        var models = Object.keys(conversions);
        for (var len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        var graph = buildGraph();
        var queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          var current = queue.pop();
          var adjacents = Object.keys(conversions[current]);
          for (var len = adjacents.length, i = 0; i < len; i++) {
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel];
        var fn = conversions[graph[toModel].parent][toModel];
        var cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        var graph = deriveBFS(fromModel);
        var conversion = {};
        var models = Object.keys(graph);
        for (var len = models.length, i = 0; i < len; i++) {
          var toModel = models[i];
          var node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/color-convert/index.js
  var require_color_convert2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/color-convert/index.js"(exports, module) {
      init_globals();
      var conversions = require_conversions2();
      var route = require_route2();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          var result = fn(args);
          if (typeof result === "object") {
            for (var len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach(function(fromModel) {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        var routes = route(fromModel);
        var routeModels = Object.keys(routes);
        routeModels.forEach(function(toModel) {
          var fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/@babel/highlight/node_modules/ansi-styles/index.js
  var require_ansi_styles2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/ansi-styles/index.js"(exports, module) {
      init_globals();
      var colorConvert = require_color_convert2();
      var wrapAnsi16 = (fn, offset) => function() {
        const code2 = fn.apply(colorConvert, arguments);
        return `\x1B[${code2 + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => function() {
        const code2 = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};5;${code2}m`;
      };
      var wrapAnsi16m = (fn, offset) => function() {
        const rgb = fn.apply(colorConvert, arguments);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.grey = styles.color.gray;
        for (const groupName of Object.keys(styles)) {
          const group = styles[groupName];
          for (const styleName of Object.keys(group)) {
            const style = group[styleName];
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
        }
        const ansi2ansi = (n) => n;
        const rgb2rgb = (r, g, b) => [r, g, b];
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0)
        };
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0)
        };
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10)
        };
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10)
        };
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        for (let key of Object.keys(colorConvert)) {
          if (typeof colorConvert[key] !== "object") {
            continue;
          }
          const suite = colorConvert[key];
          if (key === "ansi16") {
            key = "ansi";
          }
          if ("ansi16" in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
          }
          if ("ansi256" in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
          }
          if ("rgb" in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
          }
        }
        return styles;
      }
      Object.defineProperty(module, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/@babel/highlight/node_modules/supports-color/browser.js
  var require_browser3 = __commonJS({
    "node_modules/@babel/highlight/node_modules/supports-color/browser.js"(exports, module) {
      init_globals();
      module.exports = {
        stdout: false,
        stderr: false
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/chalk/templates.js
  var require_templates2 = __commonJS({
    "node_modules/@babel/highlight/node_modules/chalk/templates.js"(exports, module) {
      init_globals();
      var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, args) {
        const results = [];
        const chunks = args.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          if (!isNaN(chunk)) {
            results.push(Number(chunk));
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk5, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk5;
        for (const styleName of Object.keys(enabled)) {
          if (Array.isArray(enabled[styleName])) {
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            if (enabled[styleName].length > 0) {
              current = current[styleName].apply(current, enabled[styleName]);
            } else {
              current = current[styleName];
            }
          }
        }
        return current;
      }
      module.exports = (chalk5, tmp) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
          if (escapeChar) {
            chunk.push(unescape(escapeChar));
          } else if (style) {
            const str = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? str : buildStyle(chalk5, styles)(str));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk5, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(chr);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMsg);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/@babel/highlight/node_modules/chalk/index.js
  var require_chalk = __commonJS({
    "node_modules/@babel/highlight/node_modules/chalk/index.js"(exports, module) {
      init_globals();
      var escapeStringRegexp = require_escape_string_regexp();
      var ansiStyles = require_ansi_styles2();
      var stdoutColor = require_browser3().stdout;
      var template = require_templates2();
      var isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
      var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
      var skipModels = /* @__PURE__ */ new Set(["gray"]);
      var styles = /* @__PURE__ */ Object.create(null);
      function applyOptions(obj, options2) {
        options2 = options2 || {};
        const scLevel = stdoutColor ? stdoutColor.level : 0;
        obj.level = options2.level === void 0 ? scLevel : options2.level;
        obj.enabled = "enabled" in options2 ? options2.enabled : obj.level > 0;
      }
      function Chalk(options2) {
        if (!this || !(this instanceof Chalk) || this.template) {
          const chalk5 = {};
          applyOptions(chalk5, options2);
          chalk5.template = function() {
            const args = [].slice.call(arguments);
            return chalkTag.apply(null, [chalk5.template].concat(args));
          };
          Object.setPrototypeOf(chalk5, Chalk.prototype);
          Object.setPrototypeOf(chalk5.template, chalk5);
          chalk5.template.constructor = Chalk;
          return chalk5.template;
        }
        applyOptions(this, options2);
      }
      if (isSimpleWindowsTerm) {
        ansiStyles.blue.open = "\x1B[94m";
      }
      for (const key of Object.keys(ansiStyles)) {
        ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
        styles[key] = {
          get() {
            const codes = ansiStyles[key];
            return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
          }
        };
      }
      styles.visible = {
        get() {
          return build.call(this, this._styles || [], true, "visible");
        }
      };
      ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
      for (const model of Object.keys(ansiStyles.color.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        styles[model] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.color.close,
                closeRe: ansiStyles.color.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
      for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
        if (skipModels.has(model)) {
          continue;
        }
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const level = this.level;
            return function() {
              const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
              const codes = {
                open,
                close: ansiStyles.bgColor.close,
                closeRe: ansiStyles.bgColor.closeRe
              };
              return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, styles);
      function build(_styles, _empty, key) {
        const builder = function() {
          return applyStyle.apply(builder, arguments);
        };
        builder._styles = _styles;
        builder._empty = _empty;
        const self2 = this;
        Object.defineProperty(builder, "level", {
          enumerable: true,
          get() {
            return self2.level;
          },
          set(level) {
            self2.level = level;
          }
        });
        Object.defineProperty(builder, "enabled", {
          enumerable: true,
          get() {
            return self2.enabled;
          },
          set(enabled) {
            self2.enabled = enabled;
          }
        });
        builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
        builder.__proto__ = proto;
        return builder;
      }
      function applyStyle() {
        const args = arguments;
        const argsLen = args.length;
        let str = String(arguments[0]);
        if (argsLen === 0) {
          return "";
        }
        if (argsLen > 1) {
          for (let a = 1; a < argsLen; a++) {
            str += " " + args[a];
          }
        }
        if (!this.enabled || this.level <= 0 || !str) {
          return this._empty ? "" : str;
        }
        const originalDim = ansiStyles.dim.open;
        if (isSimpleWindowsTerm && this.hasGrey) {
          ansiStyles.dim.open = "";
        }
        for (const code2 of this._styles.slice().reverse()) {
          str = code2.open + str.replace(code2.closeRe, code2.open) + code2.close;
          str = str.replace(/\r?\n/g, `${code2.close}$&${code2.open}`);
        }
        ansiStyles.dim.open = originalDim;
        return str;
      }
      function chalkTag(chalk5, strings) {
        if (!Array.isArray(strings)) {
          return [].slice.call(arguments, 1).join(" ");
        }
        const args = [].slice.call(arguments, 2);
        const parts = [strings.raw[0]];
        for (let i = 1; i < strings.length; i++) {
          parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
          parts.push(String(strings.raw[i]));
        }
        return template(chalk5, parts.join(""));
      }
      Object.defineProperties(Chalk.prototype, styles);
      module.exports = Chalk();
      module.exports.supportsColor = stdoutColor;
      module.exports.default = module.exports;
    }
  });

  // node_modules/@babel/highlight/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/@babel/highlight/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = highlight;
      exports.getChalk = getChalk;
      exports.shouldHighlight = shouldHighlight;
      var _jsTokens = require_js_tokens();
      var _helperValidatorIdentifier = require_lib();
      var _chalk = require_chalk();
      var sometimesKeywords = /* @__PURE__ */ new Set(["as", "async", "from", "get", "of", "set"]);
      function getDefs(chalk5) {
        return {
          keyword: chalk5.cyan,
          capitalized: chalk5.yellow,
          jsxIdentifier: chalk5.yellow,
          punctuator: chalk5.yellow,
          number: chalk5.magenta,
          string: chalk5.green,
          regex: chalk5.magenta,
          comment: chalk5.grey,
          invalid: chalk5.white.bgRed.bold
        };
      }
      var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
      var BRACKET = /^[()[\]{}]$/;
      var tokenize;
      {
        const JSX_TAG = /^[a-z][\w-]*$/i;
        const getTokenType = function(token, offset, text) {
          if (token.type === "name") {
            if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
              return "keyword";
            }
            if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) == "</")) {
              return "jsxIdentifier";
            }
            if (token.value[0] !== token.value[0].toLowerCase()) {
              return "capitalized";
            }
          }
          if (token.type === "punctuator" && BRACKET.test(token.value)) {
            return "bracket";
          }
          if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
            return "punctuator";
          }
          return token.type;
        };
        tokenize = function* (text) {
          let match;
          while (match = _jsTokens.default.exec(text)) {
            const token = _jsTokens.matchToToken(match);
            yield {
              type: getTokenType(token, match.index, text),
              value: token.value
            };
          }
        };
      }
      function highlightTokens(defs, text) {
        let highlighted = "";
        for (const {
          type: type2,
          value
        } of tokenize(text)) {
          const colorize = defs[type2];
          if (colorize) {
            highlighted += value.split(NEWLINE).map((str) => colorize(str)).join("\n");
          } else {
            highlighted += value;
          }
        }
        return highlighted;
      }
      function shouldHighlight(options2) {
        return !!_chalk.supportsColor || options2.forceColor;
      }
      function getChalk(options2) {
        return options2.forceColor ? new _chalk.constructor({
          enabled: true,
          level: 1
        }) : _chalk;
      }
      function highlight(code2, options2 = {}) {
        if (code2 !== "" && shouldHighlight(options2)) {
          const chalk5 = getChalk(options2);
          const defs = getDefs(chalk5);
          return highlightTokens(defs, code2);
        } else {
          return code2;
        }
      }
    }
  });

  // node_modules/@babel/code-frame/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/@babel/code-frame/lib/index.js"(exports) {
      init_globals();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.codeFrameColumns = codeFrameColumns2;
      exports.default = _default;
      var _highlight = require_lib2();
      var deprecationWarningShown = false;
      function getDefs(chalk5) {
        return {
          gutter: chalk5.grey,
          marker: chalk5.red.bold,
          message: chalk5.red.bold
        };
      }
      var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
      function getMarkerLines(loc, source2, opts) {
        const startLoc = Object.assign({
          column: 0,
          line: -1
        }, loc.start);
        const endLoc = Object.assign({}, startLoc, loc.end);
        const {
          linesAbove = 2,
          linesBelow = 3
        } = opts || {};
        const startLine = startLoc.line;
        const startColumn = startLoc.column;
        const endLine = endLoc.line;
        const endColumn = endLoc.column;
        let start = Math.max(startLine - (linesAbove + 1), 0);
        let end = Math.min(source2.length, endLine + linesBelow);
        if (startLine === -1) {
          start = 0;
        }
        if (endLine === -1) {
          end = source2.length;
        }
        const lineDiff = endLine - startLine;
        const markerLines = {};
        if (lineDiff) {
          for (let i = 0; i <= lineDiff; i++) {
            const lineNumber = i + startLine;
            if (!startColumn) {
              markerLines[lineNumber] = true;
            } else if (i === 0) {
              const sourceLength = source2[lineNumber - 1].length;
              markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
            } else if (i === lineDiff) {
              markerLines[lineNumber] = [0, endColumn];
            } else {
              const sourceLength = source2[lineNumber - i].length;
              markerLines[lineNumber] = [0, sourceLength];
            }
          }
        } else {
          if (startColumn === endColumn) {
            if (startColumn) {
              markerLines[startLine] = [startColumn, 0];
            } else {
              markerLines[startLine] = true;
            }
          } else {
            markerLines[startLine] = [startColumn, endColumn - startColumn];
          }
        }
        return {
          start,
          end,
          markerLines
        };
      }
      function codeFrameColumns2(rawLines, loc, opts = {}) {
        const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
        const chalk5 = (0, _highlight.getChalk)(opts);
        const defs = getDefs(chalk5);
        const maybeHighlight = (chalkFn, string) => {
          return highlighted ? chalkFn(string) : string;
        };
        const lines = rawLines.split(NEWLINE);
        const {
          start,
          end,
          markerLines
        } = getMarkerLines(loc, lines, opts);
        const hasColumns = loc.start && typeof loc.start.column === "number";
        const numberMaxWidth = String(end).length;
        const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
        let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
          const number2 = start + 1 + index;
          const paddedNumber = ` ${number2}`.slice(-numberMaxWidth);
          const gutter = ` ${paddedNumber} |`;
          const hasMarker = markerLines[number2];
          const lastMarkerLine = !markerLines[number2 + 1];
          if (hasMarker) {
            let markerLine = "";
            if (Array.isArray(hasMarker)) {
              const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
              const numberOfMarkers = hasMarker[1] || 1;
              markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
              if (lastMarkerLine && opts.message) {
                markerLine += " " + maybeHighlight(defs.message, opts.message);
              }
            }
            return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
          } else {
            return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
          }
        }).join("\n");
        if (opts.message && !hasColumns) {
          frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
        }
        if (highlighted) {
          return chalk5.reset(frame);
        } else {
          return frame;
        }
      }
      function _default(rawLines, lineNumber, colNumber, opts = {}) {
        if (!deprecationWarningShown) {
          deprecationWarningShown = true;
          const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
          if (process.emitWarning) {
            process.emitWarning(message, "DeprecationWarning");
          } else {
            const deprecationError = new Error(message);
            deprecationError.name = "DeprecationWarning";
            console.warn(new Error(message));
          }
        }
        colNumber = Math.max(colNumber, 0);
        const location = {
          start: {
            column: colNumber,
            line: lineNumber
          }
        };
        return codeFrameColumns2(rawLines, location, opts);
      }
    }
  });

  // node_modules/leven/index.js
  var require_leven = __commonJS({
    "node_modules/leven/index.js"(exports, module) {
      init_globals();
      var array = [];
      var charCodeCache = [];
      var leven2 = (left, right) => {
        if (left === right) {
          return 0;
        }
        const swap = left;
        if (left.length > right.length) {
          left = right;
          right = swap;
        }
        let leftLength = left.length;
        let rightLength = right.length;
        while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {
          leftLength--;
          rightLength--;
        }
        let start = 0;
        while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {
          start++;
        }
        leftLength -= start;
        rightLength -= start;
        if (leftLength === 0) {
          return rightLength;
        }
        let bCharCode;
        let result;
        let temp;
        let temp2;
        let i = 0;
        let j = 0;
        while (i < leftLength) {
          charCodeCache[i] = left.charCodeAt(start + i);
          array[i] = ++i;
        }
        while (j < rightLength) {
          bCharCode = right.charCodeAt(start + j);
          temp = j++;
          result = j;
          for (i = 0; i < leftLength; i++) {
            temp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;
            temp = array[i];
            result = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;
          }
        }
        return result;
      };
      module.exports = leven2;
      module.exports.default = leven2;
    }
  });

  // node_modules/jsonpointer/jsonpointer.js
  var require_jsonpointer = __commonJS({
    "node_modules/jsonpointer/jsonpointer.js"(exports) {
      init_globals();
      var hasExcape = /~/;
      var escapeMatcher = /~[01]/g;
      function escapeReplacer(m) {
        switch (m) {
          case "~1":
            return "/";
          case "~0":
            return "~";
        }
        throw new Error("Invalid tilde escape: " + m);
      }
      function untilde(str) {
        if (!hasExcape.test(str))
          return str;
        return str.replace(escapeMatcher, escapeReplacer);
      }
      function setter(obj, pointer2, value) {
        var part;
        var hasNextPart;
        for (var p = 1, len = pointer2.length; p < len; ) {
          if (pointer2[p] === "constructor" || pointer2[p] === "prototype" || pointer2[p] === "__proto__")
            return obj;
          part = untilde(pointer2[p++]);
          hasNextPart = len > p;
          if (typeof obj[part] === "undefined") {
            if (Array.isArray(obj) && part === "-") {
              part = obj.length;
            }
            if (hasNextPart) {
              if (pointer2[p] !== "" && pointer2[p] < Infinity || pointer2[p] === "-")
                obj[part] = [];
              else
                obj[part] = {};
            }
          }
          if (!hasNextPart)
            break;
          obj = obj[part];
        }
        var oldValue = obj[part];
        if (value === void 0)
          delete obj[part];
        else
          obj[part] = value;
        return oldValue;
      }
      function compilePointer(pointer2) {
        if (typeof pointer2 === "string") {
          pointer2 = pointer2.split("/");
          if (pointer2[0] === "")
            return pointer2;
          throw new Error("Invalid JSON pointer.");
        } else if (Array.isArray(pointer2)) {
          for (const part of pointer2) {
            if (typeof part !== "string" && typeof part !== "number") {
              throw new Error("Invalid JSON pointer. Must be of type string or number.");
            }
          }
          return pointer2;
        }
        throw new Error("Invalid JSON pointer.");
      }
      function get2(obj, pointer2) {
        if (typeof obj !== "object")
          throw new Error("Invalid input object.");
        pointer2 = compilePointer(pointer2);
        var len = pointer2.length;
        if (len === 1)
          return obj;
        for (var p = 1; p < len; ) {
          obj = obj[untilde(pointer2[p++])];
          if (len === p)
            return obj;
          if (typeof obj !== "object")
            return void 0;
        }
      }
      function set(obj, pointer2, value) {
        if (typeof obj !== "object")
          throw new Error("Invalid input object.");
        pointer2 = compilePointer(pointer2);
        if (pointer2.length === 0)
          throw new Error("Invalid JSON pointer for set.");
        return setter(obj, pointer2, value);
      }
      function compile(pointer2) {
        var compiled = compilePointer(pointer2);
        return {
          get: function(object) {
            return get2(object, compiled);
          },
          set: function(object, value) {
            return set(object, compiled, value);
          }
        };
      }
      exports.get = get2;
      exports.set = set;
      exports.compile = compile;
    }
  });

  // gen/items/zotero.json
  var require_zotero = __commonJS({
    "gen/items/zotero.json"(exports, module) {
      module.exports = {
        type: "object",
        discriminator: {
          propertyName: "itemType"
        },
        required: [
          "itemType"
        ],
        oneOf: [
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "annotation"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "artwork"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              artworkMedium: {
                type: "string"
              },
              artworkSize: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "attachment"
              },
              accessDate: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "audioRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              label: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bill"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              billNumber: {
                type: "string"
              },
              code: {
                type: "string"
              },
              codePages: {
                type: "string"
              },
              codeVolume: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "blogPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              blogTitle: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "book"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bookSection"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "case"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              caseName: {
                type: "string"
              },
              court: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateDecided: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              docketNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              firstPage: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              reporterVolume: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "classic"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "computerProgram"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              company: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              programmingLanguage: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              system: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "conferencePaper"
              },
              DOI: {
                type: "string"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              conferenceName: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              proceedingsTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "dictionaryEntry"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              dictionaryTitle: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "document"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "email"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              subject: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "encyclopediaArticle"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              encyclopediaTitle: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "film"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              distributor: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "forumPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              forumTitle: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              postType: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "gazette"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "hearing"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              committee: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              documentNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "instantMessage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "interview"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              interviewMedium: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "journalArticle"
              },
              DOI: {
                type: "string"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesText: {
                type: "string"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "legalCommentary"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "letter"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              letterType: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "magazineArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "manuscript"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              manuscriptType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "map"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              mapType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              scale: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "newspaperArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "note"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              note: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "patent"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              applicationNumber: {
                type: "string"
              },
              assignee: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              country: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              filingDate: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issueDate: {
                type: "string"
              },
              issuingAuthority: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              legalStatus: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              patentNumber: {
                type: "string"
              },
              place: {
                type: "string"
              },
              priorityNumbers: {
                type: "string"
              },
              references: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "podcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioFileType: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "preprint"
              },
              DOI: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveID: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              citationKey: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              repository: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "presentation"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              meetingName: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              presentationType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "radioBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "regulation"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "report"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              institution: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reportNumber: {
                type: "string"
              },
              reportType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "standard"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "statute"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "thesis"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              thesisType: {
                type: "string"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              university: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "treaty"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "tvBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "videoRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              studio: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "webpage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          }
        ],
        $defs: {
          attachments: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                path: {
                  type: "string"
                },
                accessDate: {
                  type: "string"
                },
                contentType: {
                  type: "string"
                },
                itemType: {
                  type: "string"
                },
                mimeType: {
                  type: "string"
                },
                key: {
                  type: "string"
                },
                linkMode: {
                  type: "string"
                },
                title: {
                  type: "string"
                },
                uri: {
                  type: "string"
                },
                url: {
                  type: "string"
                }
              }
            }
          },
          creators: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                creatorType: {
                  type: "string"
                },
                firstName: {
                  type: "string"
                },
                lastName: {
                  type: "string"
                },
                fieldMode: {
                  type: "number"
                },
                multi: {
                  type: "object"
                }
              }
            }
          },
          notes: {
            type: "array",
            items: {
              type: "string"
            }
          },
          tags: {
            type: "array",
            items: {
              oneOf: [
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    tag: {
                      type: "string"
                    },
                    type: {
                      type: "number"
                    }
                  },
                  required: [
                    "tag"
                  ]
                },
                {
                  type: "string"
                }
              ]
            }
          },
          edition: {
            oneOf: [
              {
                type: "string"
              },
              {
                type: "number"
              }
            ]
          },
          multi: {
            type: "object"
          },
          seeAlso: {
            type: "array"
          }
        }
      };
    }
  });

  // gen/items/jurism.json
  var require_jurism = __commonJS({
    "gen/items/jurism.json"(exports, module) {
      module.exports = {
        type: "object",
        discriminator: {
          propertyName: "itemType"
        },
        required: [
          "itemType"
        ],
        oneOf: [
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "annotation"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "artwork"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              artworkMedium: {
                type: "string"
              },
              artworkSize: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "attachment"
              },
              accessDate: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "audioRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              album: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              label: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              opus: {
                type: "string"
              },
              originalDate: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              release: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bill"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              assemblyNumber: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              billNumber: {
                type: "string"
              },
              code: {
                type: "string"
              },
              codePages: {
                type: "string"
              },
              codeVolume: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              resolutionLabel: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesNumber: {
                type: "string"
              },
              session: {
                type: "string"
              },
              sessionType: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "blogPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              blogTitle: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "book"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              volumeTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "bookSection"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookAbbreviation: {
                type: "string"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              volumeTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "case"
              },
              DOI: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              adminFlag: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              caseName: {
                type: "string"
              },
              court: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateDecided: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              division: {
                type: "string"
              },
              docketNumber: {
                type: "string"
              },
              documentName: {
                type: "string"
              },
              documentNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              filingDate: {
                type: "string"
              },
              firstPage: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reign: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              reporterVolume: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              supplementName: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              yearAsVolume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "classic"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              manuscriptType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "computerProgram"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              company: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              programmingLanguage: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              system: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "conferencePaper"
              },
              DOI: {
                type: "string"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              conferenceDate: {
                type: "string"
              },
              conferenceName: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              institution: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              proceedingsTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "dictionaryEntry"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              dictionaryTitle: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "document"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "email"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              subject: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "encyclopediaArticle"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              encyclopediaTitle: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "film"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              distributor: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "forumPost"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              forumTitle: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              postType: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "gazette"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              regnalYear: {
                type: "string"
              },
              reign: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "hearing"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              assemblyNumber: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              committee: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              documentNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              meetingName: {
                type: "string"
              },
              meetingNumber: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              resolutionLabel: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesNumber: {
                type: "string"
              },
              session: {
                type: "string"
              },
              sessionType: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "instantMessage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "interview"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              interviewMedium: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "journalArticle"
              },
              DOI: {
                type: "string"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesText: {
                type: "string"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              status: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "legalCommentary"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookAbbreviation: {
                type: "string"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              journalAbbreviation: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              series: {
                type: "string"
              },
              seriesNumber: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              volumeTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "letter"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              letterType: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "magazineArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issue: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "manuscript"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              manuscriptType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "map"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              mapType: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              scale: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "newspaperArticle"
              },
              ISSN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              court: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              edition: {
                $ref: "#/$defs/edition"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              newsCaseDate: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "note"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              note: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "patent"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              applicationNumber: {
                type: "string"
              },
              assignee: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              country: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              filingDate: {
                type: "string"
              },
              genre: {
                type: "string"
              },
              id: {
                type: "string"
              },
              issueDate: {
                type: "string"
              },
              issuingAuthority: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legalStatus: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              patentNumber: {
                type: "string"
              },
              place: {
                type: "string"
              },
              priorityDate: {
                type: "string"
              },
              priorityNumbers: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publicationNumber: {
                type: "string"
              },
              references: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "podcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioFileType: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "preprint"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              tags: {
                $ref: "#/$defs/tags"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "presentation"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveCollection: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              meetingName: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              place: {
                type: "string"
              },
              presentationType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "radioBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              audioRecordingFormat: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "regulation"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              gazetteFlag: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              legislativeBody: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              regulationType: {
                type: "string"
              },
              regulatoryBody: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "report"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              assemblyNumber: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              bookTitle: {
                type: "string"
              },
              callNumber: {
                type: "string"
              },
              committee: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              institution: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reportNumber: {
                type: "string"
              },
              reportType: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesNumber: {
                type: "string"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              status: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "standard"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "statute"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              code: {
                type: "string"
              },
              codeNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateAmended: {
                type: "string"
              },
              dateEnacted: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              gazetteFlag: {
                type: "string"
              },
              history: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              jurisdiction: {
                type: "string"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              nameOfAct: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              originalDate: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              publicLawNumber: {
                type: "string"
              },
              publicationDate: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              regnalYear: {
                type: "string"
              },
              reign: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              session: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "thesis"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numPages: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              thesisType: {
                type: "string"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              university: {
                type: "string"
              },
              url: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "treaty"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              adoptionDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              openingDate: {
                type: "string"
              },
              pages: {
                type: "string"
              },
              parentTreaty: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              reporter: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              section: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              signingDate: {
                type: "string"
              },
              supplementName: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              treatyNumber: {
                type: "string"
              },
              url: {
                type: "string"
              },
              versionNumber: {
                type: "string"
              },
              volume: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "tvBroadcast"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              episodeNumber: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              network: {
                type: "string"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              number: {
                type: "string"
              },
              place: {
                type: "string"
              },
              programTitle: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "videoRecording"
              },
              ISBN: {
                type: "string"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              archive: {
                type: "string"
              },
              archiveLocation: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              callNumber: {
                type: "string"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              libraryCatalog: {
                type: "string"
              },
              medium: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              numberOfVolumes: {
                type: "string"
              },
              place: {
                type: "string"
              },
              publicationTitle: {
                type: "string"
              },
              publisher: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              runningTime: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              seriesTitle: {
                type: "string"
              },
              shortTitle: {
                type: "string"
              },
              studio: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              url: {
                type: "string"
              },
              videoRecordingFormat: {
                type: "string"
              },
              volume: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              }
            }
          },
          {
            type: "object",
            additionalProperties: false,
            properties: {
              itemType: {
                const: "webpage"
              },
              abstractNote: {
                type: "string"
              },
              accessDate: {
                type: "string"
              },
              attachments: {
                $ref: "#/$defs/attachments"
              },
              creators: {
                $ref: "#/$defs/creators"
              },
              date: {
                type: "string"
              },
              dateAdded: {
                type: "string"
              },
              dateModified: {
                type: "string"
              },
              extra: {
                type: "string"
              },
              id: {
                type: "string"
              },
              itemID: {
                type: "number"
              },
              language: {
                type: "string"
              },
              multi: {
                $ref: "#/$defs/multi"
              },
              notes: {
                $ref: "#/$defs/notes"
              },
              publicationTitle: {
                type: "string"
              },
              rights: {
                type: "string"
              },
              seeAlso: {
                $ref: "#/$defs/seeAlso"
              },
              shortTitle: {
                type: "string"
              },
              tags: {
                $ref: "#/$defs/tags"
              },
              title: {
                type: "string"
              },
              type: {
                type: "string"
              },
              url: {
                type: "string"
              },
              websiteTitle: {
                type: "string"
              },
              websiteType: {
                type: "string"
              }
            }
          }
        ],
        $defs: {
          attachments: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                path: {
                  type: "string"
                },
                accessDate: {
                  type: "string"
                },
                contentType: {
                  type: "string"
                },
                itemType: {
                  type: "string"
                },
                mimeType: {
                  type: "string"
                },
                key: {
                  type: "string"
                },
                linkMode: {
                  type: "string"
                },
                title: {
                  type: "string"
                },
                uri: {
                  type: "string"
                },
                url: {
                  type: "string"
                }
              }
            }
          },
          creators: {
            type: "array",
            items: {
              type: "object",
              additionalProperties: false,
              properties: {
                creatorType: {
                  type: "string"
                },
                firstName: {
                  type: "string"
                },
                lastName: {
                  type: "string"
                },
                fieldMode: {
                  type: "number"
                },
                multi: {
                  type: "object"
                }
              }
            }
          },
          notes: {
            type: "array",
            items: {
              type: "string"
            }
          },
          tags: {
            type: "array",
            items: {
              oneOf: [
                {
                  type: "object",
                  additionalProperties: false,
                  properties: {
                    tag: {
                      type: "string"
                    },
                    type: {
                      type: "number"
                    }
                  },
                  required: [
                    "tag"
                  ]
                },
                {
                  type: "string"
                }
              ]
            }
          },
          edition: {
            oneOf: [
              {
                type: "string"
              },
              {
                type: "number"
              }
            ]
          },
          multi: {
            type: "object"
          },
          seeAlso: {
            type: "array"
          }
        }
      };
    }
  });

  // node_modules/citeproc/citeproc_commonjs.js
  var require_citeproc_commonjs = __commonJS({
    "node_modules/citeproc/citeproc_commonjs.js"(exports, module) {
      init_globals();
      var CSL2 = {
        PROCESSOR_VERSION: "1.4.61",
        error: function(str) {
          if (typeof Error === "undefined") {
            throw new Error("citeproc-js error: " + str);
          } else {
            throw "citeproc-js error: " + str;
          }
        },
        debug: function(str) {
          if (typeof console === "undefined") {
            dump("CSL: " + str + "\n");
          } else {
            console.log("citeproc-js warning: " + str);
          }
        },
        toLocaleUpperCase(str) {
          var arr = this.tmp.lang_array;
          try {
            str = str.toLocaleUpperCase(arr);
          } catch (e) {
            str = str.toUpperCase();
          }
          return str;
        },
        toLocaleLowerCase(str) {
          var arr = this.tmp.lang_array;
          try {
            str = str.toLocaleLowerCase(arr);
          } catch (e) {
            str = str.toLowerCase();
          }
          return str;
        },
        LOCATOR_LABELS_REGEXP: new RegExp("^((vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\\.)\\s+(.*)"),
        STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
        STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\s*[.,;]*\s*(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
        STATUTE_SUBDIV_STRINGS: {
          "vrs.": "verse",
          "sv.": "sub-verbo",
          "subpara.": "subparagraph",
          "op.": "opus",
          "subch.": "subchapter",
          "add.": "addendum",
          "amend.": "amendment",
          "annot.": "annotation",
          "app.": "appendix",
          "art.": "article",
          "bibliog.": "bibliography",
          "bk.": "book",
          "ch.": "chapter",
          "cl.": "clause",
          "col.": "column",
          "cmt.": "comment",
          "dec.": "decision",
          "dept.": "department",
          "ex.": "example",
          "fig.": "figure",
          "fld.": "field",
          "fol.": "folio",
          "n.": "note",
          "hypo.": "hypothetical",
          "illus.": "illustration",
          "intro.": "introduction",
          "l.": "line",
          "no.": "issue",
          "p.": "page",
          "pp.": "page",
          "para.": "paragraph",
          "pt.": "part",
          "pmbl.": "preamble",
          "princ.": "principle",
          "pub.": "publication",
          "r.": "rule",
          "rn.": "randnummer",
          "sched.": "schedule",
          "sec.": "section",
          "ser.": "series,",
          "subdiv.": "subdivision",
          "subsec.": "subsection",
          "supp.": "supplement",
          "tbl.": "table",
          "tit.": "title",
          "vol.": "volume"
        },
        STATUTE_SUBDIV_STRINGS_REVERSE: {
          "verse": "vrs.",
          "sub-verbo": "sv.",
          "sub verbo": "sv.",
          "subparagraph": "subpara.",
          "opus": "op.",
          "subchapter": "subch.",
          "addendum": "add.",
          "amendment": "amend.",
          "annotation": "annot.",
          "appendix": "app.",
          "article": "art.",
          "bibliography": "bibliog.",
          "book": "bk.",
          "chapter": "ch.",
          "clause": "cl.",
          "column": "col.",
          "comment": "cmt.",
          "decision": "dec.",
          "department": "dept.",
          "example": "ex.",
          "figure": "fig.",
          "field": "fld.",
          "folio": "fol.",
          "note": "n.",
          "hypothetical": "hypo.",
          "illustration": "illus.",
          "introduction": "intro.",
          "line": "l.",
          "issue": "no.",
          "page": "p.",
          "paragraph": "para.",
          "part": "pt.",
          "preamble": "pmbl.",
          "principle": "princ.",
          "publication": "pub.",
          "rule": "r.",
          "randnummer": "rn.",
          "schedule": "sched.",
          "section": "sec.",
          "series,": "ser.",
          "subdivision": "subdiv.",
          "subsection": "subsec.",
          "supplement": "supp.",
          "table": "tbl.",
          "title": "tit.",
          "volume": "vol."
        },
        LOCATOR_LABELS_MAP: {
          "vrs": "verse",
          "sv": "sub-verbo",
          "subpara": "subparagraph",
          "op": "opus",
          "subch": "subchapter",
          "add": "addendum",
          "amend": "amendment",
          "annot": "annotation",
          "app": "appendix",
          "art": "article",
          "bibliog": "bibliography",
          "bk": "book",
          "ch": "chapter",
          "cl": "clause",
          "col": "column",
          "cmt": "comment",
          "dec": "decision",
          "dept": "department",
          "ex": "example",
          "fig": "figure",
          "fld": "field",
          "fol": "folio",
          "n": "note",
          "hypo": "hypothetical",
          "illus": "illustration",
          "intro": "introduction",
          "l": "line",
          "no": "issue",
          "p": "page",
          "pp": "page",
          "para": "paragraph",
          "pt": "part",
          "pmbl": "preamble",
          "princ": "principle",
          "pub": "publication",
          "r": "rule",
          "rn": "randnummer",
          "sched": "schedule",
          "sec": "section",
          "ser": "series,",
          "subdiv": "subdivision",
          "subsec": "subsection",
          "supp": "supplement",
          "tbl": "table",
          "tit": "title",
          "vol": "volume"
        },
        MODULE_MACROS: {
          "juris-pretitle": true,
          "juris-title": true,
          "juris-pretitle-short": true,
          "juris-title-short": true,
          "juris-main": true,
          "juris-main-short": true,
          "juris-tail": true,
          "juris-tail-short": true,
          "juris-locator": true
        },
        MODULE_TYPES: {
          "legal_case": true,
          "legislation": true,
          "bill": true,
          "hearing": true,
          "gazette": true,
          "report": true,
          "regulation": true,
          "standard": true,
          "patent": true,
          "locator": true
        },
        checkNestedBrace: function(state) {
          if (state.opt.xclass === "note") {
            this.depth = 0;
            this.update = function(str) {
              var str = str ? str : "";
              var lst = str.split(/([\(\)])/);
              for (var i = 1, ilen = lst.length; i < ilen; i += 2) {
                if (lst[i] === "(") {
                  if (this.depth % 2 === 1) {
                    lst[i] = "[";
                  }
                  this.depth += 1;
                } else if (lst[i] === ")") {
                  if (this.depth % 2 === 0) {
                    lst[i] = "]";
                  }
                  this.depth -= 1;
                }
              }
              var ret = lst.join("");
              return ret;
            };
          } else {
            this.update = function(str) {
              return str;
            };
          }
        },
        MULTI_FIELDS: ["event", "publisher", "publisher-place", "event-place", "title", "container-title", "collection-title", "authority", "genre", "title-short", "medium", "country", "jurisdiction", "archive", "archive-place"],
        LangPrefsMap: {
          "title": "titles",
          "title-short": "titles",
          "event": "titles",
          "genre": "titles",
          "medium": "titles",
          "container-title": "journals",
          "collection-title": "titles",
          "archive": "journals",
          "publisher": "publishers",
          "authority": "publishers",
          "publisher-place": "places",
          "event-place": "places",
          "archive-place": "places",
          "jurisdiction": "places",
          "number": "places",
          "edition": "places",
          "issue": "places",
          "volume": "places"
        },
        AbbreviationSegments: function() {
          this["container-title"] = {};
          this["collection-title"] = {};
          this["institution-entire"] = {};
          this["institution-part"] = {};
          this.nickname = {};
          this.number = {};
          this.title = {};
          this.place = {};
          this.hereinafter = {};
          this.classic = {};
          this["container-phrase"] = {};
          this["title-phrase"] = {};
        },
        getAbbrevsDomain: function(state, country2, lang) {
          var domain = null;
          if (state.opt.availableAbbrevDomains && country2 && country2 !== "default") {
            var globalDomainPreference = state.locale[state.opt.lang].opts["jurisdiction-preference"];
            var itemDomainPreference = null;
            if (state.locale[lang]) {
              itemDomainPreference = state.locale[lang].opts["jurisdiction-preference"];
            }
            if (itemDomainPreference) {
              for (var j = itemDomainPreference.length - 1; j > -1; j--) {
                if (state.opt.availableAbbrevDomains[country2].indexOf(itemDomainPreference[j]) > -1) {
                  domain = itemDomainPreference[j];
                  break;
                }
              }
            }
            if (!domain && globalDomainPreference) {
              for (var j = globalDomainPreference.length - 1; j > -1; j--) {
                if (state.opt.availableAbbrevDomains[country2].indexOf(globalDomainPreference[j]) > -1) {
                  domain = globalDomainPreference[j];
                  break;
                }
              }
            }
          }
          return domain;
        },
        FIELD_CATEGORY_REMAP: {
          "title": "title",
          "container-title": "container-title",
          "collection-title": "collection-title",
          "country": "place",
          "number": "number",
          "place": "place",
          "archive": "container-title",
          "title-short": "title",
          "genre": "title",
          "event": "title",
          "medium": "title",
          "archive-place": "place",
          "publisher-place": "place",
          "event-place": "place",
          "jurisdiction": "place",
          "language-name": "place",
          "language-name-original": "place",
          "call-number": "number",
          "chapter-number": "number",
          "collection-number": "number",
          "edition": "number",
          "page": "number",
          "issue": "number",
          "locator": "number",
          "locator-extra": "number",
          "number-of-pages": "number",
          "number-of-volumes": "number",
          "volume": "number",
          "citation-number": "number",
          "publisher": "institution-part"
        },
        parseLocator: function(item) {
          if (this.opt.development_extensions.locator_date_and_revision) {
            if (item.locator) {
              item.locator = "" + item.locator;
              var idx = item.locator.indexOf("|");
              if (idx > -1) {
                var raw_locator = item.locator;
                item.locator = raw_locator.slice(0, idx);
                raw_locator = raw_locator.slice(idx + 1);
                var m = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);
                if (m) {
                  item["locator-date"] = this.fun.dateparser.parseDateToObject(m[1]);
                  raw_locator = raw_locator.slice(m[1].length);
                }
                item["locator-extra"] = raw_locator.replace(/^\s+/, "").replace(/\s+$/, "");
              }
            }
          }
          if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, "");
          }
          return item;
        },
        normalizeLocaleStr: function(str) {
          if (!str) {
            return;
          }
          var lst = str.split("-");
          lst[0] = lst[0].toLowerCase();
          if (lst[1]) {
            lst[1] = lst[1].toUpperCase();
          }
          return lst.join("-");
        },
        parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {
          if (typeof Item.note !== "string") {
            return;
          }
          var elems = [];
          var lines = Item.note.split("\n");
          for (var i = 0, ilen = lines.length; i < ilen; i++) {
            var line = lines[i];
            var elems = [];
            var m = line.match(CSL2.NOTE_FIELDS_REGEXP);
            if (m) {
              var splt = line.split(CSL2.NOTE_FIELDS_REGEXP);
              for (var j = 0, jlen = splt.length - 1; j < jlen; j++) {
                elems.push(splt[j]);
                elems.push(m[j]);
              }
              elems.push(splt[splt.length - 1]);
              for (var j = 1, jlen = elems.length; j < jlen; j += 2) {
                if (elems[j - 1].trim() && (i > 0 || j > 1) && !elems[j - 1].match(CSL2.NOTE_FIELD_REGEXP)) {
                  break;
                } else {
                  elems[j] = "\n" + elems[j].slice(2, -1).trim() + "\n";
                }
              }
              lines[i] = elems.join("");
            }
          }
          lines = lines.join("\n").split("\n");
          var offset = 0;
          var names2 = {};
          for (var i = 0, ilen = lines.length; i < ilen; i++) {
            var line = lines[i];
            var mm = line.match(CSL2.NOTE_FIELD_REGEXP);
            if (!line.trim()) {
              continue;
            } else if (!mm) {
              if (i === 0) {
                continue;
              } else {
                offset = i;
                break;
              }
            }
            var key = mm[1];
            var val = mm[2].replace(/^\s+/, "").replace(/\s+$/, "");
            if (key === "type") {
              Item.type = val;
              lines[i] = "";
            } else if (CSL2.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
              if (!Item[key] || allowDateOverride) {
                Item[key] = CSL2.DateParser.parseDateToArray(val);
                if (!validFieldsForType || validFieldsForType[key] && this.isDateString(val)) {
                  lines[i] = "";
                }
              }
            } else if (!Item[key]) {
              if (CSL2.NAME_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                if (!names2[key]) {
                  names2[key] = [];
                }
                var lst = val.split(/\s*\|\|\s*/);
                if (lst.length === 1) {
                  names2[key].push({ literal: lst[0] });
                } else if (lst.length === 2) {
                  var name = { family: lst[0], given: lst[1] };
                  CSL2.parseParticles(name);
                  names2[key].push(name);
                }
              } else {
                Item[key] = val;
              }
              if (!validFieldsForType || validFieldsForType[key]) {
                lines[i] = "";
              }
            }
          }
          for (var key in names2) {
            Item[key] = names2[key];
          }
          if (validFieldsForType) {
            if (lines[offset].trim()) {
              lines[offset] = "\n" + lines[offset];
            }
            for (var i = offset - 1; i > -1; i--) {
              if (!lines[i].trim()) {
                lines = lines.slice(0, i).concat(lines.slice(i + 1));
              }
            }
          }
          Item.note = lines.join("\n").trim();
        },
        checkPrefixSpaceAppend: function(state, prefix) {
          if (!prefix) {
            prefix = "";
          }
          var sp = "";
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
          var test_char = test_prefix.slice(-1);
          if (test_prefix.match(CSL2.ENDSWITH_ROMANESQUE_REGEXP)) {
            sp = " ";
          } else if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1) {
            sp = " ";
          } else if (test_char.match(/[\)\],0-9]/)) {
            sp = " ";
          }
          var prefix = (prefix + sp).replace(/\s+/g, " ");
          return prefix;
        },
        checkIgnorePredecessor: function(state, prefix) {
          var ignorePredecessor = false;
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g, "");
          var test_char = test_prefix.slice(-1);
          if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(test_char) > -1 && prefix.trim().indexOf(" ") > -1) {
            state.tmp.term_predecessor = false;
            return true;
          }
          return false;
        },
        checkSuffixSpacePrepend: function(state, suffix) {
          if (!suffix) {
            return "";
          }
          if (suffix.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) || ["[", "("].indexOf(suffix.slice(0, 1)) > -1) {
            suffix = " " + suffix;
          }
          return suffix;
        },
        GENDERS: ["masculine", "feminine"],
        ERROR_NO_RENDERED_FORM: 1,
        PREVIEW: "Just for laughs.",
        ASSUME_ALL_ITEMS_REGISTERED: 2,
        START: 0,
        END: 1,
        SINGLETON: 2,
        SEEN: 6,
        SUCCESSOR: 3,
        SUCCESSOR_OF_SUCCESSOR: 4,
        SUPPRESS: 5,
        SINGULAR: 0,
        PLURAL: 1,
        LITERAL: true,
        BEFORE: 1,
        AFTER: 2,
        DESCENDING: 1,
        ASCENDING: 2,
        PRIMARY: 1,
        SECONDARY: 2,
        POSITION_FIRST: 0,
        POSITION_SUBSEQUENT: 1,
        POSITION_IBID: 2,
        POSITION_IBID_WITH_LOCATOR: 3,
        POSITION_CONTAINER_SUBSEQUENT: 4,
        POSITION_MAP: {
          "0": 0,
          "4": 1,
          "1": 2,
          "2": 3,
          "3": 4
        },
        POSITION_TEST_VARS: ["position", "first-reference-note-number", "near-note"],
        AREAS: ["citation", "citation_sort", "bibliography", "bibliography_sort", "intext"],
        CITE_FIELDS: ["first-reference-note-number", "first-container-reference-note-number", "locator", "locator-extra"],
        SWAPPING_PUNCTUATION: [".", "!", "?", ":", ","],
        TERMINAL_PUNCTUATION: [":", ".", ";", "!", "?", " "],
        NONE: 0,
        NUMERIC: 1,
        POSITION: 2,
        TRIGRAPH: 3,
        DATE_PARTS: ["year", "month", "day"],
        DATE_PARTS_ALL: ["year", "month", "day", "season"],
        DATE_PARTS_INTERNAL: ["year", "month", "day", "year_end", "month_end", "day_end"],
        NAME_PARTS: ["non-dropping-particle", "family", "given", "dropping-particle", "suffix", "literal"],
        DISAMBIGUATE_OPTIONS: [
          "disambiguate-add-names",
          "disambiguate-add-givenname",
          "disambiguate-add-year-suffix"
        ],
        GIVENNAME_DISAMBIGUATION_RULES: [
          "all-names",
          "all-names-with-initials",
          "primary-name",
          "primary-name-with-initials",
          "by-cite"
        ],
        NAME_ATTRIBUTES: [
          "and",
          "delimiter-precedes-last",
          "delimiter-precedes-et-al",
          "initialize-with",
          "initialize",
          "name-as-sort-order",
          "sort-separator",
          "et-al-min",
          "et-al-use-first",
          "et-al-subsequent-min",
          "et-al-subsequent-use-first",
          "form",
          "prefix",
          "suffix",
          "delimiter"
        ],
        LOOSE: 0,
        STRICT: 1,
        TOLERANT: 2,
        PREFIX_PUNCTUATION: /[.;:]\s*$/,
        SUFFIX_PUNCTUATION: /^\s*[.;:,\(\)]/,
        NUMBER_REGEXP: /(?:^\d+|\d+$)/,
        NAME_INITIAL_REGEXP: /^([A-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u042f\u0590-\u05d4\u05d6-\u05ff\u0600-\u06ff\u0370\u0372\u0376\u0386\u0388-\u03ab\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f4\u03f7\u03fd-\u03ff])([a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u052f\u0600-\u06ff\u0370-\u03ff\u1f00-\u1fff]*|)(\.)*/,
        ROMANESQUE_REGEXP: /[-0-9a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
        ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/g,
        STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
        ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]$/,
        ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]+$/,
        VIETNAMESE_SPECIALS: /[\u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]/,
        VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]{2,6})(\s+|$))+$/,
        NOTE_FIELDS_REGEXP: /\{:(?:[\-_a-z]+|[A-Z]+):[^\}]+\}/g,
        NOTE_FIELD_REGEXP: /^([\-_a-z]+|[A-Z]+):\s*([^\}]+)$/,
        PARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\u02bb |\u2019 | |\' ) *)(.+)$/,
        PARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\-|\u02bb|\u2019| |\') *)(.+)$/,
        DISPLAY_CLASSES: ["block", "left-margin", "right-inline", "indent"],
        NAME_VARIABLES: [
          "author",
          "chair",
          "collection-editor",
          "compiler",
          "composer",
          "container-author",
          "contributor",
          "curator",
          "director",
          "editor",
          "editor-translator",
          "editorial-director",
          "executive-producer",
          "guest",
          "host",
          "illustrator",
          "interviewer",
          "narrator",
          "organizer",
          "original-author",
          "performer",
          "producer",
          "recipient",
          "reviewed-author",
          "script-writer",
          "series-creator",
          "translator",
          "commenter"
        ],
        CREATORS: [
          "author",
          "chair",
          "collection-editor",
          "compiler",
          "composer",
          "container-author",
          "contributor",
          "curator",
          "director",
          "editor",
          "editor-translator",
          "editorial-director",
          "executive-producer",
          "guest",
          "host",
          "illustrator",
          "interviewer",
          "narrator",
          "organizer",
          "original-author",
          "performer",
          "producer",
          "recipient",
          "reviewed-author",
          "script-writer",
          "series-creator",
          "translator",
          "commenter"
        ],
        NUMERIC_VARIABLES: [
          "call-number",
          "chapter-number",
          "collection-number",
          "division",
          "edition",
          "page",
          "issue",
          "locator",
          "locator-extra",
          "number",
          "number-of-pages",
          "number-of-volumes",
          "part-number",
          "printing-number",
          "section",
          "supplement-number",
          "version",
          "volume",
          "supplement",
          "citation-number"
        ],
        DATE_VARIABLES: [
          "locator-date",
          "issued",
          "event-date",
          "accessed",
          "original-date",
          "publication-date",
          "available-date",
          "submitted",
          "alt-issued",
          "alt-event"
        ],
        VARIABLES_WITH_SHORT_FORM: [
          "title",
          "container-title"
        ],
        TITLE_FIELD_SPLITS: function(seg) {
          var keys = ["title", "short", "main", "sub", "subjoin"];
          var ret = {};
          for (var i = 0, ilen = keys.length; i < ilen; i++) {
            ret[keys[i]] = seg + "title" + (keys[i] === "title" ? "" : "-" + keys[i]);
          }
          return ret;
        },
        demoteNoiseWords: function(state, fld, drop_or_demote) {
          var SKIP_WORDS = state.locale[state.opt.lang].opts["leading-noise-words"];
          if (fld && drop_or_demote) {
            fld = fld.split(/\s+/);
            fld.reverse();
            var toEnd = [];
            for (var j = fld.length - 1; j > -1; j += -1) {
              if (SKIP_WORDS.indexOf(fld[j].toLowerCase()) > -1) {
                toEnd.push(fld.pop());
              } else {
                break;
              }
            }
            fld.reverse();
            var start = fld.join(" ");
            var end = toEnd.join(" ");
            if (drop_or_demote === "drop" || !end) {
              fld = start;
            } else if (drop_or_demote === "demote") {
              fld = [start, end].join(", ");
            }
          }
          return fld;
        },
        extractTitleAndSubtitle: function(Item, narrowSpaceLocale) {
          var narrowSpace = narrowSpaceLocale ? "\u202F" : "";
          var segments = [""];
          if (this.opt.development_extensions.split_container_title) {
            segments.push("container-");
          }
          for (var i = 0, ilen = segments.length; i < ilen; i++) {
            var seg = segments[i];
            var title2 = CSL2.TITLE_FIELD_SPLITS(seg);
            var langs = [false];
            if (Item.multi) {
              for (var lang in Item.multi._keys[title2.short]) {
                langs.push(lang);
              }
            }
            for (var j = 0, jlen = langs.length; j < jlen; j++) {
              var lang = langs[j];
              var vals = {};
              if (lang) {
                if (Item.multi._keys[title2.title]) {
                  vals[title2.title] = Item.multi._keys[title2.title][lang];
                }
                if (Item.multi._keys[title2["short"]]) {
                  vals[title2["short"]] = Item.multi._keys[title2["short"]][lang];
                }
              } else {
                vals[title2.title] = Item[title2.title];
                vals[title2["short"]] = Item[title2["short"]];
              }
              vals[title2.main] = vals[title2.title];
              vals[title2.sub] = false;
              var shortTitle2 = vals[title2["short"]];
              if (vals[title2.title]) {
                if (shortTitle2 && shortTitle2.toLowerCase() === vals[title2.title].toLowerCase()) {
                  vals[title2.main] = vals[title2.title];
                  vals[title2.subjoin] = "";
                  vals[title2.sub] = "";
                } else if (shortTitle2) {
                  var tail = vals[title2.title].slice(shortTitle2.replace(/[\?\!]+$/, "").length);
                  var top = vals[title2.title].replace(tail.replace(/^[\?\!]+/, ""), "").trim();
                  var m = CSL2.TITLE_SPLIT_REGEXP.matchfirst.exec(tail);
                  if (m && top.toLowerCase() === shortTitle2.toLowerCase()) {
                    vals[title2.main] = top;
                    vals[title2.subjoin] = m[1].replace(/[\?\!]+(\s*)$/, "$1");
                    vals[title2.sub] = tail.replace(CSL2.TITLE_SPLIT_REGEXP.matchfirst, "");
                    if (this.opt.development_extensions.force_short_title_casing_alignment) {
                      vals[title2["short"]] = vals[title2.main];
                    }
                  } else {
                    var splitTitle = CSL2.TITLE_SPLIT(vals[title2.title]);
                    if (splitTitle.length == 3) {
                      vals[title2.main] = splitTitle[0];
                      vals[title2.subjoin] = splitTitle[1];
                      vals[title2.sub] = splitTitle[2];
                    } else {
                      vals[title2.main] = vals[title2.title];
                      vals[title2.subjoin] = "";
                      vals[title2.sub] = "";
                    }
                  }
                } else {
                  var splitTitle = CSL2.TITLE_SPLIT(vals[title2.title]);
                  if (splitTitle.length == 3) {
                    vals[title2.main] = splitTitle[0];
                    vals[title2.subjoin] = splitTitle[1];
                    vals[title2.sub] = splitTitle[2];
                    if (this.opt.development_extensions.implicit_short_title && Item.type !== "legal_case") {
                      if (!Item[title2.short] && !vals[title2.main].match(/^[\-\.[0-9]+$/)) {
                        var punct = vals[title2.subjoin].trim();
                        if (["?", "!"].indexOf(punct) === -1) {
                          punct = "";
                        }
                        vals[title2.short] = vals[title2.main] + punct;
                      }
                    }
                  } else {
                    vals[title2.main] = vals[title2.title];
                    vals[title2.subjoin] = "";
                    vals[title2.sub] = "";
                  }
                }
                if (vals[title2.subjoin]) {
                  if (vals[title2.subjoin].match(/([\?\!])/)) {
                    var m = vals[title2.subjoin].match(/(\s*)$/);
                    vals[title2.main] = vals[title2.main] + narrowSpace + vals[title2.subjoin].trim();
                    vals[title2.subjoin] = m[1];
                  }
                }
              }
              if (vals[title2.subjoin]) {
                if (vals[title2.subjoin].indexOf(":") > -1) {
                  vals[title2.subjoin] = narrowSpace + ": ";
                }
                if (vals[title2.subjoin].indexOf("-") > -1 || vals[title2.subjoin].indexOf("\u2014") > -1) {
                  vals[title2.subjoin] = "\u2014";
                }
              }
              if (lang) {
                for (var key in vals) {
                  if (!Item.multi._keys[key]) {
                    Item.multi._keys[key] = {};
                  }
                  Item.multi._keys[key][lang] = vals[key];
                }
              } else {
                for (var key in vals) {
                  Item[key] = vals[key];
                }
              }
            }
          }
        },
        titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {
          var title2 = CSL2.TITLE_FIELD_SPLITS(seg);
          var vals = {};
          if (lang && Item.multi) {
            if (Item.multi._keys[title2.title]) {
              vals[title2.title] = Item.multi._keys[title2.title][lang];
            }
            if (Item.multi._keys[title2.main]) {
              vals[title2.main] = Item.multi._keys[title2.main][lang];
            }
            if (Item.multi._keys[title2.sub]) {
              vals[title2.sub] = Item.multi._keys[title2.sub][lang];
            }
            if (Item.multi._keys[title2.subjoin]) {
              vals[title2.subjoin] = Item.multi._keys[title2.subjoin][lang];
            }
          } else {
            vals[title2.title] = Item[title2.title];
            vals[title2.main] = Item[title2.main];
            vals[title2.sub] = Item[title2.sub];
            vals[title2.subjoin] = Item[title2.subjoin];
          }
          if (vals[title2.main] && vals[title2.sub]) {
            var mainTitle = vals[title2.main];
            var subJoin = vals[title2.subjoin];
            var subTitle = vals[title2.sub];
            if (sentenceCase) {
              mainTitle = CSL2.Output.Formatters.sentence(state, mainTitle);
              subTitle = CSL2.Output.Formatters.sentence(state, subTitle);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
              subTitle = CSL2.Output.Formatters["capitalize-first"](state, subTitle);
            }
            return [mainTitle, subJoin, subTitle].join("");
          } else if (vals[title2.title]) {
            if (sentenceCase) {
              return CSL2.Output.Formatters.sentence(state, vals[title2.title]);
            } else if (state.opt.development_extensions.uppercase_subtitles) {
              var splits = CSL2.TITLE_SPLIT(vals[title2.title]);
              for (var i = 0, ilen = splits.length; i < ilen; i += 2) {
                splits[i] = CSL2.Output.Formatters["capitalize-first"](state, splits[i]);
              }
              for (var i = 1, ilen = splits.length - 1; i < ilen; i += 2) {
                var m = splits[i].match(/([:\?\!] )/);
                if (m) {
                  var narrowSpace = state.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr" ? "\u202F" : "";
                  splits[i] = narrowSpace + m[1];
                }
                if (splits[i].indexOf("-") > -1 || splits[i].indexOf("\u2014") > -1) {
                  splits[i] = "\u2014";
                }
              }
              vals[title2.title] = splits.join("");
              return vals[title2.title];
            } else {
              return vals[title2.title];
            }
          } else {
            return "";
          }
        },
        getSafeEscape: function(state) {
          if (["bibliography", "citation"].indexOf(state.tmp.area) > -1) {
            var callbacks = [];
            if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === "html") {
              callbacks.push(function(txt) {
                return txt.replace(/\u202f/g, '<span style="white-space:nowrap">&thinsp;</span>');
              });
            }
            if (callbacks.length) {
              return function(txt) {
                for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {
                  txt = callbacks[i](txt);
                }
                return CSL2.Output.Formats[state.opt.mode].text_escape(txt);
              };
            } else {
              return CSL2.Output.Formats[state.opt.mode].text_escape;
            }
          } else {
            return function(txt) {
              return txt;
            };
          }
        },
        SKIP_WORDS: ["about", "above", "across", "afore", "after", "against", "al", "along", "alongside", "amid", "amidst", "among", "amongst", "anenst", "apropos", "apud", "around", "as", "aside", "astride", "at", "athwart", "atop", "barring", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "circa", "despite", "down", "during", "et", "except", "for", "forenenst", "from", "given", "in", "inside", "into", "lest", "like", "modulo", "near", "next", "notwithstanding", "of", "off", "on", "onto", "out", "over", "per", "plus", "pro", "qua", "sans", "since", "than", "through", " thru", "throughout", "thruout", "till", "to", "toward", "towards", "under", "underneath", "until", "unto", "up", "upon", "versus", "vs.", "v.", "vs", "v", "via", "vis-\xE0-vis", "with", "within", "without", "according to", "ahead of", "apart from", "as for", "as of", "as per", "as regards", "aside from", "back to", "because of", "close to", "due to", "except for", "far from", "inside of", "instead of", "near to", "next to", "on to", "out from", "out of", "outside of", "prior to", "pursuant to", "rather than", "regardless of", "such as", "that of", "up to", "where as", "or", "yet", "so", "for", "and", "nor", "a", "an", "the", "de", "d'", "von", "van", "c", "ca"],
        FORMAT_KEY_SEQUENCE: [
          "@strip-periods",
          "@font-style",
          "@font-variant",
          "@font-weight",
          "@text-decoration",
          "@vertical-align",
          "@quotes"
        ],
        INSTITUTION_KEYS: [
          "font-style",
          "font-variant",
          "font-weight",
          "text-decoration",
          "text-case"
        ],
        SUFFIX_CHARS: "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",
        ROMAN_NUMERALS: [
          ["", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"],
          ["", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"],
          ["", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"],
          ["", "m", "mm", "mmm", "mmmm", "mmmmm"]
        ],
        LANGS: {
          "af-ZA": "Afrikaans",
          "ar": "Arabic",
          "bg-BG": "Bulgarian",
          "ca-AD": "Catalan",
          "cs-CZ": "Czech",
          "da-DK": "Danish",
          "de-AT": "Austrian",
          "de-CH": "German (CH)",
          "de-DE": "German (DE)",
          "el-GR": "Greek",
          "en-GB": "English (GB)",
          "en-US": "English (US)",
          "es-ES": "Spanish",
          "et-EE": "Estonian",
          "eu": "European",
          "fa-IR": "Persian",
          "fi-FI": "Finnish",
          "fr-CA": "French (CA)",
          "fr-FR": "French (FR)",
          "he-IL": "Hebrew",
          "hr-HR": "Croatian",
          "hu-HU": "Hungarian",
          "is-IS": "Icelandic",
          "it-IT": "Italian",
          "ja-JP": "Japanese",
          "km-KH": "Khmer",
          "ko-KR": "Korean",
          "lt-LT": "Lithuanian",
          "lv-LV": "Latvian",
          "mn-MN": "Mongolian",
          "nb-NO": "Norwegian (Bokm\xE5l)",
          "nl-NL": "Dutch",
          "nn-NO": "Norwegian (Nynorsk)",
          "pl-PL": "Polish",
          "pt-BR": "Portuguese (BR)",
          "pt-PT": "Portuguese (PT)",
          "ro-RO": "Romanian",
          "ru-RU": "Russian",
          "sk-SK": "Slovak",
          "sl-SI": "Slovenian",
          "sr-RS": "Serbian",
          "sv-SE": "Swedish",
          "th-TH": "Thai",
          "tr-TR": "Turkish",
          "uk-UA": "Ukrainian",
          "vi-VN": "Vietnamese",
          "zh-CN": "Chinese (CN)",
          "zh-TW": "Chinese (TW)"
        },
        LANG_BASES: {
          af: "af_ZA",
          ar: "ar",
          bg: "bg_BG",
          ca: "ca_AD",
          cs: "cs_CZ",
          da: "da_DK",
          de: "de_DE",
          el: "el_GR",
          en: "en_US",
          es: "es_ES",
          et: "et_EE",
          eu: "eu",
          fa: "fa_IR",
          fi: "fi_FI",
          fr: "fr_FR",
          he: "he_IL",
          hr: "hr-HR",
          hu: "hu_HU",
          is: "is_IS",
          it: "it_IT",
          ja: "ja_JP",
          km: "km_KH",
          ko: "ko_KR",
          lt: "lt_LT",
          lv: "lv-LV",
          mn: "mn_MN",
          nb: "nb_NO",
          nl: "nl_NL",
          nn: "nn-NO",
          pl: "pl_PL",
          pt: "pt_PT",
          ro: "ro_RO",
          ru: "ru_RU",
          sk: "sk_SK",
          sl: "sl_SI",
          sr: "sr_RS",
          sv: "sv_SE",
          th: "th_TH",
          tr: "tr_TR",
          uk: "uk_UA",
          vi: "vi_VN",
          zh: "zh_CN"
        },
        SUPERSCRIPTS: {
          "\xAA": "a",
          "\xB2": "2",
          "\xB3": "3",
          "\xB9": "1",
          "\xBA": "o",
          "\u02B0": "h",
          "\u02B1": "\u0266",
          "\u02B2": "j",
          "\u02B3": "r",
          "\u02B4": "\u0279",
          "\u02B5": "\u027B",
          "\u02B6": "\u0281",
          "\u02B7": "w",
          "\u02B8": "y",
          "\u02E0": "\u0263",
          "\u02E1": "l",
          "\u02E2": "s",
          "\u02E3": "x",
          "\u02E4": "\u0295",
          "\u1D2C": "A",
          "\u1D2D": "\xC6",
          "\u1D2E": "B",
          "\u1D30": "D",
          "\u1D31": "E",
          "\u1D32": "\u018E",
          "\u1D33": "G",
          "\u1D34": "H",
          "\u1D35": "I",
          "\u1D36": "J",
          "\u1D37": "K",
          "\u1D38": "L",
          "\u1D39": "M",
          "\u1D3A": "N",
          "\u1D3C": "O",
          "\u1D3D": "\u0222",
          "\u1D3E": "P",
          "\u1D3F": "R",
          "\u1D40": "T",
          "\u1D41": "U",
          "\u1D42": "W",
          "\u1D43": "a",
          "\u1D44": "\u0250",
          "\u1D45": "\u0251",
          "\u1D46": "\u1D02",
          "\u1D47": "b",
          "\u1D48": "d",
          "\u1D49": "e",
          "\u1D4A": "\u0259",
          "\u1D4B": "\u025B",
          "\u1D4C": "\u025C",
          "\u1D4D": "g",
          "\u1D4F": "k",
          "\u1D50": "m",
          "\u1D51": "\u014B",
          "\u1D52": "o",
          "\u1D53": "\u0254",
          "\u1D54": "\u1D16",
          "\u1D55": "\u1D17",
          "\u1D56": "p",
          "\u1D57": "t",
          "\u1D58": "u",
          "\u1D59": "\u1D1D",
          "\u1D5A": "\u026F",
          "\u1D5B": "v",
          "\u1D5C": "\u1D25",
          "\u1D5D": "\u03B2",
          "\u1D5E": "\u03B3",
          "\u1D5F": "\u03B4",
          "\u1D60": "\u03C6",
          "\u1D61": "\u03C7",
          "\u2070": "0",
          "\u2071": "i",
          "\u2074": "4",
          "\u2075": "5",
          "\u2076": "6",
          "\u2077": "7",
          "\u2078": "8",
          "\u2079": "9",
          "\u207A": "+",
          "\u207B": "\u2212",
          "\u207C": "=",
          "\u207D": "(",
          "\u207E": ")",
          "\u207F": "n",
          "\u2120": "SM",
          "\u2122": "TM",
          "\u3192": "\u4E00",
          "\u3193": "\u4E8C",
          "\u3194": "\u4E09",
          "\u3195": "\u56DB",
          "\u3196": "\u4E0A",
          "\u3197": "\u4E2D",
          "\u3198": "\u4E0B",
          "\u3199": "\u7532",
          "\u319A": "\u4E59",
          "\u319B": "\u4E19",
          "\u319C": "\u4E01",
          "\u319D": "\u5929",
          "\u319E": "\u5730",
          "\u319F": "\u4EBA",
          "\u02C0": "\u0294",
          "\u02C1": "\u0295",
          "\u06E5": "\u0648",
          "\u06E6": "\u064A"
        },
        SUPERSCRIPTS_REGEXP: new RegExp("[\xAA\xB2\xB3\xB9\xBA\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02E0\u02E1\u02E2\u02E3\u02E4\u1D2C\u1D2D\u1D2E\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u2070\u2071\u2074\u2075\u2076\u2077\u2078\u2079\u207A\u207B\u207C\u207D\u207E\u207F\u2120\u2122\u3192\u3193\u3194\u3195\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u02C0\u02C1\u06E5\u06E6]", "g"),
        UPDATE_GROUP_CONTEXT_CONDITION: function(state, str, valueTerm, token, value) {
          if (!state.opt.use_context_condition)
            return;
          var flags = state.tmp.group_context.tip;
          if (flags.condition) {
            if (!flags.condition.termtxt) {
              flags.condition.termtxt = str;
              flags.condition.valueTerm = valueTerm;
            }
            if (!flags.value_seen && flags.condition.test === "comma-safe-numbers-only") {
              if (value) {
                flags.value_seen = true;
                if (!value.match(/^[0-9]/)) {
                  state.tmp.just_did_number = false;
                }
              }
            }
          } else {
            if (token && token.decorations.filter((o) => o[0] === "@vertical-align").length > 0) {
              state.tmp.just_did_number = false;
            } else if (token && token.strings.suffix) {
              state.tmp.just_did_number = false;
            } else if (str) {
              if (str.match(/[0-9]$/)) {
                state.tmp.just_did_number = true;
              } else {
                state.tmp.just_did_number = false;
              }
            }
          }
        },
        EVALUATE_GROUP_CONDITION: function(state, flags) {
          if (!state.opt.use_context_condition)
            return;
          var testres;
          var numbersOnly = flags.condition.test === "comma-safe-numbers-only";
          if (flags.condition.test === "empty-label") {
            testres = !flags.condition.termtxt;
          } else if (flags.condition.test === "empty-label-no-decor") {
            testres = !flags.condition.termtxt || flags.condition.termtxt.indexOf("%s") > -1;
          } else if (["comma-safe", "comma-safe-numbers-only"].indexOf(flags.condition.test) > -1) {
            var locale_term = flags.condition.termtxt;
            var termStartAlpha = false;
            if (flags.condition.termtxt) {
              termStartAlpha = flags.condition.termtxt.slice(0, 1).match(CSL2.ALL_ROMANESQUE_REGEXP);
            }
            var num = state.tmp.just_did_number;
            if (num) {
              if (flags.condition.valueTerm) {
                testres = numbersOnly ? false : true;
              } else if (!locale_term) {
                testres = true;
              } else if (termStartAlpha) {
                testres = numbersOnly ? false : true;
              } else if (["always", "after-number"].indexOf(state.opt.require_comma_on_symbol) > -1) {
                testres = true;
              } else {
                testres = false;
              }
            } else {
              if (flags.condition.valueTerm) {
                testres = false;
              } else if (!locale_term) {
                testres = false;
              } else if (termStartAlpha) {
                testres = numbersOnly ? false : true;
              } else if (state.opt.require_comma_on_symbol === "always") {
                testres = true;
              } else {
                testres = false;
              }
            }
          }
          if (testres) {
            var force_suppress = false;
          } else {
            var force_suppress = true;
          }
          if (flags.condition.not) {
            force_suppress = !force_suppress;
          }
          return force_suppress;
        },
        SYS_OPTIONS: [
          "prioritize_disambiguate_condition",
          "csl_reverse_lookup_support",
          "main_title_from_short_title",
          "uppercase_subtitles",
          "force_short_title_casing_alignment",
          "implicit_short_title",
          "split_container_title"
        ],
        TITLE_SPLIT_REGEXP: function() {
          var splits = [
            "\\.\\s+",
            "\\!\\s+",
            "\\?\\s+",
            "\\s*::*\\s+",
            "\\s*\u2014\\s*",
            "\\s+\\-\\s+",
            "\\s*\\-\\-\\-*\\s*"
          ];
          return {
            match: new RegExp("(" + splits.join("|") + ")", "g"),
            matchfirst: new RegExp("^(" + splits.join("|") + ")"),
            split: new RegExp("(?:" + splits.join("|") + ")")
          };
        }(),
        TITLE_SPLIT: function(str) {
          if (!str) {
            return str;
          }
          var m = str.match(CSL2.TITLE_SPLIT_REGEXP.match);
          var lst = str.split(CSL2.TITLE_SPLIT_REGEXP.split);
          for (var i = lst.length - 2; i > -1; i--) {
            lst[i] = lst[i].trim();
            if (lst[i] && lst[i].slice(-1).toLowerCase() !== lst[i].slice(-1)) {
              lst[i] = lst[i] + m[i] + lst[i + 1];
              lst = lst.slice(0, i + 1).concat(lst.slice(i + 2));
            } else {
              lst = lst.slice(0, i + 1).concat([m[i]]).concat(lst.slice(i + 1));
            }
          }
          return lst;
        },
        GET_COURT_CLASS: function(state, Item, sortKey) {
          var cls = "";
          var authority2 = null;
          var country2 = Item.jurisdiction ? Item.jurisdiction.split(":")[0] : null;
          var classType = "court_condition_classes";
          if (sortKey) {
            classType = "court_key_classes";
          }
          if (country2 && Item.authority) {
            if (typeof Item.authority === "string") {
              authority2 = Item.authority;
            } else {
              if (Item.authority[0] && Item.authority[0].literal) {
                authority2 = Item.authority[0].literal;
              }
            }
          }
          if (authority2) {
            if (this.lang && state.locale[this.lang].opts[classType] && state.locale[this.lang].opts[classType][country2] && state.locale[this.lang].opts[classType][country2][authority2]) {
              cls = state.locale[this.lang].opts[classType][country2][authority2];
            } else if (state.locale[state.opt["default-locale"][0]].opts[classType] && state.locale[state.opt["default-locale"][0]].opts[classType][country2] && state.locale[state.opt["default-locale"][0]].opts[classType][country2][authority2]) {
              cls = state.locale[state.opt["default-locale"][0]].opts[classType][country2][authority2];
            }
          }
          return cls;
        },
        SET_COURT_CLASSES: function(state, lang, myxml, dataObj) {
          var nodes = myxml.getNodesByName(dataObj, "court-class");
          for (var pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            var courtclass = nodes[pos];
            var attributes = myxml.attributes(courtclass);
            var cls = attributes["@name"];
            var country2 = attributes["@country"];
            var courts = attributes["@courts"];
            var classType = "court_key_classes";
            if (state.registry) {
              classType = "court_condition_classes";
            }
            if (cls && country2 && courts) {
              courts = courts.trim().split(/\s+/);
              if (!state.locale[lang].opts[classType]) {
                state.locale[lang].opts[classType] = {};
              }
              if (!state.locale[lang].opts[classType][country2]) {
                state.locale[lang].opts[classType][country2] = {};
              }
              for (var i = 0, ilen = courts.length; i < ilen; i++) {
                state.locale[lang].opts[classType][country2][courts[i]] = cls;
              }
            }
          }
        },
        INIT_JURISDICTION_MACROS: function(state, Item, item, macroName) {
          if (Item["best-jurisdiction"]) {
            return true;
          }
          if (!state.sys.retrieveStyleModule || !CSL2.MODULE_MACROS[macroName] || !Item.jurisdiction) {
            return false;
          }
          var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
          if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {
            var res = state.retrieveAllStyleModules(jurisdictionList);
            for (var jurisdiction2 in res) {
              var fallback = state.loadStyleModule(jurisdiction2, res[jurisdiction2]);
              if (fallback) {
                if (!res[fallback]) {
                  Object.assign(res, state.retrieveAllStyleModules([fallback]));
                  state.loadStyleModule(fallback, res[fallback], true);
                }
              }
            }
          }
          if (state.opt.parallel.enable) {
            if (!state.parallel) {
              state.parallel = new CSL2.Parallel(state);
            }
          }
          for (var i = 0, ilen = jurisdictionList.length; i < ilen; i++) {
            var jurisdiction2 = jurisdictionList[i];
            if (item) {
              if (state.juris[jurisdiction2] && !item["best-jurisdiction"] && state.juris[jurisdiction2].types.locator) {
                Item["best-jurisdiction"] = jurisdiction2;
              }
            }
            if (state.juris[jurisdiction2] && state.juris[jurisdiction2].types[Item.type]) {
              Item["best-jurisdiction"] = jurisdiction2;
              return true;
            }
          }
          return false;
        }
      };
      CSL2.XmlJSON = function(dataObj) {
        this.dataObj = dataObj;
        this.institution = {
          name: "institution",
          attrs: {
            "institution-parts": "long",
            "delimiter": ", "
          },
          children: [
            {
              name: "institution-part",
              attrs: {
                name: "long"
              },
              children: []
            }
          ]
        };
      };
      CSL2.XmlJSON.prototype.clean = function(json) {
        return json;
      };
      CSL2.XmlJSON.prototype.getStyleId = function(myjson, styleName) {
        var tagName = "id";
        if (styleName) {
          tagName = "title";
        }
        var ret = "";
        var children = myjson.children;
        for (var i = 0, ilen = children.length; i < ilen; i++) {
          if (children[i].name === "info") {
            var grandkids = children[i].children;
            for (var j = 0, jlen = grandkids.length; j < jlen; j++) {
              if (grandkids[j].name === tagName) {
                ret = grandkids[j].children[0];
              }
            }
          }
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.children = function(myjson) {
        if (myjson && myjson.children.length) {
          return myjson.children.slice();
        } else {
          return false;
        }
      };
      CSL2.XmlJSON.prototype.nodename = function(myjson) {
        return myjson ? myjson.name : null;
      };
      CSL2.XmlJSON.prototype.attributes = function(myjson) {
        var ret = {};
        for (var attrname in myjson.attrs) {
          ret["@" + attrname] = myjson.attrs[attrname];
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.content = function(myjson) {
        var ret = "";
        if (!myjson || !myjson.children) {
          return ret;
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "string") {
            ret += myjson.children[i];
          }
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.namespace = {};
      CSL2.XmlJSON.prototype.numberofnodes = function(myjson) {
        if (myjson && typeof myjson.length == "number") {
          return myjson.length;
        } else {
          return 0;
        }
      };
      CSL2.XmlJSON.prototype.getAttributeValue = function(myjson, name, namespace) {
        var ret = "";
        if (namespace) {
          name = namespace + ":" + name;
        }
        if (myjson) {
          if (myjson.attrs) {
            if (myjson.attrs[name]) {
              ret = myjson.attrs[name];
            } else {
              ret = "";
            }
          }
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.getNodeValue = function(myjson, name) {
        var ret = "";
        if (name) {
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name === name) {
              if (myjson.children[i].children.length) {
                ret = myjson.children[i];
              } else {
                ret = "";
              }
            }
          }
        } else if (myjson) {
          ret = myjson;
        }
        if (ret && ret.children && ret.children.length == 1 && typeof ret.children[0] === "string") {
          ret = ret.children[0];
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myjson, nodename, partname, attrname, val) {
        var pos, len, xml, nodes, node;
        if (attrname.slice(0, 1) === "@") {
          attrname = attrname.slice(1);
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {
            myjson.children[i].attrs[attrname] = val;
          }
        }
      };
      CSL2.XmlJSON.prototype.deleteNodeByNameAttribute = function(myjson, val) {
        var i, ilen;
        for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (!myjson.children[i] || typeof myjson.children[i] === "string") {
            continue;
          }
          if (myjson.children[i].attrs.name == val) {
            myjson.children = myjson.children.slice(0, i).concat(myjson.children.slice(i + 1));
          }
        }
      };
      CSL2.XmlJSON.prototype.deleteAttribute = function(myjson, attrname) {
        var i, ilen;
        if (typeof myjson.attrs[attrname] !== "undefined") {
          myjson.attrs.pop(attrname);
        }
      };
      CSL2.XmlJSON.prototype.setAttribute = function(myjson, attr, val) {
        myjson.attrs[attr] = val;
        return false;
      };
      CSL2.XmlJSON.prototype.nodeCopy = function(myjson, clone) {
        if (!clone) {
          var clone = {};
        }
        if (typeof clone === "object" && typeof clone.length === "undefined") {
          for (var key in myjson) {
            if (typeof myjson[key] === "string") {
              clone[key] = myjson[key];
            } else if (typeof myjson[key] === "object") {
              if (typeof myjson[key].length === "undefined") {
                clone[key] = this.nodeCopy(myjson[key], {});
              } else {
                clone[key] = this.nodeCopy(myjson[key], []);
              }
            }
          }
        } else {
          for (var i = 0, ilen = myjson.length; i < ilen; i += 1) {
            if (typeof myjson[i] === "string") {
              clone[i] = myjson[i];
            } else {
              clone[i] = this.nodeCopy(myjson[i], {});
            }
          }
        }
        return clone;
      };
      CSL2.XmlJSON.prototype.getNodesByName = function(myjson, name, nameattrval, ret) {
        var nodes, node, pos, len;
        if (!ret) {
          var ret = [];
        }
        if (!myjson || !myjson.children) {
          return ret;
        }
        if (name === myjson.name) {
          if (nameattrval) {
            if (nameattrval === myjson.attrs.name) {
              ret.push(myjson);
            }
          } else {
            ret.push(myjson);
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] !== "object") {
            continue;
          }
          this.getNodesByName(myjson.children[i], name, nameattrval, ret);
        }
        return ret;
      };
      CSL2.XmlJSON.prototype.nodeNameIs = function(myjson, name) {
        if (typeof myjson === "undefined") {
          return false;
        }
        if (name == myjson.name) {
          return true;
        }
        return false;
      };
      CSL2.XmlJSON.prototype.makeXml = function(myjson) {
        if (typeof myjson === "string") {
          if (myjson.slice(0, 1) === "<") {
            myjson = this.jsonStringWalker.walkToObject(myjson);
          } else {
            myjson = JSON.parse(myjson);
          }
        }
        return myjson;
      };
      CSL2.XmlJSON.prototype.insertChildNodeAfter = function(parent, node, pos, datejson) {
        for (var i = 0, ilen = parent.children.length; i < ilen; i += 1) {
          if (node === parent.children[i]) {
            parent.children = parent.children.slice(0, i).concat([datejson]).concat(parent.children.slice(i + 1));
            break;
          }
        }
        return parent;
      };
      CSL2.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {
        if (myjson.name === "group") {
          var useme = true;
          var mustHaves = ["publisher", "publisher-place"];
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);
            var isText = myjson.children[i].name === "text";
            if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {
              mustHaves = mustHaves.slice(0, haveVarname).concat(mustHaves.slice(haveVarname + 1));
            } else {
              useme = false;
              break;
            }
          }
          if (useme && !mustHaves.length) {
            myjson.attrs["has-publisher-and-publisher-place"] = true;
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "object") {
            this.insertPublisherAndPlace(myjson.children[i]);
          }
        }
      };
      CSL2.XmlJSON.prototype.isChildOfSubstitute = function(parents) {
        if (parents.length > 0) {
          var myparents = parents.slice();
          var parent = myparents.pop();
          if (parent === "substitute") {
            return true;
          } else {
            return this.isChildOfSubstitute(myparents);
          }
        }
        return false;
      };
      CSL2.XmlJSON.prototype.addMissingNameNodes = function(myjson, parents) {
        if (!parents) {
          parents = [];
        }
        if (myjson.name === "names") {
          if (!this.isChildOfSubstitute(parents)) {
            var addName = true;
            for (var i = 0, ilen = myjson.children.length; i < ilen; i++) {
              if (myjson.children[i].name === "name") {
                addName = false;
                break;
              }
            }
            if (addName) {
              myjson.children = [{ name: "name", attrs: {}, children: [] }].concat(myjson.children);
            }
          }
        }
        parents.push(myjson.name);
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "object") {
            this.addMissingNameNodes(myjson.children[i], parents);
          }
        }
        parents.pop();
      };
      CSL2.XmlJSON.prototype.addInstitutionNodes = function(myjson) {
        var names2, thenames, institution2, theinstitution, name, thename, xml, pos, len;
        if (myjson.name === "names") {
          var attributes = {};
          var insertPos = -1;
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (myjson.children[i].name == "name") {
              for (var key in myjson.children[i].attrs) {
                attributes[key] = myjson.children[i].attrs[key];
              }
              attributes.delimiter = myjson.children[i].attrs.delimiter;
              attributes.and = myjson.children[i].attrs.and;
              insertPos = i;
              for (var k = 0, klen = myjson.children[i].children.length; k < klen; k += 1) {
                if (myjson.children[i].children[k].attrs.name !== "family") {
                  continue;
                }
                for (var key in myjson.children[i].children[k].attrs) {
                  attributes[key] = myjson.children[i].children[k].attrs[key];
                }
              }
            }
            if (myjson.children[i].name == "institution") {
              insertPos = -1;
              break;
            }
          }
          if (insertPos > -1) {
            var institution2 = this.nodeCopy(this.institution);
            for (var i = 0, ilen = CSL2.INSTITUTION_KEYS.length; i < ilen; i += 1) {
              var attrname = CSL2.INSTITUTION_KEYS[i];
              if (typeof attributes[attrname] !== "undefined") {
                institution2.children[0].attrs[attrname] = attributes[attrname];
              }
              if (attributes.delimiter) {
                institution2.attrs.delimiter = attributes.delimiter;
              }
              if (attributes.and) {
                institution2.attrs.and = attributes.and;
              }
            }
            myjson.children = myjson.children.slice(0, insertPos + 1).concat([institution2]).concat(myjson.children.slice(insertPos + 1));
          }
        }
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (typeof myjson.children[i] === "string") {
            continue;
          }
          this.addInstitutionNodes(myjson.children[i]);
        }
      };
      CSL2.XmlJSON.prototype.flagDateMacros = function(myjson) {
        for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (myjson.children[i].name === "macro") {
            if (this.inspectDateMacros(myjson.children[i])) {
              myjson.children[i].attrs["macro-has-date"] = "true";
            }
          }
        }
      };
      CSL2.XmlJSON.prototype.inspectDateMacros = function(myjson) {
        if (!myjson || !myjson.children) {
          return false;
        }
        if (myjson.name === "date") {
          return true;
        } else {
          for (var i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
            if (this.inspectDateMacros(myjson.children[i])) {
              return true;
            }
          }
        }
        return false;
      };
      CSL2.stripXmlProcessingInstruction = function(xml) {
        if (!xml) {
          return xml;
        }
        xml = xml.replace(/^<\?[^?]+\?>/, "");
        xml = xml.replace(/<!--[^>]+-->/g, "");
        xml = xml.replace(/^\s+/g, "");
        xml = xml.replace(/\s+$/g, "");
        return xml;
      };
      CSL2.parseXml = function(str) {
        var _pos = 0;
        var _obj = { children: [] };
        var _stack = [_obj.children];
        function _listifyString(str2) {
          str2 = str2.split(/(?:\r\n|\n|\r)/).join(" ").replace(/>[	 ]+</g, "><").replace(/<\!--.*?-->/g, "");
          var lst2 = str2.split("><");
          var stylePos = null;
          for (var i2 = 0, ilen2 = lst2.length; i2 < ilen2; i2++) {
            if (i2 > 0) {
              lst2[i2] = "<" + lst2[i2];
            }
            if (i2 < lst2.length - 1) {
              lst2[i2] = lst2[i2] + ">";
            }
            if (typeof stylePos != "number") {
              if (lst2[i2].slice(0, 7) === "<style " || lst2[i2].slice(0, 8) == "<locale ") {
                stylePos = i2;
              }
            }
          }
          lst2 = lst2.slice(stylePos);
          for (var i2 = lst2.length - 2; i2 > -1; i2--) {
            if (lst2[i2].slice(1).indexOf("<") === -1) {
              var stub = lst2[i2].slice(0, 5);
              if (lst2[i2].slice(-2) !== "/>") {
                if (stub === "<term") {
                  if (lst2[i2 + 1].slice(0, 6) === "</term") {
                    lst2[i2] = lst2[i2] + lst2[i2 + 1];
                    lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                  }
                } else if (["<sing", "<mult"].indexOf(stub) > -1) {
                  if (lst2[i2].slice(-2) !== "/>" && lst2[i2 + 1].slice(0, 1) === "<") {
                    lst2[i2] = lst2[i2] + lst2[i2 + 1];
                    lst2 = lst2.slice(0, i2 + 1).concat(lst2.slice(i2 + 2));
                  }
                }
              }
            }
          }
          return lst2;
        }
        function _decodeHtmlEntities(str2) {
          return str2.split("&amp;").join("&").split("&quot;").join('"').split("&gt;").join(">").split("&lt;").join("<").replace(/&#([0-9]{1,6});/gi, function(match, numStr) {
            var num = parseInt(numStr, 10);
            return String.fromCharCode(num);
          }).replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr) {
            var num = parseInt(numStr, 16);
            return String.fromCharCode(num);
          });
        }
        function _getAttributes(elem2) {
          var m = elem2.match(/([^\'\"=	 ]+)=(?:\"[^\"]*\"|\'[^\']*\')/g);
          if (m) {
            for (var i2 = 0, ilen2 = m.length; i2 < ilen2; i2++) {
              m[i2] = m[i2].replace(/=.*/, "");
            }
          }
          return m;
        }
        function _getAttribute(elem2, attr) {
          var rex = RegExp("^.*[	 ]+" + attr + `=("(?:[^"]*)"|'(?:[^']*)').*$`);
          var m = elem2.match(rex);
          return m ? m[1].slice(1, -1) : null;
        }
        function _getTagName(elem2) {
          var rex = RegExp("^<([^	 />]+)");
          var m = elem2.match(rex);
          return m ? m[1] : null;
        }
        function _castObjectFromOpeningTag(elem2) {
          var obj = {};
          obj.name = _getTagName(elem2);
          obj.attrs = {};
          var attributes = _getAttributes(elem2);
          if (attributes) {
            for (var i2 = 0, ilen2 = attributes.length; i2 < ilen2; i2++) {
              var attr = {
                name: attributes[i2],
                value: _getAttribute(elem2, attributes[i2])
              };
              obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);
            }
          }
          obj.children = [];
          return obj;
        }
        function _extractTextFromCompositeElement(elem2) {
          var m = elem2.match(/^.*>([^<]*)<.*$/);
          return _decodeHtmlEntities(m[1]);
        }
        function _appendToChildren(obj) {
          _stack.slice(-1)[0].push(obj);
        }
        function _extendStackWithNewChildren(obj) {
          _stack.push(obj.children);
        }
        function processElement(elem2) {
          var obj;
          if (elem2.slice(1).indexOf("<") > -1) {
            var tag = elem2.slice(0, elem2.indexOf(">") + 1);
            obj = _castObjectFromOpeningTag(tag);
            obj.children = [_extractTextFromCompositeElement(elem2)];
            _appendToChildren(obj);
          } else if (elem2.slice(-2) === "/>") {
            obj = _castObjectFromOpeningTag(elem2);
            if (_getTagName(elem2) === "term") {
              obj.children.push("");
            }
            _appendToChildren(obj);
          } else if (elem2.slice(0, 2) === "</") {
            _stack.pop();
          } else {
            obj = _castObjectFromOpeningTag(elem2);
            _appendToChildren(obj);
            _extendStackWithNewChildren(obj);
          }
        }
        var lst = _listifyString(str);
        for (var i = 0, ilen = lst.length; i < ilen; i++) {
          var elem = lst[i];
          processElement(elem);
        }
        return _obj.children[0];
      };
      CSL2.XmlDOM = function(dataObj) {
        this.dataObj = dataObj;
        if (typeof DOMParser == "undefined") {
          DOMParser = function() {
          };
          DOMParser.prototype.parseFromString = function(str2, contentType) {
            if (typeof ActiveXObject != "undefined") {
              var xmldata = new ActiveXObject("MSXML.DomDocument");
              xmldata.async = false;
              xmldata.loadXML(str2);
              return xmldata;
            } else if (typeof XMLHttpRequest != "undefined") {
              var xmldata = new XMLHttpRequest();
              if (!contentType) {
                contentType = "text/xml";
              }
              xmldata.open("GET", "data:" + contentType + ";charset=utf-8," + encodeURIComponent(str2), false);
              if (xmldata.overrideMimeType) {
                xmldata.overrideMimeType(contentType);
              }
              xmldata.send(null);
              return xmldata.responseXML;
            } else if (typeof marknote != "undefined") {
              var parser = new marknote.Parser();
              return parser.parse(str2);
            }
          };
          this.hasAttributes = function(node) {
            var ret;
            if (node.attributes && node.attributes.length) {
              ret = true;
            } else {
              ret = false;
            }
            return ret;
          };
        } else {
          this.hasAttributes = function(node) {
            var ret;
            if (node.attributes && node.attributes.length) {
              ret = true;
            } else {
              ret = false;
            }
            return ret;
          };
        }
        this.importNode = function(doc, srcElement) {
          var ret;
          if (typeof doc.importNode == "undefined") {
            ret = this._importNode(doc, srcElement, true);
          } else {
            ret = doc.importNode(srcElement, true);
          }
          return ret;
        };
        this._importNode = function(doc, node, allChildren) {
          switch (node.nodeType) {
            case 1:
              var newNode = doc.createElement(node.nodeName);
              if (node.attributes && node.attributes.length > 0)
                for (var i = 0, il = node.attributes.length; i < il; )
                  newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
              if (allChildren && node.childNodes && node.childNodes.length > 0)
                for (var i = 0, il = node.childNodes.length; i < il; )
                  newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));
              return newNode;
              break;
            case 3:
            case 4:
            case 8:
          }
        };
        this.parser = new DOMParser();
        var str = '<docco><institution institution-parts="long" delimiter=", " substitute-use-first="1" use-last="1"><institution-part name="long"/></institution></docco>';
        var inst_doc = this.parser.parseFromString(str, "text/xml");
        var inst_node = inst_doc.getElementsByTagName("institution");
        this.institution = inst_node.item(0);
        var inst_part_node = inst_doc.getElementsByTagName("institution-part");
        this.institutionpart = inst_part_node.item(0);
        this.ns = "http://purl.org/net/xbiblio/csl";
      };
      CSL2.XmlDOM.prototype.clean = function(xml) {
        xml = xml.replace(/<\?[^?]+\?>/g, "");
        xml = xml.replace(/<![^>]+>/g, "");
        xml = xml.replace(/^\s+/, "");
        xml = xml.replace(/\s+$/, "");
        xml = xml.replace(/^\n*/, "");
        return xml;
      };
      CSL2.XmlDOM.prototype.getStyleId = function(myxml, styleName) {
        var text = "";
        var tagName = "id";
        if (styleName) {
          tagName = "title";
        }
        var node = myxml.getElementsByTagName(tagName);
        if (node && node.length) {
          node = node.item(0);
        }
        if (node) {
          text = node.textContent;
        }
        if (!text) {
          text = node.innerText;
        }
        if (!text) {
          text = node.innerHTML;
        }
        return text;
      };
      CSL2.XmlDOM.prototype.children = function(myxml) {
        var children, pos, len, ret;
        if (myxml) {
          ret = [];
          children = myxml.childNodes;
          for (pos = 0, len = children.length; pos < len; pos += 1) {
            if (children[pos].nodeName != "#text") {
              ret.push(children[pos]);
            }
          }
          return ret;
        } else {
          return [];
        }
      };
      CSL2.XmlDOM.prototype.nodename = function(myxml) {
        var ret = myxml.nodeName;
        return ret;
      };
      CSL2.XmlDOM.prototype.attributes = function(myxml) {
        var ret, attrs, attr, key, xml, pos, len;
        ret = new Object();
        if (myxml && this.hasAttributes(myxml)) {
          attrs = myxml.attributes;
          for (pos = 0, len = attrs.length; pos < len; pos += 1) {
            attr = attrs[pos];
            ret["@" + attr.name] = attr.value;
          }
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.content = function(myxml) {
        var ret;
        if (typeof myxml.textContent != "undefined") {
          ret = myxml.textContent;
        } else if (typeof myxml.innerText != "undefined") {
          ret = myxml.innerText;
        } else {
          ret = myxml.txt;
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.namespace = {
        "xml": "http://www.w3.org/XML/1998/namespace"
      };
      CSL2.XmlDOM.prototype.numberofnodes = function(myxml) {
        if (myxml) {
          return myxml.length;
        } else {
          return 0;
        }
      };
      CSL2.XmlDOM.prototype.getAttributeName = function(attr) {
        var ret = attr.name;
        return ret;
      };
      CSL2.XmlDOM.prototype.getAttributeValue = function(myxml, name, namespace) {
        var ret = "";
        if (namespace) {
          name = namespace + ":" + name;
        }
        if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {
          ret = myxml.getAttribute(name);
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.getNodeValue = function(myxml, name) {
        var ret = null;
        if (name) {
          var vals = myxml.getElementsByTagName(name);
          if (vals.length > 0) {
            if (typeof vals[0].textContent != "undefined") {
              ret = vals[0].textContent;
            } else if (typeof vals[0].innerText != "undefined") {
              ret = vals[0].innerText;
            } else {
              ret = vals[0].text;
            }
          }
        }
        if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || myxml.childNodes.length == 1 && myxml.firstChild.nodeName == "#text")) {
          if (typeof myxml.textContent != "undefined") {
            ret = myxml.textContent;
          } else if (typeof myxml.innerText != "undefined") {
            ret = myxml.innerText;
          } else {
            ret = myxml.text;
          }
        }
        if (ret === null) {
          ret = myxml;
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function(myxml, nodename, partname, attrname, val) {
        var pos, len, xml, nodes, node;
        if (attrname.slice(0, 1) === "@") {
          attrname = attrname.slice(1);
        }
        nodes = myxml.getElementsByTagName(nodename);
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (node.getAttribute("name") != partname) {
            continue;
          }
          node.setAttribute(attrname, val);
        }
      };
      CSL2.XmlDOM.prototype.deleteNodeByNameAttribute = function(myxml, val) {
        var pos, len, node, nodes;
        nodes = myxml.childNodes;
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (!node || node.nodeType == node.TEXT_NODE) {
            continue;
          }
          if (this.hasAttributes(node) && node.getAttribute("name") == val) {
            myxml.removeChild(nodes[pos]);
          }
        }
      };
      CSL2.XmlDOM.prototype.deleteAttribute = function(myxml, attr) {
        myxml.removeAttribute(attr);
      };
      CSL2.XmlDOM.prototype.setAttribute = function(myxml, attr, val) {
        if (!myxml.ownerDocument) {
          myxml = myxml.firstChild;
        }
        if (["function", "unknown"].indexOf(typeof myxml.setAttribute) > -1) {
          myxml.setAttribute(attr, val);
        }
        return false;
      };
      CSL2.XmlDOM.prototype.nodeCopy = function(myxml) {
        var cloned_node = myxml.cloneNode(true);
        return cloned_node;
      };
      CSL2.XmlDOM.prototype.getNodesByName = function(myxml, name, nameattrval) {
        var ret, nodes, node, pos, len;
        ret = [];
        nodes = myxml.getElementsByTagName(name);
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes.item(pos);
          if (nameattrval && !(this.hasAttributes(node) && node.getAttribute("name") == nameattrval)) {
            continue;
          }
          ret.push(node);
        }
        return ret;
      };
      CSL2.XmlDOM.prototype.nodeNameIs = function(myxml, name) {
        if (name == myxml.nodeName) {
          return true;
        }
        return false;
      };
      CSL2.XmlDOM.prototype.makeXml = function(myxml) {
        var ret, topnode;
        if (!myxml) {
          myxml = "<docco><bogus/></docco>";
        }
        myxml = myxml.replace(/\s*<\?[^>]*\?>\s*\n*/g, "");
        var nodetree = this.parser.parseFromString(myxml, "application/xml");
        return nodetree.firstChild;
      };
      CSL2.XmlDOM.prototype.insertChildNodeAfter = function(parent, node, pos, datexml) {
        var myxml, xml;
        myxml = this.importNode(node.ownerDocument, datexml);
        parent.replaceChild(myxml, node);
        return parent;
      };
      CSL2.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {
        var group = myxml.getElementsByTagName("group");
        for (var i = 0, ilen = group.length; i < ilen; i += 1) {
          var node = group.item(i);
          var skippers = [];
          for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
            if (node.childNodes.item(j).nodeType !== 1) {
              skippers.push(j);
            }
          }
          if (node.childNodes.length - skippers.length === 2) {
            var twovars = [];
            for (var j = 0, jlen = 2; j < jlen; j += 1) {
              if (skippers.indexOf(j) > -1) {
                continue;
              }
              var child = node.childNodes.item(j);
              var subskippers = [];
              for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                if (child.childNodes.item(k).nodeType !== 1) {
                  subskippers.push(k);
                }
              }
              if (child.childNodes.length - subskippers.length === 0) {
                twovars.push(child.getAttribute("variable"));
                if (child.getAttribute("suffix") || child.getAttribute("prefix")) {
                  twovars = [];
                  break;
                }
              }
            }
            if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
              node.setAttribute("has-publisher-and-publisher-place", true);
            }
          }
        }
      };
      CSL2.XmlDOM.prototype.isChildOfSubstitute = function(node) {
        if (node.parentNode) {
          if (node.parentNode.tagName.toLowerCase() === "substitute") {
            return true;
          } else {
            return this.isChildOfSubstitute(node.parentNode);
          }
        }
        return false;
      };
      CSL2.XmlDOM.prototype.addMissingNameNodes = function(myxml) {
        var nameslist = myxml.getElementsByTagName("names");
        for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {
          var names2 = nameslist.item(i);
          var namelist = names2.getElementsByTagName("name");
          if ((!namelist || namelist.length === 0) && !this.isChildOfSubstitute(names2)) {
            var doc = names2.ownerDocument;
            var name = doc.createElement("name");
            names2.appendChild(name);
          }
        }
      };
      CSL2.XmlDOM.prototype.addInstitutionNodes = function(myxml) {
        var names2, thenames, institution2, theinstitution, theinstitutionpart, name, thename, xml, pos, len;
        names2 = myxml.getElementsByTagName("names");
        for (pos = 0, len = names2.length; pos < len; pos += 1) {
          thenames = names2.item(pos);
          name = thenames.getElementsByTagName("name");
          if (name.length == 0) {
            continue;
          }
          institution2 = thenames.getElementsByTagName("institution");
          if (institution2.length == 0) {
            theinstitution = this.importNode(myxml.ownerDocument, this.institution);
            theinstitutionpart = theinstitution.getElementsByTagName("institution-part").item(0);
            thename = name.item(0);
            thenames.insertBefore(theinstitution, thename.nextSibling);
            for (var j = 0, jlen = CSL2.INSTITUTION_KEYS.length; j < jlen; j += 1) {
              var attrname = CSL2.INSTITUTION_KEYS[j];
              var attrval = thename.getAttribute(attrname);
              if (attrval) {
                theinstitutionpart.setAttribute(attrname, attrval);
              }
            }
            var nameparts = thename.getElementsByTagName("name-part");
            for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {
              if (nameparts[j].getAttribute("name") === "family") {
                for (var k = 0, klen = CSL2.INSTITUTION_KEYS.length; k < klen; k += 1) {
                  var attrname = CSL2.INSTITUTION_KEYS[k];
                  var attrval = nameparts[j].getAttribute(attrname);
                  if (attrval) {
                    theinstitutionpart.setAttribute(attrname, attrval);
                  }
                }
              }
            }
          }
        }
      };
      CSL2.XmlDOM.prototype.flagDateMacros = function(myxml) {
        var pos, len, thenode, thedate;
        var nodes = myxml.getElementsByTagName("macro");
        for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          thenode = nodes.item(pos);
          thedate = thenode.getElementsByTagName("date");
          if (thedate.length) {
            thenode.setAttribute("macro-has-date", "true");
          }
        }
      };
      CSL2.setupXml = function(xmlObject) {
        var dataObj = {};
        var parser = null;
        if (typeof xmlObject !== "undefined") {
          if (typeof xmlObject === "string") {
            xmlObject = xmlObject.replace("^\uFEFF", "").replace(/^\s+/, "");
            if (xmlObject.slice(0, 1) === "<") {
              dataObj = CSL2.parseXml(xmlObject);
            } else {
              dataObj = JSON.parse(xmlObject);
            }
            parser = new CSL2.XmlJSON(dataObj);
          } else if (typeof xmlObject.getAttribute !== "undefined") {
            parser = new CSL2.XmlDOM(xmlObject);
          } else if (typeof xmlObject.toXMLString !== "undefined") {
            parser = new CSL2.XmlE4X(xmlObject);
          } else {
            parser = new CSL2.XmlJSON(xmlObject);
          }
        } else {
          CSL2.error("unable to parse XML input");
        }
        if (!parser) {
          CSL2.error("citeproc-js error: unable to parse CSL style or locale object");
        }
        return parser;
      };
      CSL2.getSortCompare = function(default_locale) {
        if (CSL2.stringCompare) {
          return CSL2.stringCompare;
        }
        var me = this;
        var strcmp;
        var strcmp_opts = {
          sensitivity: "base",
          ignorePunctuation: true,
          numeric: true
        };
        if (!default_locale) {
          default_locale = "en-US";
        }
        strcmp = function(a, b) {
          return CSL2.toLocaleLowerCase.call(me, a).localeCompare(CSL2.toLocaleLowerCase.call(me, b), default_locale, strcmp_opts);
        };
        var stripPunct = function(str) {
          return str.replace(/^[\[\]\'\"]*/g, "");
        };
        var getBracketPreSort = function() {
          if (!strcmp("[x", "x")) {
            return false;
          } else {
            return function(a, b) {
              return strcmp(stripPunct(a), stripPunct(b));
            };
          }
        };
        var bracketPreSort = getBracketPreSort();
        var sortCompare = function(a, b) {
          if (bracketPreSort) {
            return bracketPreSort(a, b);
          } else {
            return strcmp(a, b);
          }
        };
        return sortCompare;
      };
      CSL2.ambigConfigDiff = function(a, b) {
        var pos, len, ppos, llen;
        if (a.names.length !== b.names.length) {
          return 1;
        } else {
          for (pos = 0, len = a.names.length; pos < len; pos += 1) {
            if (a.names[pos] !== b.names[pos]) {
              return 1;
            } else {
              for (ppos = 0, llen = a.givens[pos]; ppos < llen; ppos += 1) {
                if (a.givens[pos][ppos] !== b.givens[pos][ppos]) {
                  return 1;
                }
              }
            }
          }
        }
        if (a.disambiguate != b.disambiguate) {
          return 1;
        }
        if (a.year_suffix !== b.year_suffix) {
          return 1;
        }
        return 0;
      };
      CSL2.cloneAmbigConfig = function(config, oldconfig) {
        var i, ilen, j, jlen, param;
        var ret = {};
        ret.names = [];
        ret.givens = [];
        ret.year_suffix = false;
        ret.disambiguate = false;
        for (i = 0, ilen = config.names.length; i < ilen; i += 1) {
          param = config.names[i];
          ret.names[i] = param;
        }
        for (i = 0, ilen = config.givens.length; i < ilen; i += 1) {
          param = [];
          for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {
            param.push(config.givens[i][j]);
          }
          ret.givens.push(param);
        }
        if (oldconfig) {
          ret.year_suffix = oldconfig.year_suffix;
          ret.disambiguate = oldconfig.disambiguate;
        } else {
          ret.year_suffix = config.year_suffix;
          ret.disambiguate = config.disambiguate;
        }
        return ret;
      };
      CSL2.getAmbigConfig = function() {
        var config, ret;
        config = this.tmp.disambig_request;
        if (!config) {
          config = this.tmp.disambig_settings;
        }
        var ret = CSL2.cloneAmbigConfig(config);
        return ret;
      };
      CSL2.getMaxVals = function() {
        return this.tmp.names_max.mystack.slice();
      };
      CSL2.getMinVal = function() {
        return this.tmp["et-al-min"];
      };
      CSL2.tokenExec = function(token, Item, item) {
        var next, maybenext, exec, debug;
        debug = false;
        next = token.next;
        maybenext = false;
        var record = function(result) {
          if (result) {
            this.tmp.jump.replace("succeed");
            return token.succeed;
          } else {
            this.tmp.jump.replace("fail");
            return token.fail;
          }
        };
        if (token.test) {
          next = record.call(this, token.test(Item, item));
        }
        for (var i = 0, ilen = token.execs.length; i < ilen; i++) {
          exec = token.execs[i];
          maybenext = exec.call(token, this, Item, item);
          if (maybenext) {
            next = maybenext;
          }
        }
        if (debug) {
          CSL2.debug(token.name + " (" + token.tokentype + ") ---> done");
        }
        return next;
      };
      CSL2.expandMacro = function(macro_key_token, target) {
        var mkey, macro_nodes, end_of_macro, func;
        mkey = macro_key_token.postponed_macro;
        var sort_direction = macro_key_token.strings.sort_direction;
        macro_key_token = new CSL2.Token("group", CSL2.START);
        var hasDate = false;
        var macroid = false;
        macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, "macro", mkey);
        if (macro_nodes.length) {
          macroid = this.cslXml.getAttributeValue(macro_nodes[0], "cslid");
          hasDate = this.cslXml.getAttributeValue(macro_nodes[0], "macro-has-date");
        }
        if (hasDate) {
          mkey = mkey + "@" + this.build.current_default_locale;
          func = function(state) {
            if (state.tmp.extension) {
              state.tmp["doing-macro-with-date"] = true;
            }
          };
          macro_key_token.execs.push(func);
        }
        if (this.build.macro_stack.indexOf(mkey) > -1) {
          CSL2.error('CSL processor error: call to macro "' + mkey + '" would cause an infinite loop');
        } else {
          this.build.macro_stack.push(mkey);
        }
        macro_key_token.cslid = macroid;
        if (CSL2.MODULE_MACROS[mkey]) {
          macro_key_token.juris = mkey;
          this.opt.update_mode = CSL2.POSITION;
        }
        CSL2.Node.group.build.call(macro_key_token, this, target, true);
        if (!this.cslXml.getNodeValue(macro_nodes)) {
          CSL2.error('CSL style error: undefined macro "' + mkey + '"');
        }
        var mytarget = CSL2.getMacroTarget.call(this, mkey);
        if (mytarget) {
          CSL2.buildMacro.call(this, mytarget, macro_nodes);
          CSL2.configureMacro.call(this, mytarget);
        }
        if (!this.build.extension) {
          var func = function(macro_name) {
            return function(state, Item, item) {
              var next = 0;
              while (next < state.macros[macro_name].length) {
                next = CSL2.tokenExec.call(state, state.macros[macro_name][next], Item, item);
              }
            };
          }(mkey);
          var text_node = new CSL2.Token("text", CSL2.SINGLETON);
          text_node.execs.push(func);
          target.push(text_node);
        }
        end_of_macro = new CSL2.Token("group", CSL2.END);
        end_of_macro.strings.sort_direction = sort_direction;
        if (hasDate) {
          func = function(state) {
            if (state.tmp.extension) {
              state.tmp["doing-macro-with-date"] = false;
            }
          };
          end_of_macro.execs.push(func);
        }
        if (macro_key_token.juris) {
          end_of_macro.juris = mkey;
        }
        CSL2.Node.group.build.call(end_of_macro, this, target, true);
        this.build.macro_stack.pop();
      };
      CSL2.getMacroTarget = function(mkey) {
        var mytarget = false;
        if (this.build.extension) {
          mytarget = this[this.build.root + this.build.extension].tokens;
        } else if (!this.macros[mkey]) {
          mytarget = [];
          this.macros[mkey] = mytarget;
        }
        return mytarget;
      };
      CSL2.buildMacro = function(mytarget, macro_nodes) {
        var builder = CSL2.makeBuilder(this, mytarget);
        var mynode;
        if (typeof macro_nodes.length === "undefined") {
          mynode = macro_nodes;
        } else {
          mynode = macro_nodes[0];
        }
        builder(mynode);
      };
      CSL2.configureMacro = function(mytarget) {
        if (!this.build.extension) {
          this.configureTokenList(mytarget);
        }
      };
      CSL2.XmlToToken = function(state, tokentype, explicitTarget, var_stack) {
        var name, txt, attrfuncs, attributes, decorations, token, key, target;
        name = state.cslXml.nodename(this);
        if (state.build.skip && state.build.skip !== name) {
          return;
        }
        if (!name) {
          txt = state.cslXml.content(this);
          if (txt) {
            state.build.text = txt;
          }
          return;
        }
        if (!CSL2.Node[state.cslXml.nodename(this)]) {
          CSL2.error('Undefined node name "' + name + '".');
        }
        attrfuncs = [];
        attributes = state.cslXml.attributes(this);
        decorations = CSL2.setDecorations.call(this, state, attributes);
        token = new CSL2.Token(name, tokentype);
        if (tokentype !== CSL2.END || name === "if" || name === "else-if" || name === "layout") {
          for (var key in attributes) {
            if (attributes.hasOwnProperty(key)) {
              if (tokentype === CSL2.END && key !== "@language" && key !== "@locale") {
                continue;
              }
              if (attributes.hasOwnProperty(key)) {
                if (CSL2.Attributes[key]) {
                  try {
                    CSL2.Attributes[key].call(token, state, "" + attributes[key]);
                  } catch (e) {
                    CSL2.error(key + " attribute: " + e);
                  }
                } else {
                  CSL2.debug('warning: undefined attribute "' + key + '" in style');
                }
              }
            }
          }
          token.decorations = decorations;
          if (CSL2.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
            var_stack.push(token.variables);
          }
        } else if (tokentype === CSL2.END && attributes["@variable"]) {
          token.hasVariable = true;
          if (CSL2.DATE_VARIABLES.indexOf(attributes["@variable"]) > -1) {
            token.variables = var_stack.pop();
          }
        }
        if (explicitTarget) {
          target = explicitTarget;
        } else {
          target = state[state.build.area].tokens;
        }
        CSL2.Node[name].build.call(token, state, target, true);
      };
      CSL2.DateParser = function() {
        var epochPairs = [
          ["\u660E\u6CBB", 1867],
          ["\u5927\u6B63", 1911],
          ["\u662D\u548C", 1925],
          ["\u5E73\u6210", 1988]
        ];
        var epochYearByName = {};
        for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
          var key = epochPairs[i][0];
          var val = epochPairs[i][1];
          epochYearByName[key] = val;
        }
        var epochMatchStrings = [];
        var epochMap = {};
        for (var i = 0, ilen = epochPairs.length; i < ilen; i++) {
          var pair = epochPairs[i];
          var val = pair[0];
          epochMatchStrings.push(val);
          epochMap[pair[0]] = pair[1];
        }
        var epochMatchString = epochMatchStrings.join("|");
        var epochSplitter = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)");
        var epochMatcher = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)", "g");
        var kanjiMonthDay = /(\u6708|\u5E74)/g;
        var kanjiYear = /\u65E5/g;
        var kanjiRange = /\u301c/g;
        var yearLast = "(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])";
        var yearFirst = "[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])";
        var numberVal = "[?0-9]{1,3}";
        var rangeSeparator = "[%%DATED%%]";
        var fuzzyChar = "[?~]";
        var chars = "[^-/~?0-9]+";
        var rexString = "(" + yearFirst + "|" + yearLast + "|" + numberVal + "|" + rangeSeparator + "|" + fuzzyChar + "|" + chars + ")";
        var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "-"));
        var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "/"));
        var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, "/").replace(/%%DATED%%/g, "-"));
        var monthString = "january february march april may june july august september october november december spring summer fall winter spring summer";
        this.monthStrings = monthString.split(" ");
        this.setOrderDayMonth = function() {
          this.monthGuess = 1;
          this.dayGuess = 0;
        };
        this.setOrderMonthDay = function() {
          this.monthGuess = 0;
          this.dayGuess = 1;
        };
        this.resetDateParserMonths = function() {
          this.monthSets = [];
          for (var i2 = 0, ilen2 = this.monthStrings.length; i2 < ilen2; i2++) {
            this.monthSets.push([this.monthStrings[i2]]);
          }
          this.monthAbbrevs = [];
          for (var i2 = 0, ilen2 = this.monthSets.length; i2 < ilen2; i2++) {
            this.monthAbbrevs.push([]);
            for (var j = 0, jlen = this.monthSets[i2].length; j < jlen; j++) {
              this.monthAbbrevs[i2].push(this.monthSets[i2][0].slice(0, 3));
            }
          }
          this.monthRexes = [];
          for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
            this.monthRexes.push(new RegExp("(?:" + this.monthAbbrevs[i2].join("|") + ")"));
          }
        };
        this.addDateParserMonths = function(lst) {
          if (typeof lst === "string") {
            lst = lst.split(/\s+/);
          }
          if (lst.length !== 12 && lst.length !== 16) {
            CSL2.debug("month [+season] list of " + lst.length + ", expected 12 or 16. Ignoring.");
            return;
          }
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            var abbrevLength = null;
            var skip = false;
            var insert = 3;
            var extendedSets = {};
            for (var j = 0, jlen = this.monthAbbrevs.length; j < jlen; j++) {
              extendedSets[j] = {};
              if (j === i2) {
                for (var k = 0, klen = this.monthAbbrevs[i2].length; k < klen; k++) {
                  if (this.monthAbbrevs[i2][k] === lst[i2].slice(0, this.monthAbbrevs[i2][k].length)) {
                    skip = true;
                    break;
                  }
                }
              } else {
                for (var k = 0, klen = this.monthAbbrevs[j].length; k < klen; k++) {
                  abbrevLength = this.monthAbbrevs[j][k].length;
                  if (this.monthAbbrevs[j][k] === lst[i2].slice(0, abbrevLength)) {
                    while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i2].slice(0, abbrevLength)) {
                      if (abbrevLength > lst[i2].length || abbrevLength > this.monthSets[j][k].length) {
                        CSL2.debug("unable to disambiguate month string in date parser: " + lst[i2]);
                        break;
                      } else {
                        abbrevLength += 1;
                      }
                    }
                    insert = abbrevLength;
                    extendedSets[j][k] = abbrevLength;
                  }
                }
              }
              for (var jKey in extendedSets) {
                for (var kKey in extendedSets[jKey]) {
                  abbrevLength = extendedSets[jKey][kKey];
                  jKey = parseInt(jKey, 10);
                  kKey = parseInt(kKey, 10);
                  this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);
                }
              }
            }
            if (!skip) {
              this.monthSets[i2].push(lst[i2]);
              this.monthAbbrevs[i2].push(lst[i2].slice(0, insert));
            }
          }
          this.monthRexes = [];
          this.monthRexStrs = [];
          for (var i2 = 0, ilen2 = this.monthAbbrevs.length; i2 < ilen2; i2++) {
            this.monthRexes.push(new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")"));
            this.monthRexStrs.push("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
          }
          if (this.monthAbbrevs.length === 18) {
            for (var i2 = 12, ilen2 = 14; i2 < ilen2; i2++) {
              this.monthRexes[i2 + 4] = new RegExp("^(?:" + this.monthAbbrevs[i2].join("|") + ")");
              this.monthRexStrs[i2 + 4] = "^(?:" + this.monthAbbrevs[i2].join("|") + ")";
            }
          }
        };
        this.convertDateObjectToArray = function(thedate) {
          thedate["date-parts"] = [];
          thedate["date-parts"].push([]);
          var slicelen = 0;
          var part;
          for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2++) {
            part = ["year", "month", "day"][i2];
            if (!thedate[part]) {
              break;
            }
            slicelen += 1;
            thedate["date-parts"][0].push(thedate[part]);
            delete thedate[part];
          }
          thedate["date-parts"].push([]);
          for (var i2 = 0, ilen2 = slicelen; i2 < ilen2; i2++) {
            part = ["year_end", "month_end", "day_end"][i2];
            if (!thedate[part]) {
              break;
            }
            thedate["date-parts"][1].push(thedate[part]);
            delete thedate[part];
          }
          if (thedate["date-parts"][0].length !== thedate["date-parts"][1].length) {
            thedate["date-parts"].pop();
          }
          return thedate;
        };
        this.convertDateObjectToString = function(thedate) {
          var ret = [];
          for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
            if (thedate[CSL2.DATE_PARTS_ALL[i2]]) {
              ret.push(thedate[CSL2.DATE_PARTS_ALL[i2]]);
            } else {
              break;
            }
          }
          return ret.join("-");
        };
        this._parseNumericDate = function(ret, delim, suff, txt) {
          if (!suff) {
            suff = "";
          }
          var lst = txt.split(delim);
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            if (lst[i2].length === 4) {
              ret["year" + suff] = lst[i2].replace(/^0*/, "");
              if (!i2) {
                lst = lst.slice(1);
              } else {
                lst = lst.slice(0, i2);
              }
              break;
            }
          }
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            lst[i2] = parseInt(lst[i2], 10);
          }
          if (lst.length === 1 || lst.length === 2 && !lst[1]) {
            var month = lst[0];
            if (month) {
              ret["month" + suff] = "" + lst[0];
            }
          } else if (lst.length === 2) {
            if (lst[this.monthGuess] > 12) {
              var month = lst[this.dayGuess];
              var day = lst[this.monthGuess];
              if (month) {
                ret["month" + suff] = "" + month;
                if (day) {
                  ret["day" + suff] = "" + day;
                }
              }
            } else {
              var month = lst[this.monthGuess];
              var day = lst[this.dayGuess];
              if (month) {
                ret["month" + suff] = "" + month;
                if (day) {
                  ret["day" + suff] = "" + day;
                }
              }
            }
          }
        };
        this.parseDateToObject = function(txt) {
          var orig = txt;
          var slashPos = -1;
          var dashPos = -1;
          var yearIsNegative = false;
          var lst;
          if (txt) {
            txt = txt.replace(/^(.*[0-9])T[0-9].*/, "$1");
            if (txt.slice(0, 1) === "-") {
              yearIsNegative = true;
              txt = txt.slice(1);
            }
            if (txt.match(/^[0-9]{1,3}$/)) {
              while (txt.length < 4) {
                txt = "0" + txt;
              }
            }
            txt = "" + txt;
            txt = txt.replace(/\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/, "");
            var m = txt.match(kanjiMonthDay);
            if (m) {
              txt = txt.replace(/\s+/g, "");
              txt = txt.replace(kanjiYear, "");
              txt = txt.replace(kanjiMonthDay, "-");
              txt = txt.replace(kanjiRange, "/");
              txt = txt.replace(/\-\//g, "/");
              txt = txt.replace(/-$/g, "");
              var slst = txt.split(epochSplitter);
              lst = [];
              var mm = txt.match(epochMatcher);
              if (mm) {
                var mmx = [];
                for (var i2 = 0, ilen2 = mm.length; i2 < ilen2; i2++) {
                  mmx = mmx.concat(mm[i2].match(/([^0-9]+)([0-9]+)/).slice(1));
                }
                for (var i2 = 0, ilen2 = slst.length; i2 < ilen2; i2++) {
                  lst.push(slst[i2]);
                  if (i2 !== ilen2 - 1) {
                    var mmpos = i2 * 2;
                    lst.push(mmx[mmpos]);
                    lst.push(mmx[mmpos + 1]);
                  }
                }
              } else {
                lst = slst;
              }
              for (var i2 = 1, ilen2 = lst.length; i2 < ilen2; i2 += 3) {
                lst[i2 + 1] = epochMap[lst[i2]] + parseInt(lst[i2 + 1], 10);
                lst[i2] = "";
              }
              txt = lst.join("");
              txt = txt.replace(/\s*-\s*$/, "").replace(/\s*-\s*\//, "/");
              txt = txt.replace(/\.\s*$/, "");
              txt = txt.replace(/\.(?! )/, "");
              slashPos = txt.indexOf("/");
              dashPos = txt.indexOf("-");
            }
          }
          txt = txt.replace(/([A-Za-z])\./g, "$1");
          var number2 = "";
          var note = "";
          var thedate = {};
          var rangeDelim;
          var dateDelim;
          if (txt.slice(0, 1) === '"' && txt.slice(-1) === '"') {
            thedate.literal = txt.slice(1, -1);
            return thedate;
          }
          if (slashPos > -1 && dashPos > -1) {
            var slashCount = txt.split("/");
            if (slashCount.length > 3) {
              rangeDelim = "-";
              txt = txt.replace(/\_/g, "-");
              dateDelim = "/";
              lst = txt.split(rexSlashDash);
            } else {
              rangeDelim = "/";
              txt = txt.replace(/\_/g, "/");
              dateDelim = "-";
              lst = txt.split(rexDashSlash);
            }
          } else {
            txt = txt.replace(/\//g, "-");
            txt = txt.replace(/\_/g, "-");
            rangeDelim = "-";
            dateDelim = "-";
            lst = txt.split(rexDash);
          }
          var ret = [];
          for (var i2 = 0, ilen2 = lst.length; i2 < ilen2; i2++) {
            var m = lst[i2].match(/^\s*([\-\/]|[^\-\/\~\?0-9]+|[\-~?0-9]+)\s*$/);
            if (m) {
              ret.push(m[1]);
            }
          }
          var delimPos = ret.indexOf(rangeDelim);
          var delims = [];
          var isRange = false;
          if (delimPos > -1) {
            delims.push([0, delimPos]);
            delims.push([delimPos + 1, ret.length]);
            isRange = true;
          } else {
            delims.push([0, ret.length]);
          }
          var suff = "";
          for (var i2 = 0, ilen2 = delims.length; i2 < ilen2; i2++) {
            var delim = delims[i2];
            var date2 = ret.slice(delim[0], delim[1]);
            outer:
              for (var j = 0, jlen = date2.length; j < jlen; j++) {
                var element = date2[j];
                if (element.indexOf(dateDelim) > -1) {
                  this._parseNumericDate(thedate, dateDelim, suff, element);
                  continue;
                }
                if (element.match(/[0-9]{4}/)) {
                  thedate["year" + suff] = element.replace(/^0*/, "");
                  continue;
                }
                if (element === "~" || element === "?" || element === "c" || element.match(/^cir/)) {
                  thedate.circa = true;
                }
                for (var k = 0, klen = this.monthRexes.length; k < klen; k++) {
                  if (element.toLocaleLowerCase().match(this.monthRexes[k])) {
                    thedate["month" + suff] = "" + (parseInt(k, 10) + 1);
                    continue outer;
                  }
                }
                if (element.match(/^[0-9]+$/)) {
                  number2 = element;
                }
                if (element.toLocaleLowerCase().match(/^bc/) && number2) {
                  thedate["year" + suff] = "" + number2 * -1;
                  number2 = "";
                  continue;
                }
                if (element.toLocaleLowerCase().match(/^ad/) && number2) {
                  thedate["year" + suff] = "" + number2;
                  number2 = "";
                  continue;
                }
                if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate["season" + suff]) {
                  note = element;
                  continue;
                }
              }
            if (number2) {
              thedate["day" + suff] = number2;
              number2 = "";
            }
            if (note && !thedate["season" + suff]) {
              thedate["season" + suff] = note.trim();
              note = "";
            }
            suff = "_end";
          }
          if (isRange) {
            for (var j = 0, jlen = CSL2.DATE_PARTS_ALL.length; j < jlen; j++) {
              var item = CSL2.DATE_PARTS_ALL[j];
              if (thedate[item] && !thedate[item + "_end"]) {
                thedate[item + "_end"] = thedate[item];
              } else if (!thedate[item] && thedate[item + "_end"]) {
                thedate[item] = thedate[item + "_end"];
              }
            }
          }
          if (!thedate.year || thedate.year && thedate.day && !thedate.month) {
            thedate = { "literal": orig };
          }
          var parts = ["year", "month", "day", "year_end", "month_end", "day_end"];
          for (var i2 = 0, ilen2 = parts.length; i2 < ilen2; i2++) {
            var part = parts[i2];
            if (typeof thedate[part] === "string" && thedate[part].match(/^[0-9]+$/)) {
              thedate[part] = parseInt(thedate[part], 10);
            }
          }
          if (yearIsNegative && Object.keys(thedate).indexOf("year") > -1) {
            thedate.year = thedate.year * -1;
          }
          return thedate;
        };
        this.parseDateToArray = function(txt) {
          return this.convertDateObjectToArray(this.parseDateToObject(txt));
        };
        this.parseDateToString = function(txt) {
          return this.convertDateObjectToString(this.parseDateToObject(txt));
        };
        this.parse = function(txt) {
          return this.parseDateToObject(txt);
        };
        this.setOrderMonthDay();
        this.resetDateParserMonths();
      };
      CSL2.DateParser = new CSL2.DateParser();
      CSL2.Engine = function(sys, style, lang, forceLang) {
        var attrs, langspec;
        this.processor_version = CSL2.PROCESSOR_VERSION;
        this.csl_version = "1.0";
        this.sys = sys;
        if (typeof Object.assign != "function") {
          Object.defineProperty(Object, "assign", {
            value: function assign(target) {
              "use strict";
              if (target == null) {
                throw new TypeError("Cannot convert undefined or null to object");
              }
              var to = Object(target);
              for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index];
                if (nextSource != null) {
                  for (var nextKey in nextSource) {
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                      to[nextKey] = nextSource[nextKey];
                    }
                  }
                }
              }
              return to;
            },
            writable: true,
            configurable: true
          });
        }
        if (sys.variableWrapper) {
          CSL2.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp("^([" + [" "].concat(CSL2.SWAPPING_PUNCTUATION).join("") + "]*)(.*)");
        }
        if (CSL2.retrieveStyleModule) {
          this.sys.retrieveStyleModule = CSL2.retrieveStyleModule;
        }
        if (CSL2.getAbbreviation) {
          this.sys.getAbbreviation = CSL2.getAbbreviation;
        }
        if (this.sys.stringCompare) {
          CSL2.stringCompare = this.sys.stringCompare;
        }
        this.sys.AbbreviationSegments = CSL2.AbbreviationSegments;
        this.transform = new CSL2.Transform(this);
        this.setParseNames = function(val) {
          this.opt["parse-names"] = val;
        };
        this.opt = new CSL2.Engine.Opt();
        this.tmp = new CSL2.Engine.Tmp();
        this.build = new CSL2.Engine.Build();
        this.fun = new CSL2.Engine.Fun(this);
        this.configure = new CSL2.Engine.Configure();
        this.citation_sort = new CSL2.Engine.CitationSort();
        this.bibliography_sort = new CSL2.Engine.BibliographySort();
        this.citation = new CSL2.Engine.Citation(this);
        this.bibliography = new CSL2.Engine.Bibliography();
        this.intext = new CSL2.Engine.InText();
        this.output = new CSL2.Output.Queue(this);
        this.dateput = new CSL2.Output.Queue(this);
        this.cslXml = CSL2.setupXml(style);
        for (var i in CSL2.SYS_OPTIONS) {
          var option = CSL2.SYS_OPTIONS[i];
          if (typeof this.sys[option] === "boolean") {
            this.opt.development_extensions[option] = this.sys[option];
          }
        }
        if (this.opt.development_extensions.uppercase_subtitles || this.opt.development_extensions.implicit_short_title) {
          this.opt.development_extensions.main_title_from_short_title = true;
        }
        if (this.opt.development_extensions.csl_reverse_lookup_support) {
          this.build.cslNodeId = 0;
          this.setCslNodeIds = function(myxml, nodename) {
            var children = this.cslXml.children(myxml);
            this.cslXml.setAttribute(myxml, "cslid", this.build.cslNodeId);
            this.opt.nodenames.push(nodename);
            this.build.cslNodeId += 1;
            for (var i2 = 0, ilen = this.cslXml.numberofnodes(children); i2 < ilen; i2 += 1) {
              nodename = this.cslXml.nodename(children[i2]);
              if (nodename) {
                this.setCslNodeIds(children[i2], nodename);
              }
            }
          };
          this.setCslNodeIds(this.cslXml.dataObj, "style");
        }
        this.cslXml.addMissingNameNodes(this.cslXml.dataObj);
        this.cslXml.addInstitutionNodes(this.cslXml.dataObj);
        this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);
        this.cslXml.flagDateMacros(this.cslXml.dataObj);
        attrs = this.cslXml.attributes(this.cslXml.dataObj);
        if (typeof attrs["@sort-separator"] === "undefined") {
          this.cslXml.setAttribute(this.cslXml.dataObj, "sort-separator", ", ");
        }
        this.opt["initialize-with-hyphen"] = true;
        this.setStyleAttributes();
        this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, "class");
        this.opt["class"] = this.opt.xclass;
        this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);
        this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);
        if (this.opt.version.slice(0, 4) === "1.1m") {
          this.opt.development_extensions.consolidate_legal_items = true;
          this.opt.development_extensions.consolidate_container_items = true;
          this.opt.development_extensions.main_title_from_short_title = true;
          this.opt.development_extensions.expect_and_symbol_form = true;
          this.opt.development_extensions.require_explicit_legal_case_title_short = true;
          this.opt.development_extensions.force_jurisdiction = true;
          this.opt.development_extensions.force_title_abbrev_fallback = true;
        }
        if (lang) {
          lang = lang.replace("_", "-");
          lang = CSL2.normalizeLocaleStr(lang);
        }
        if (this.opt["default-locale"][0]) {
          this.opt["default-locale"][0] = this.opt["default-locale"][0].replace("_", "-");
          this.opt["default-locale"][0] = CSL2.normalizeLocaleStr(this.opt["default-locale"][0]);
        }
        if (lang && forceLang) {
          this.opt["default-locale"] = [lang];
        }
        if (lang && !forceLang && this.opt["default-locale"][0]) {
          lang = this.opt["default-locale"][0];
        }
        if (this.opt["default-locale"].length === 0) {
          if (!lang) {
            lang = "en-US";
          }
          this.opt["default-locale"].push("en-US");
        }
        if (!lang) {
          lang = this.opt["default-locale"][0];
        }
        langspec = CSL2.localeResolve(lang);
        this.opt.lang = langspec.best;
        this.opt["default-locale"][0] = langspec.best;
        this.locale = {};
        if (!this.opt["default-locale-sort"]) {
          this.opt["default-locale-sort"] = this.opt["default-locale"][0];
        }
        if ("dale|".localeCompare("daleb", this.opt["default-locale-sort"]) > -1) {
          this.opt.sort_sep = "@";
        } else {
          this.opt.sort_sep = "|";
        }
        this.localeConfigure(langspec);
        function makeRegExp(lst) {
          var lst = lst.slice();
          var ret = new RegExp("(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
          return ret;
        }
        this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);
        this.output.adjust = new CSL2.Output.Queue.adjust(this.getOpt("punctuation-in-quote"));
        this.registry = new CSL2.Registry(this);
        this.macros = {};
        this.build.area = "citation";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        this.build.area = "bibliography";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        this.build.area = "intext";
        var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
        this.buildTokenLists(area_nodes, this[this.build.area].tokens);
        if (this.opt.parallel.enable) {
          this.parallel = new CSL2.Parallel(this);
        }
        this.juris = {};
        this.configureTokenLists();
        this.disambiguate = new CSL2.Disambiguation(this);
        this.splice_delimiter = false;
        this.fun.dateparser = CSL2.DateParser;
        this.fun.flipflopper = new CSL2.Util.FlipFlopper(this);
        this.setCloseQuotesArray();
        this.fun.ordinalizer.init(this);
        this.fun.long_ordinalizer.init(this);
        this.fun.page_mangler = CSL2.Util.PageRangeMangler.getFunction(this, "page");
        this.fun.year_mangler = CSL2.Util.PageRangeMangler.getFunction(this, "year");
        this.setOutputFormat("html");
      };
      CSL2.Engine.prototype.setCloseQuotesArray = function() {
        var ret;
        ret = [];
        ret.push(this.getTerm("close-quote"));
        ret.push(this.getTerm("close-inner-quote"));
        ret.push('"');
        ret.push("'");
        this.opt.close_quotes_array = ret;
      };
      CSL2.makeBuilder = function(me, target) {
        var var_stack = [];
        var node_stack = [];
        function runStart(node) {
          node_stack.push(node);
          CSL2.XmlToToken.call(node, me, CSL2.START, target, var_stack);
        }
        function runEnd() {
          var node = node_stack.pop();
          CSL2.XmlToToken.call(node, me, CSL2.END, target, var_stack);
        }
        function runSingle(node) {
          CSL2.XmlToToken.call(node, me, CSL2.SINGLETON, target, var_stack);
        }
        function buildStyle(nodes, parent, node_stack2) {
          if (!node_stack2) {
            node_stack2 = [];
          }
          if (!nodes) {
            nodes = [];
          }
          if (typeof nodes.length === "undefined") {
            nodes = [nodes];
          }
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (me.cslXml.nodename(node) === null) {
              continue;
            }
            if (parent && me.cslXml.nodename(node) === "date") {
              CSL2.Util.fixDateNode.call(me, parent, i, node);
              node = me.cslXml.children(parent)[i];
            }
            if (me.cslXml.numberofnodes(me.cslXml.children(node))) {
              runStart(node);
              buildStyle(me.cslXml.children(node), node, node_stack2);
              runEnd();
            } else {
              runSingle(node);
            }
          }
        }
        return buildStyle;
      };
      CSL2.Engine.prototype.buildTokenLists = function(area_nodes, target) {
        if (!this.cslXml.getNodeValue(area_nodes)) {
          return;
        }
        var builder = CSL2.makeBuilder(this, target);
        var mynode;
        if (typeof area_nodes.length === "undefined") {
          mynode = area_nodes;
        } else {
          mynode = area_nodes[0];
        }
        builder(mynode);
      };
      CSL2.Engine.prototype.setStyleAttributes = function() {
        var dummy, attributes, attrname;
        var dummy = {};
        dummy.name = this.cslXml.nodename(this.cslXml.dataObj);
        attributes = this.cslXml.attributes(this.cslXml.dataObj);
        for (attrname in attributes) {
          if (attributes.hasOwnProperty(attrname)) {
            CSL2.Attributes[attrname].call(dummy, this, attributes[attrname]);
          }
        }
      };
      CSL2.Engine.prototype.getTerm = function(term, form, plural, gender, mode, forceDefaultLocale) {
        if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {
          CSL2.debug("Warning: term key is in uppercase form: " + term);
          term = term.toLowerCase();
        }
        var lang;
        if (forceDefaultLocale) {
          lang = this.opt["default-locale"][0];
        } else {
          lang = this.opt.lang;
        }
        var ret = CSL2.Engine.getField(CSL2.LOOSE, this.locale[lang].terms, term, form, plural, gender);
        if (!ret && term === "range-delimiter") {
          ret = "\u2013";
        }
        if (typeof ret === "undefined") {
          if (mode === CSL2.STRICT) {
            CSL2.error('Error in getTerm: term "' + term + '" does not exist.');
          } else if (mode === CSL2.TOLERANT) {
            ret = "";
          }
        }
        if (ret) {
          this.tmp.cite_renders_content = true;
        }
        return ret;
      };
      CSL2.Engine.prototype.getDate = function(form, forceDefaultLocale) {
        var lang;
        if (forceDefaultLocale) {
          lang = this.opt["default-locale"];
        } else {
          lang = this.opt.lang;
        }
        if (this.locale[lang].dates[form]) {
          return this.locale[lang].dates[form];
        } else {
          return false;
        }
      };
      CSL2.Engine.prototype.getOpt = function(arg) {
        if (typeof this.locale[this.opt.lang].opts[arg] !== "undefined") {
          return this.locale[this.opt.lang].opts[arg];
        } else {
          return false;
        }
      };
      CSL2.Engine.prototype.getVariable = function(Item, varname, form, plural) {
        return CSL2.Engine.getField(CSL2.LOOSE, Item, varname, form, plural);
      };
      CSL2.Engine.prototype.getDateNum = function(ItemField, partname) {
        if (typeof ItemField === "undefined") {
          return 0;
        } else {
          return ItemField[partname];
        }
      };
      CSL2.Engine.getField = function(mode, hash, term, form, plural, gender) {
        var ret, forms, f, pos, len, hashterm;
        ret = "";
        if (typeof hash[term] === "undefined") {
          if (mode === CSL2.STRICT) {
            CSL2.error('Error in getField: term "' + term + '" does not exist.');
          } else {
            return void 0;
          }
        }
        if (gender && hash[term][gender]) {
          hashterm = hash[term][gender];
        } else {
          hashterm = hash[term];
        }
        forms = [];
        if (form === "symbol") {
          forms = ["symbol", "short"];
        } else if (form === "verb-short") {
          forms = ["verb-short", "verb"];
        } else if (form !== "long") {
          forms = [form];
        }
        forms = forms.concat(["long"]);
        len = forms.length;
        for (pos = 0; pos < len; pos += 1) {
          f = forms[pos];
          if (typeof hashterm === "string" || typeof hashterm === "number") {
            ret = hashterm;
          } else if (typeof hashterm[f] !== "undefined") {
            if (typeof hashterm[f] === "string" || typeof hashterm[f] === "number") {
              ret = hashterm[f];
            } else {
              if (typeof plural === "number") {
                ret = hashterm[f][plural];
              } else {
                ret = hashterm[f][0];
              }
            }
            break;
          }
        }
        return ret;
      };
      CSL2.Engine.prototype.configureTokenLists = function() {
        var area, pos, len;
        len = CSL2.AREAS.length;
        for (pos = 0; pos < len; pos += 1) {
          area = CSL2.AREAS[pos];
          var tokens = this[area].tokens;
          this.configureTokenList(tokens);
        }
        this.version = CSL2.version;
        return this.state;
      };
      CSL2.Engine.prototype.configureTokenList = function(tokens) {
        var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;
        dateparts_master = ["year", "month", "day"];
        llen = tokens.length - 1;
        for (ppos = llen; ppos > -1; ppos += -1) {
          token = tokens[ppos];
          if (token.name === "date" && CSL2.END === token.tokentype) {
            dateparts = [];
          }
          if (token.name === "date-part" && token.strings.name) {
            lllen = dateparts_master.length;
            for (pppos = 0; pppos < lllen; pppos += 1) {
              part = dateparts_master[pppos];
              if (part === token.strings.name) {
                dateparts.push(token.strings.name);
              }
            }
          }
          if (token.name === "date" && CSL2.START === token.tokentype) {
            dateparts.reverse();
            token.dateparts = dateparts;
          }
          token.next = ppos + 1;
          if (token.name && CSL2.Node[token.name].configure) {
            CSL2.Node[token.name].configure.call(token, this, ppos);
          }
        }
      };
      CSL2.Engine.prototype.refetchItems = function(ids) {
        var ret = [];
        for (var i = 0, ilen = ids.length; i < ilen; i += 1) {
          ret.push(this.refetchItem("" + ids[i]));
        }
        return ret;
      };
      CSL2.ITERATION = 0;
      CSL2.Engine.prototype.retrieveItem = function(id) {
        var Item, m, i;
        if (!this.tmp.loadedItemIDs[id]) {
          this.tmp.loadedItemIDs[id] = true;
        } else {
          return this.registry.refhash[id];
        }
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase && typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase === "boolean") {
          for (var i = 0, ilen = this.opt["default-locale"].length; i < ilen; i += 1) {
            this.opt["default-locale"][i] = this.opt["default-locale"][i].toLowerCase();
          }
          for (var i = 0, ilen = this.opt["locale-translit"].length; i < ilen; i += 1) {
            this.opt["locale-translit"][i] = this.opt["locale-translit"][i].toLowerCase();
          }
          for (var i = 0, ilen = this.opt["locale-translat"].length; i < ilen; i += 1) {
            this.opt["locale-translat"][i] = this.opt["locale-translat"][i].toLowerCase();
          }
          this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;
        }
        CSL2.ITERATION += 1;
        Item = JSON.parse(JSON.stringify(this.sys.retrieveItem("" + id)));
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          if (Item.multi) {
            if (Item.multi._keys) {
              for (var field in Item.multi._keys) {
                for (var key in Item.multi._keys[field]) {
                  if (key !== key.toLowerCase()) {
                    Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];
                    delete Item.multi._keys[field][key];
                  }
                }
              }
            }
            if (Item.multi.main) {
              for (var field in Item.multi.main) {
                Item.multi.main[field] = Item.multi.main[field].toLowerCase();
              }
            }
          }
          for (var i = 0, ilen = CSL2.NAME_VARIABLES.length; i > ilen; i += 1) {
            var ctype = CSL2.NAME_VARIABLES[i];
            if (Item[ctype] && Item[ctype].multi) {
              for (var j = 0, jlen = Item[ctype].length; j < jlen; j += 1) {
                var creator = Item[ctype][j];
                if (creator.multi) {
                  if (creator.multi._key) {
                    for (var key in creator.multi._key) {
                      if (key !== key.toLowerCase()) {
                        creator.multi._key[key.toLowerCase()] = creator.multi._key[key];
                        delete creator.multi._key[key];
                      }
                    }
                  }
                  if (creator.multi.main) {
                    creator.multi.main = creator.multi.main.toLowerCase();
                  }
                }
              }
            }
          }
        }
        if (Item.language && Item.language.match(/[><]/)) {
          var m = Item.language.match(/(.*?)([<>])(.*)/);
          if (m[2] === "<") {
            Item["language-name"] = m[1];
            Item["language-name-original"] = m[3];
          } else {
            Item["language-name"] = m[3];
            Item["language-name-original"] = m[1];
          }
          if (this.opt.multi_layout) {
            if (Item["language-name-original"]) {
              Item.language = Item["language-name-original"];
            }
          } else {
            if (Item["language-name"]) {
              Item.language = Item["language-name"];
            }
          }
        }
        if (Item.page) {
          Item["page-first"] = Item.page;
          var num = "" + Item.page;
          var m = num.split(/\s*(?:&|, |-|\u2013)\s*/);
          if (m[0].slice(-1) !== "\\") {
            Item["page-first"] = m[0];
          }
        }
        if (this.opt.development_extensions.field_hack && Item.note) {
          CSL2.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);
        }
        for (var key in Item) {
          if (CSL2.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
            var dateobj = Item[key];
            if (dateobj) {
              if (this.opt.development_extensions.raw_date_parsing) {
                if (dateobj.raw && (!dateobj["date-parts"] || dateobj["date-parts"].length === 0)) {
                  dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);
                }
              }
              Item[key] = this.dateParseArray(dateobj);
            }
          }
        }
        if (this.opt.development_extensions.consolidate_legal_items) {
          if (Item.type && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "title", "jurisdiction", "genre", "volume", "container-title"];
            var legislation_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname]) {
                legislation_id.push(Item[varname]);
              }
            }
            elements = ["original-date", "issued"];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname] && Item[varname].year) {
                var value = Item[varname].year;
                legislation_id.push(value);
                break;
              }
            }
            Item.legislation_id = legislation_id.join("::");
          }
        }
        if (this.bibliography.opt.track_container_items) {
          if (this.bibliography.opt.track_container_items.indexOf(Item.type) > -1) {
            var varname;
            var elements = ["type", "container-title", "publisher", "edition"];
            var container_id = [];
            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
              varname = elements[i];
              if (Item[varname]) {
                container_id.push(Item[varname]);
              }
            }
            Item.container_id = container_id.join("::");
          }
        }
        if (this.opt.development_extensions.force_jurisdiction) {
          if (typeof Item.authority === "string") {
            Item.authority = [
              {
                literal: Item.authority,
                multi: {
                  _key: {}
                }
              }
            ];
            if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {
              Item.authority[0].multi._key = {};
              for (var key in Item.multi._keys.authority) {
                Item.authority[0].multi._key[key] = {
                  literal: Item.multi._keys.authority[key]
                };
              }
            }
          }
        }
        if (!Item["title-short"]) {
          Item["title-short"] = Item.shortTitle;
        }
        if (this.opt.development_extensions.main_title_from_short_title) {
          var narrowSpaceLocale = this.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr";
          CSL2.extractTitleAndSubtitle.call(this, Item, narrowSpaceLocale);
        }
        var isLegalType = ["bill", "legal_case", "legislation", "gazette", "regulation"].indexOf(Item.type) > -1;
        if (this.opt.development_extensions.force_jurisdiction && isLegalType) {
          if (!Item.jurisdiction) {
            Item.jurisdiction = "us";
          }
        }
        var normalizedKey;
        if (!isLegalType && Item.title && this.sys.getAbbreviation) {
          var noHints = false;
          if (!Item.jurisdiction) {
            noHints = true;
          }
          if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey("title", Item.title);
          } else {
            normalizedKey = Item.title;
          }
          var jurisdiction2 = this.transform.loadAbbreviation(Item.jurisdiction, "title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction2].title) {
            if (this.transform.abbrevs[jurisdiction2].title[normalizedKey]) {
              Item["title-short"] = this.transform.abbrevs[jurisdiction2].title[normalizedKey];
            }
          }
        }
        if (!Item["container-title-short"]) {
          Item["container-title-short"] = Item.journalAbbreviation;
        }
        if (Item["container-title"] && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
            normalizedKey = this.sys.normalizeAbbrevsKey(Item["container-title"]);
          } else {
            normalizedKey = Item["container-title"];
          }
          var jurisdiction2 = this.transform.loadAbbreviation(Item.jurisdiction, "container-title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction2]["container-title"]) {
            if (this.transform.abbrevs[jurisdiction2]["container-title"][normalizedKey]) {
              Item["container-title-short"] = this.transform.abbrevs[jurisdiction2]["container-title"][normalizedKey];
            }
          }
        }
        if (Item.jurisdiction) {
          Item.country = Item.jurisdiction.split(":")[0];
        }
        if (this.registry.refhash[id]) {
          if (JSON.stringify(this.registry.refhash[id]) != JSON.stringify(Item)) {
            for (var key in this.registry.refhash[id]) {
              delete this.registry.refhash[id][key];
            }
            this.tmp.taintedItemIDs[Item.id] = true;
            Object.assign(this.registry.refhash[id], Item);
          }
        } else {
          this.registry.refhash[id] = Item;
        }
        return this.registry.refhash[id];
      };
      CSL2.Engine.prototype.refetchItem = function(id) {
        return this.registry.refhash[id];
      };
      CSL2.Engine.prototype.setOpt = function(token, name, value) {
        if (token.name === "style" || token.name === "cslstyle") {
          this.opt.inheritedAttributes[name] = value;
          this.citation.opt.inheritedAttributes[name] = value;
          this.bibliography.opt.inheritedAttributes[name] = value;
        } else if (["citation", "bibliography"].indexOf(token.name) > -1) {
          this[token.name].opt.inheritedAttributes[name] = value;
        } else {
          token.strings[name] = value;
        }
      };
      CSL2.Engine.prototype.inheritOpt = function(token, attrname, parentname, defaultValue) {
        if (typeof token.strings[attrname] !== "undefined") {
          return token.strings[attrname];
        } else {
          var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];
          if (typeof parentValue !== "undefined") {
            return parentValue;
          } else {
            return defaultValue;
          }
        }
      };
      CSL2.Engine.prototype.remapSectionVariable = function(inputList) {
        for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
          var Item = inputList[i][0];
          var item = inputList[i][1];
          if (["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1) {
            if (item.locator) {
              item.locator = item.locator.trim();
              var m = item.locator.match(CSL2.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
              if (!m) {
                if (item.label) {
                  item.locator = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + " " + item.locator;
                } else {
                  item.locator = "p. " + item.locator;
                }
              }
            }
            var sectionMasterLabel = null;
            if (Item.section) {
              Item.section = Item.section.trim();
              var m = Item.section.match(CSL2.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
              if (!m) {
                Item.section = "sec. " + Item.section;
                sectionMasterLabel = "sec.";
              } else {
                sectionMasterLabel = m[0].trim();
              }
            }
            if (Item.section) {
              if (!item.locator) {
                item.locator = Item.section;
              } else {
                var m = item.locator.match(/^([^ ]*)\s*(.*)/);
                var space = " ";
                if (m) {
                  if (m[1] === "p." && sectionMasterLabel !== "p.") {
                    item.locator = m[2];
                  }
                  if (["[", "(", ".", ",", ";", ":", "?"].indexOf(item.locator.slice(0, 1)) > -1) {
                    space = "";
                  }
                } else {
                  space = "";
                }
                item.locator = Item.section + space + item.locator;
              }
            }
            item.label = "";
          }
        }
      };
      CSL2.Engine.prototype.setNumberLabels = function(Item) {
        if (Item.number && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) > -1 && this.opt.development_extensions.consolidate_legal_items && !this.tmp.shadow_numbers["number"]) {
          this.tmp.shadow_numbers["number"] = {};
          this.tmp.shadow_numbers["number"].values = [];
          this.tmp.shadow_numbers["number"].plural = 0;
          this.tmp.shadow_numbers["number"].numeric = false;
          this.tmp.shadow_numbers["number"].label = false;
          var value = "" + Item.number;
          value = value.split("\\").join("");
          var firstword = value.split(/\s+/)[0];
          var firstlabel = CSL2.STATUTE_SUBDIV_STRINGS[firstword];
          if (firstlabel) {
            var splt = value.split(CSL2.STATUTE_SUBDIV_PLAIN_REGEX);
            if (splt.length > 1) {
              var lst = [];
              for (var j = 1, jlen = splt.length; j < jlen; j += 1) {
                lst.push(splt[j].replace(/\s*$/, "").replace(/^\s*/, ""));
              }
              value = lst.join(" ");
            } else {
              value = splt[0];
            }
            this.tmp.shadow_numbers["number"].label = firstlabel;
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = false;
          } else {
            this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
            this.tmp.shadow_numbers["number"].numeric = true;
          }
        }
      };
      CSL2.substituteOne = function(template) {
        return function(state, list) {
          if (!list) {
            return "";
          } else {
            return template.replace("%%STRING%%", list);
          }
        };
      };
      CSL2.substituteTwo = function(template) {
        return function(param) {
          var template2 = template.replace("%%PARAM%%", param);
          return function(state, list) {
            if (!list) {
              return "";
            } else {
              return template2.replace("%%STRING%%", list);
            }
          };
        };
      };
      CSL2.Mode = function(mode) {
        var decorations, params, param, func, val, args;
        decorations = {};
        params = CSL2.Output.Formats[mode];
        for (param in params) {
          if (true) {
            if (param.slice(0, 1) !== "@") {
              decorations[param] = params[param];
              continue;
            }
            func = false;
            val = params[param];
            args = param.split("/");
            if (typeof val === "string" && val.indexOf("%%STRING%%") > -1) {
              if (val.indexOf("%%PARAM%%") > -1) {
                func = CSL2.substituteTwo(val);
              } else {
                func = CSL2.substituteOne(val);
              }
            } else if (typeof val === "boolean" && !val) {
              func = CSL2.Output.Formatters.passthrough;
            } else if (typeof val === "function") {
              func = val;
            } else {
              CSL2.error("Bad " + mode + " config entry for " + param + ": " + val);
            }
            if (args.length === 1) {
              decorations[args[0]] = func;
            } else if (args.length === 2) {
              if (!decorations[args[0]]) {
                decorations[args[0]] = {};
              }
              decorations[args[0]][args[1]] = func;
            }
          }
        }
        return decorations;
      };
      CSL2.setDecorations = function(state, attributes) {
        var ret, key, pos;
        ret = [];
        for (pos in CSL2.FORMAT_KEY_SEQUENCE) {
          if (true) {
            var key = CSL2.FORMAT_KEY_SEQUENCE[pos];
            if (attributes[key]) {
              ret.push([key, attributes[key]]);
              delete attributes[key];
            }
          }
        }
        return ret;
      };
      CSL2.Doppeler = function(rexStr, stringMangler) {
        var matchRex = new RegExp("(" + rexStr + ")", "g");
        var splitRex = new RegExp(rexStr, "g");
        this.split = function(str) {
          if (stringMangler) {
            str = stringMangler(str);
          }
          var match = str.match(matchRex);
          if (!match) {
            return {
              tags: [],
              strings: [str]
            };
          }
          var split = str.split(splitRex);
          for (var i = match.length - 1; i > -1; i--) {
            if (typeof match[i] === "number") {
              match[i] = "";
            }
            var tag = match[i];
            if (tag === "'" && split[i + 1].length > 0) {
              split[i + 1] = match[i] + split[i + 1];
              match[i] = "";
            }
          }
          return {
            tags: match,
            strings: split,
            origStrings: split.slice()
          };
        };
        this.join = function(obj) {
          var lst = obj.strings.slice(-1);
          for (var i = obj.tags.length - 1; i > -1; i--) {
            lst.push(obj.tags[i]);
            lst.push(obj.strings[i]);
          }
          lst.reverse();
          return lst.join("");
        };
      };
      CSL2.Engine.prototype.normalDecorIsOrphan = function(blob, params) {
        if (params[1] === "normal") {
          var use_param = false;
          var all_the_decor;
          if (this.tmp.area === "citation") {
            all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);
          } else {
            all_the_decor = blob.alldecor;
          }
          for (var k = all_the_decor.length - 1; k > -1; k += -1) {
            for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {
              if (all_the_decor[k][n][0] === params[0]) {
                if (all_the_decor[k][n][1] !== "normal") {
                  use_param = true;
                }
              }
            }
          }
          if (!use_param) {
            return true;
          }
        }
        return false;
      };
      CSL2.Engine.prototype.getCitationLabel = function(Item) {
        var label2 = "";
        var params = this.getTrigraphParams();
        var config = params[0];
        var myname = this.getTerm("reference", "short", 0);
        if (typeof myname === "undefined") {
          myname = "reference";
        }
        myname = myname.replace(".", "");
        myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);
        for (var i = 0, ilen = CSL2.NAME_VARIABLES.length; i < ilen; i += 1) {
          var n = CSL2.NAME_VARIABLES[i];
          if (Item[n]) {
            var names2 = Item[n];
            if (names2.length > params.length) {
              config = params[params.length - 1];
            } else {
              config = params[names2.length - 1];
            }
            for (var j = 0, jlen = names2.length; j < jlen; j += 1) {
              if (j === config.authors.length) {
                break;
              }
              var res = this.nameOutput.getName(names2[j], "locale-translit", true);
              var name = res.name;
              if (name && name.family) {
                myname = name.family;
                myname = myname.replace(/^([ \'\u2019a-z]+\s+)/, "");
              } else if (name && name.literal) {
                myname = name.literal;
              }
              var m = myname.toLowerCase().match(/^(a\s+|the\s+|an\s+)/);
              if (m) {
                myname = myname.slice(m[1].length);
              }
              myname = myname.replace(CSL2.ROMANESQUE_NOT_REGEXP, "");
              if (!myname) {
                break;
              }
              myname = myname.slice(0, config.authors[j]);
              if (myname.length > 1) {
                myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();
              } else if (myname.length === 1) {
                myname = myname.toUpperCase();
              }
              label2 += myname;
            }
            break;
          }
        }
        if (!label2) {
          if (Item.title) {
            var skipWords = this.locale[this.opt.lang].opts["skip-words"];
            var lst = Item.title.split(/\s+/);
            for (var i = lst.length - 1; i > -1; i--) {
              if (skipWords.indexOf(lst[i]) > -1) {
                lst = lst.slice(0, i).concat(lst.slice(i + 1));
              }
            }
            var str = lst.join("");
            str = str.slice(0, params[0].authors[0]);
            if (str.length > 1) {
              str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();
            } else if (str.length === 1) {
              str = str.toUpperCase();
            }
            label2 = str;
          }
        }
        var year = "0000";
        if (Item.issued) {
          if (Item.issued.year) {
            year = "" + Item.issued.year;
          }
        }
        year = year.slice(config.year * -1);
        label2 = label2 + year;
        return label2;
      };
      CSL2.Engine.prototype.getTrigraphParams = function() {
        var params = [];
        var ilst = this.opt.trigraph.split(":");
        if (!this.opt.trigraph || this.opt.trigraph.slice(0, 1) !== "A") {
          CSL2.error("Bad trigraph definition: " + this.opt.trigraph);
        }
        for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {
          var str = ilst[i];
          var config = { authors: [], year: 0 };
          for (var j = 0, jlen = str.length; j < jlen; j += 1) {
            switch (str.slice(j, j + 1)) {
              case "A":
                config.authors.push(1);
                break;
              case "a":
                config.authors[config.authors.length - 1] += 1;
                break;
              case "0":
                config.year += 1;
                break;
              default:
                CSL2.error("Invalid character in trigraph definition: " + this.opt.trigraph);
            }
          }
          params.push(config);
        }
        return params;
      };
      CSL2.Engine.prototype.setOutputFormat = function(mode) {
        this.opt.mode = mode;
        this.fun.decorate = CSL2.Mode(mode);
        if (!this.output[mode]) {
          this.output[mode] = {};
          this.output[mode].tmp = {};
        }
      };
      CSL2.Engine.prototype.getSortFunc = function() {
        return function(a, b) {
          a = a.split("-");
          b = b.split("-");
          if (a.length < b.length) {
            return 1;
          } else if (a.length > b.length) {
            return -1;
          } else {
            a = a.slice(-1)[0];
            b = b.slice(-1)[0];
            if (a.length < b.length) {
              return 1;
            } else if (a.length > b.length) {
              return -1;
            } else {
              return 0;
            }
          }
        };
      };
      CSL2.Engine.prototype.setLangTagsForCslSort = function(tags) {
        var i, ilen;
        if (tags) {
          this.opt["locale-sort"] = [];
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-sort"].push(tags[i]);
          }
        }
        this.opt["locale-sort"].sort(this.getSortFunc());
      };
      CSL2.Engine.prototype.setLangTagsForCslTransliteration = function(tags) {
        var i, ilen;
        this.opt["locale-translit"] = [];
        if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-translit"].push(tags[i]);
          }
        }
        this.opt["locale-translit"].sort(this.getSortFunc());
      };
      CSL2.Engine.prototype.setLangTagsForCslTranslation = function(tags) {
        var i, ilen;
        this.opt["locale-translat"] = [];
        if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
            this.opt["locale-translat"].push(tags[i]);
          }
        }
        this.opt["locale-translat"].sort(this.getSortFunc());
      };
      CSL2.Engine.prototype.setLangPrefsForCites = function(obj, conv) {
        var opt = this.opt["cite-lang-prefs"];
        if (!conv) {
          conv = function(key) {
            return key.toLowerCase();
          };
        }
        var segments = ["Persons", "Institutions", "Titles", "Journals", "Publishers", "Places"];
        for (var i = 0, ilen = segments.length; i < ilen; i += 1) {
          var clientSegment = conv(segments[i]);
          var citeprocSegment = segments[i].toLowerCase();
          if (!obj[clientSegment]) {
            continue;
          }
          var supplements = [];
          while (obj[clientSegment].length > 1) {
            supplements.push(obj[clientSegment].pop());
          }
          var sortval = { orig: 1, translit: 2, translat: 3 };
          if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {
            supplements.reverse();
          }
          while (supplements.length) {
            obj[clientSegment].push(supplements.pop());
          }
          var lst = opt[citeprocSegment];
          while (lst.length) {
            lst.pop();
          }
          for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {
            lst.push(obj[clientSegment][j]);
          }
        }
      };
      CSL2.Engine.prototype.setLangPrefsForCiteAffixes = function(affixList) {
        if (affixList && affixList.length === 48) {
          var affixes = this.opt.citeAffixes;
          var count = 0;
          var settings = ["persons", "institutions", "titles", "journals", "publishers", "places"];
          var forms = ["translit", "orig", "translit", "translat"];
          var value;
          for (var i = 0, ilen = settings.length; i < ilen; i += 1) {
            for (var j = 0, jlen = forms.length; j < jlen; j += 1) {
              value = "";
              if (count % 8 === 4) {
                if (!affixes[settings[i]]["locale-" + forms[j]].prefix && !affixes[settings[i]]["locale-" + forms[j]].suffix) {
                  value = affixList[count] ? affixList[count] : "";
                  affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                  value = affixList[count] ? affixList[count + 1] : "";
                  affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                }
              } else {
                value = affixList[count] ? affixList[count] : "";
                affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                value = affixList[count] ? affixList[count + 1] : "";
                affixes[settings[i]]["locale-" + forms[j]].suffix = value;
              }
              count += 2;
            }
          }
          this.opt.citeAffixes = affixes;
        }
      };
      CSL2.Engine.prototype.setAutoVietnameseNamesOption = function(arg) {
        if (arg) {
          this.opt["auto-vietnamese-names"] = true;
        } else {
          this.opt["auto-vietnamese-names"] = false;
        }
      };
      CSL2.Engine.prototype.setAbbreviations = function(arg) {
        if (this.sys.setAbbreviations) {
          this.sys.setAbbreviations(arg);
        }
      };
      CSL2.Engine.prototype.setSuppressTrailingPunctuation = function(arg) {
        this.citation.opt.suppressTrailingPunctuation = !!arg;
      };
      CSL2.Output = {};
      CSL2.Output.Queue = function(state) {
        this.levelname = ["top"];
        this.state = state;
        this.queue = [];
        this.empty = new CSL2.Token("empty");
        var tokenstore = {};
        tokenstore.empty = this.empty;
        this.formats = new CSL2.Stack(tokenstore);
        this.current = new CSL2.Stack(this.queue);
      };
      CSL2.Output.Queue.prototype.pop = function() {
        var drip = this.current.value();
        if (drip.length) {
          return drip.pop();
        } else {
          return drip.blobs.pop();
        }
      };
      CSL2.Output.Queue.prototype.getToken = function(name) {
        var ret = this.formats.value()[name];
        return ret;
      };
      CSL2.Output.Queue.prototype.mergeTokenStrings = function(base, modifier) {
        var base_token, modifier_token, ret, key;
        base_token = this.formats.value()[base];
        modifier_token = this.formats.value()[modifier];
        ret = base_token;
        if (modifier_token) {
          if (!base_token) {
            base_token = new CSL2.Token(base, CSL2.SINGLETON);
            base_token.decorations = [];
          }
          ret = new CSL2.Token(base, CSL2.SINGLETON);
          var key = "";
          for (var key in base_token.strings) {
            if (base_token.strings.hasOwnProperty(key)) {
              ret.strings[key] = base_token.strings[key];
            }
          }
          for (var key in modifier_token.strings) {
            if (modifier_token.strings.hasOwnProperty(key)) {
              ret.strings[key] = modifier_token.strings[key];
            }
          }
          ret.decorations = base_token.decorations.concat(modifier_token.decorations);
        }
        return ret;
      };
      CSL2.Output.Queue.prototype.addToken = function(name, modifier, token) {
        var newtok, attr;
        newtok = new CSL2.Token("output");
        if (typeof token === "string") {
          token = this.formats.value()[token];
        }
        if (token && token.strings) {
          for (attr in token.strings) {
            if (token.strings.hasOwnProperty(attr)) {
              newtok.strings[attr] = token.strings[attr];
            }
          }
          newtok.decorations = token.decorations;
        }
        if (typeof modifier === "string") {
          newtok.strings.delimiter = modifier;
        }
        this.formats.value()[name] = newtok;
      };
      CSL2.Output.Queue.prototype.pushFormats = function(tokenstore) {
        if (!tokenstore) {
          tokenstore = {};
        }
        tokenstore.empty = this.empty;
        this.formats.push(tokenstore);
      };
      CSL2.Output.Queue.prototype.popFormats = function() {
        this.formats.pop();
      };
      CSL2.Output.Queue.prototype.startTag = function(name, token) {
        var tokenstore = {};
        if (this.state.tmp["doing-macro-with-date"] && this.state.tmp.extension) {
          token = this.empty;
          name = "empty";
        }
        tokenstore[name] = token;
        this.pushFormats(tokenstore);
        this.openLevel(name);
      };
      CSL2.Output.Queue.prototype.endTag = function(name) {
        this.closeLevel(name);
        this.popFormats();
      };
      CSL2.Output.Queue.prototype.openLevel = function(token) {
        var blob, curr;
        if (typeof token === "object") {
          blob = new CSL2.Blob(void 0, token);
        } else if (typeof token === "undefined") {
          blob = new CSL2.Blob(void 0, this.formats.value().empty, "empty");
        } else {
          if (!this.formats.value() || !this.formats.value()[token]) {
            CSL2.error('CSL processor error: call to nonexistent format token "' + token + '"');
          }
          blob = new CSL2.Blob(void 0, this.formats.value()[token], token);
        }
        curr = this.current.value();
        if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);
        }
        curr.push(blob);
        this.current.push(blob);
      };
      CSL2.Output.Queue.prototype.closeLevel = function(name) {
        if (name && name !== this.current.value().levelname) {
          CSL2.error("Level mismatch error:  wanted " + name + " but found " + this.current.value().levelname);
        }
        var blob = this.current.pop();
        if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);
        }
      };
      CSL2.Output.Queue.prototype.append = function(str, tokname, notSerious, ignorePredecessor, noStripPeriods) {
        var token, blob, curr;
        var useblob = true;
        if (notSerious) {
          ignorePredecessor = true;
        }
        if (this.state.tmp["doing-macro-with-date"] && !notSerious) {
          if (tokname !== "macro-with-date") {
            return false;
          }
          if (tokname === "macro-with-date") {
            tokname = "empty";
          }
        }
        if (typeof str === "undefined") {
          return false;
        }
        if (typeof str === "number") {
          str = "" + str;
        }
        if (!notSerious && this.state.tmp.element_trace && this.state.tmp.element_trace.value() === "suppress-me") {
          return false;
        }
        blob = false;
        if (!tokname) {
          token = this.formats.value().empty;
        } else if (tokname === "literal") {
          token = true;
          useblob = false;
        } else if (typeof tokname === "string") {
          token = this.formats.value()[tokname];
        } else {
          token = tokname;
        }
        if (!token) {
          CSL2.error("CSL processor error: unknown format token name: " + tokname);
        }
        if (token.strings && typeof token.strings.delimiter === "undefined") {
          token.strings.delimiter = "";
        }
        if (typeof str === "string" && str.length) {
          str = str.replace(/ ([:;?!\u00bb])/g, "\u202F$1").replace(/\u00ab /g, "\xAB\u202F");
          this.last_char_rendered = str.slice(-1);
          str = str.replace(/\s+'/g, " '");
          if (!notSerious) {
            str = str.replace(/^'/g, " '");
          }
          if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
          }
        }
        blob = new CSL2.Blob(str, token);
        curr = this.current.value();
        if (typeof curr === "undefined" && this.current.mystack.length === 0) {
          this.current.mystack.push([]);
          curr = this.current.value();
        }
        if (typeof blob.blobs === "string") {
          if (!ignorePredecessor) {
            this.state.tmp.term_predecessor = true;
            this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
            this.state.tmp.term_predecessor_name = true;
          }
        }
        if (typeof str === "string") {
          if (typeof blob.blobs === "string") {
            if (blob.blobs.slice(0, 1) !== " ") {
              var blobPrefix = "";
              var blobBlobs = blob.blobs;
              while (CSL2.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {
                blobPrefix = blobPrefix + blobBlobs.slice(0, 1);
                blobBlobs = blobBlobs.slice(1);
              }
              if (blobBlobs && blobPrefix) {
                blob.strings.prefix = blob.strings.prefix + blobPrefix;
                blob.blobs = blobBlobs;
              }
            }
          }
          if (blob.strings["text-case"]) {
            blob.blobs = CSL2.Output.Formatters[blob.strings["text-case"]](this.state, str);
          }
          if (this.state.tmp.strip_periods && !noStripPeriods) {
            blob.blobs = blob.blobs.replace(/\.([^a-z]|$)/g, "$1");
          }
          for (var i = blob.decorations.length - 1; i > -1; i += -1) {
            if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
              blob.punctuation_in_quote = this.state.getOpt("punctuation-in-quote");
            }
            if (!blob.blobs.match(CSL2.ROMANESQUE_REGEXP)) {
              if (blob.decorations[i][0] === "@font-style") {
                blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));
              }
            }
          }
          curr.push(blob);
          this.state.fun.flipflopper.processTags(blob);
        } else if (useblob) {
          curr.push(blob);
        } else {
          curr.push(str);
        }
        return true;
      };
      CSL2.Output.Queue.prototype.string = function(state, myblobs, blob) {
        var i, ilen, j, jlen, b;
        var txt_esc = CSL2.getSafeEscape(this.state);
        var blobs = myblobs.slice();
        var ret = [];
        if (blobs.length === 0) {
          return ret;
        }
        var blob_delimiter = "";
        if (blob) {
          blob_delimiter = blob.strings.delimiter;
        } else {
          state.tmp.count_offset_characters = false;
          state.tmp.offset_characters = 0;
        }
        if (blob && blob.new_locale) {
          blob.old_locale = state.opt.lang;
          state.opt.lang = blob.new_locale;
        }
        var blobjr, use_suffix, use_prefix, params;
        for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          blobjr = blobs[i];
          if (blobjr.strings.first_blob) {
            state.tmp.count_offset_characters = blobjr.strings.first_blob;
          }
          if (typeof blobjr.blobs === "string") {
            if (typeof blobjr.num === "number") {
              ret.push(blobjr);
            } else if (blobjr.blobs) {
              if (blobjr.particle) {
                blobjr.blobs = blobjr.particle + blobjr.blobs;
                blobjr.particle = "";
              }
              b = txt_esc(blobjr.blobs);
              var blen = b.length;
              if (!state.tmp.suppress_decorations) {
                for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                  params = blobjr.decorations[j];
                  if (params[0] === "@showid") {
                    continue;
                  }
                  if (state.normalDecorIsOrphan(blobjr, params)) {
                    continue;
                  }
                  b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                }
              }
              if (b && b.length) {
                b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);
                if (state.opt.development_extensions.csl_reverse_lookup_support && !state.tmp.suppress_decorations) {
                  for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                    params = blobjr.decorations[j];
                    if (params[0] === "@showid") {
                      b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                    }
                  }
                }
                ret.push(b);
                if (state.tmp.count_offset_characters) {
                  state.tmp.offset_characters += blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length;
                }
              }
            }
          } else if (blobjr.blobs.length) {
            var addtoret = state.output.string(state, blobjr.blobs, blobjr);
            if (blob) {
              if (addtoret !== "string" && addtoret.length > 1 && blobjr.strings.delimiter) {
                var numberSeen = false;
                for (var j = 0, jlen = addtoret.length; j < jlen; j++) {
                  if (typeof addtoret[j] !== "string") {
                    numberSeen = true;
                  } else if (numberSeen) {
                    addtoret[j] = blobjr.strings.delimiter + addtoret[j];
                  }
                }
              }
            }
            ret = ret.concat(addtoret);
          }
          if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {
            state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;
            state.tmp.count_offset_characters = false;
          }
        }
        for (i = 0, ilen = ret.length - 1; i < ilen; i += 1) {
          if (typeof ret[i].num === "number" && typeof ret[i + 1].num === "number" && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
            ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : "");
            ret[i + 1].successor_prefix = "";
            ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
          }
        }
        var span_split = 0;
        for (var i = 0, ilen = ret.length; i < ilen; i += 1) {
          if (typeof ret[i] === "string") {
            span_split = parseInt(i, 10) + 1;
            if (i < ret.length - 1 && typeof ret[i + 1] === "object") {
              if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
                ret[i] += txt_esc(blob_delimiter);
              }
              ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
            }
          }
        }
        if (blob && (blob.decorations.length || blob.strings.suffix)) {
          span_split = ret.length;
        } else if (blob && blob.strings.prefix) {
          for (var i = 0, ilen = ret.length; i < ilen; i++) {
            if (typeof ret[i].num !== "undefined") {
              span_split = i;
              if (i === 0) {
                ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;
              }
              break;
            }
          }
        }
        var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);
        if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
          if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
              params = blob.decorations[i];
              if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) > -1) {
                continue;
              }
              if (state.normalDecorIsOrphan(blobjr, params)) {
                continue;
              }
              if (!params[0])
                continue;
              if (typeof blobs_start === "string") {
                blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
              }
            }
          }
          b = blobs_start;
          use_suffix = blob.strings.suffix;
          if (b && b.length) {
            use_prefix = blob.strings.prefix;
            b = txt_esc(use_prefix) + b + txt_esc(use_suffix);
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += use_prefix.length + use_suffix.length;
            }
          }
          blobs_start = b;
          if (!state.tmp.suppress_decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
              params = blob.decorations[i];
              if (["@cite", "@bibliography", "@display", "@showid"].indexOf(params[0]) === -1) {
                continue;
              }
              if (typeof blobs_start === "string") {
                blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
              }
            }
          }
        }
        var blobs_end = ret.slice(span_split, ret.length);
        if (!blobs_end.length && blobs_start) {
          ret = [blobs_start];
        } else if (blobs_end.length && !blobs_start) {
          ret = blobs_end;
        } else if (blobs_start && blobs_end.length) {
          ret = [blobs_start].concat(blobs_end);
        }
        if (typeof blob === "undefined") {
          this.queue = [];
          this.current.mystack = [];
          this.current.mystack.push(this.queue);
          if (state.tmp.suppress_decorations) {
            ret = state.output.renderBlobs(ret, void 0, false);
          }
        } else if (typeof blob === "boolean") {
          ret = state.output.renderBlobs(ret, void 0, true);
        }
        if (blob && blob.new_locale) {
          state.opt.lang = blob.old_locale;
        }
        return ret;
      };
      CSL2.Output.Queue.prototype.clearlevel = function() {
        var blob, pos, len;
        blob = this.current.value();
        len = blob.blobs.length;
        for (pos = 0; pos < len; pos += 1) {
          blob.blobs.pop();
        }
      };
      CSL2.Output.Queue.prototype.renderBlobs = function(blobs, delim, in_cite, parent) {
        var state, ret, ret_last_char, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;
        txt_esc = CSL2.getSafeEscape(this.state);
        if (!delim) {
          delim = "";
        }
        state = this.state;
        ret = "";
        ret_last_char = [];
        use_delim = "";
        len = blobs.length;
        if (this.state.tmp.area === "citation" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === "object" && parent) {
          blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;
          blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;
          blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);
          blobs[0].params = parent.params;
          return blobs[0];
        }
        var start = true;
        for (pos = 0; pos < len; pos += 1) {
          if (blobs[pos].checkNext) {
            blobs[pos].checkNext(blobs[pos + 1], start);
            start = false;
          } else if (blobs[pos + 1] && blobs[pos + 1].splice_prefix) {
            start = false;
          } else {
            start = true;
          }
        }
        var doit = true;
        for (pos = blobs.length - 1; pos > 0; pos += -1) {
          if (blobs[pos].checkLast) {
            if (doit && blobs[pos].checkLast(blobs[pos - 1])) {
              doit = false;
            }
          } else {
            doit = true;
          }
        }
        len = blobs.length;
        for (pos = 0; pos < len; pos += 1) {
          blob = blobs[pos];
          if (ret) {
            use_delim = delim;
          }
          if (typeof blob === "string") {
            ret += txt_esc(use_delim);
            ret += blob;
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += use_delim.length;
            }
          } else if (in_cite) {
            if (ret) {
              ret = [ret, blob];
            } else {
              ret = [blob];
            }
          } else if (blob.status !== CSL2.SUPPRESS) {
            if (blob.particle) {
              str = blob.particle + blob.num;
            } else {
              str = blob.formatter.format(blob.num, blob.gender);
            }
            var strlen = str.replace(/<[^>]*>/g, "").length;
            this.append(str, "empty", true);
            var str_blob = this.pop();
            var count_offset_characters = state.tmp.count_offset_characters;
            str = this.string(state, [str_blob], false);
            state.tmp.count_offset_characters = count_offset_characters;
            if (blob.strings["text-case"]) {
              str = CSL2.Output.Formatters[blob.strings["text-case"]](this.state, str);
            }
            if (str && this.state.tmp.strip_periods) {
              str = str.replace(/\.([^a-z]|$)/g, "$1");
            }
            if (!state.tmp.suppress_decorations) {
              llen = blob.decorations.length;
              for (ppos = 0; ppos < llen; ppos += 1) {
                params = blob.decorations[ppos];
                if (state.normalDecorIsOrphan(blob, params)) {
                  continue;
                }
                str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);
              }
            }
            str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);
            var addme = "";
            if (blob.status === CSL2.END) {
              addme = txt_esc(blob.range_prefix);
            } else if (blob.status === CSL2.SUCCESSOR) {
              addme = txt_esc(blob.successor_prefix);
            } else if (blob.status === CSL2.START) {
              if (pos > 0 && !blob.suppress_splice_prefix) {
                addme = txt_esc(blob.splice_prefix);
              } else {
                addme = "";
              }
            } else if (blob.status === CSL2.SEEN) {
              addme = txt_esc(blob.splice_prefix);
            }
            ret += addme;
            ret += str;
            if (state.tmp.count_offset_characters) {
              state.tmp.offset_characters += addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length;
            }
          }
        }
        return ret;
      };
      CSL2.Output.Queue.purgeEmptyBlobs = function(parent) {
        if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
          return;
        }
        for (var i = parent.blobs.length - 1; i > -1; i--) {
          CSL2.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);
          var child = parent.blobs[i];
          if (!child || !child.blobs || !child.blobs.length) {
            var buf = [];
            while (parent.blobs.length - 1 > i) {
              buf.push(parent.blobs.pop());
            }
            parent.blobs.pop();
            while (buf.length) {
              parent.blobs.push(buf.pop());
            }
          }
        }
      };
      CSL2.Output.Queue.adjust = function(punctInQuote) {
        var NO_SWAP_IN = {
          ";": true,
          ":": true
        };
        var NO_SWAP_OUT = {
          ".": true,
          "!": true,
          "?": true
        };
        var LtoR_MAP = {
          "!": {
            ".": "!",
            "?": "!?",
            ":": "!",
            ",": "!,",
            ";": "!;"
          },
          "?": {
            "!": "?!",
            ".": "?",
            ":": "?",
            ",": "?,",
            ";": "?;"
          },
          ".": {
            "!": ".!",
            "?": ".?",
            ":": ".:",
            ",": ".,",
            ";": ".;"
          },
          ":": {
            "!": "!",
            "?": "?",
            ".": ":",
            ",": ":,",
            ";": ":;"
          },
          ",": {
            "!": ",!",
            "?": ",?",
            ":": ",:",
            ".": ",.",
            ";": ",;"
          },
          ";": {
            "!": "!",
            "?": "?",
            ":": ";",
            ",": ";,",
            ".": ";"
          }
        };
        var SWAP_IN = {};
        var SWAP_OUT = {};
        var PUNCT = {};
        var PUNCT_OR_SPACE = {};
        for (var key in LtoR_MAP) {
          PUNCT[key] = true;
          PUNCT_OR_SPACE[key] = true;
          if (!NO_SWAP_IN[key]) {
            SWAP_IN[key] = true;
          }
          if (!NO_SWAP_OUT[key]) {
            SWAP_OUT[key] = true;
          }
        }
        PUNCT_OR_SPACE[" "] = true;
        PUNCT_OR_SPACE["\xA0"] = true;
        var RtoL_MAP = {};
        for (var key in LtoR_MAP) {
          for (var subkey in LtoR_MAP[key]) {
            if (!RtoL_MAP[subkey]) {
              RtoL_MAP[subkey] = {};
            }
            RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];
          }
        }
        function blobIsNumber(blob) {
          return typeof blob.num === "number" || blob.blobs && blob.blobs.length === 1 && typeof blob.blobs[0].num === "number";
        }
        function blobEndsInNumber(blob) {
          if (typeof blob.num === "number") {
            return true;
          }
          if (!blob.blobs || typeof blob.blobs !== "object") {
            return false;
          }
          if (blobEndsInNumber(blob.blobs[blob.blobs.length - 1])) {
            return true;
          }
        }
        function blobHasDecorations(blob, includeQuotes) {
          var ret = false;
          var decorlist = ["@font-style", "@font-variant", "@font-weight", "@text-decoration", "@vertical-align"];
          if (includeQuotes) {
            decorlist.push("@quotes");
          }
          if (blob.decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
              if (decorlist.indexOf(blob.decorations[i][0]) > -1) {
                ret = true;
                break;
              }
            }
          }
          return ret;
        }
        function blobHasDescendantQuotes(blob) {
          if (blob.decorations) {
            for (var i = 0, ilen = blob.decorations.length; i < ilen; i++) {
              if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
                return true;
              }
            }
          }
          if (typeof blob.blobs !== "object") {
            return false;
          }
          return blobHasDescendantQuotes(blob.blobs[blob.blobs.length - 1]);
        }
        function blobHasDescendantMergingPunctuation(parentChar, blob) {
          var childChar = blob.strings.suffix.slice(-1);
          if (!childChar && typeof blob.blobs === "string") {
            childChar = blob.blobs.slice(-1);
          }
          var mergedChars = RtoL_MAP[parentChar][childChar];
          if (mergedChars && mergedChars.length === 1) {
            return true;
          }
          if (typeof blob.blobs !== "object") {
            return false;
          }
          if (blobHasDescendantMergingPunctuation(parentChar, blob.blobs[blob.blobs.length - 1])) {
            return true;
          }
          return false;
        }
        function matchLastChar(blob, chr) {
          if (!PUNCT[chr]) {
            return false;
          }
          if (typeof blob.blobs === "string") {
            if (blob.blobs.slice(-1) === chr) {
              return true;
            } else {
              return false;
            }
          } else {
            var child = blob.blobs[blob.blobs.length - 1];
            if (child) {
              var childChar = child.strings.suffix.slice(-1);
              if (!childChar) {
                return matchLastChar(child, chr);
              } else if (child.strings.suffix.slice(-1) == chr) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
        }
        function mergeChars(First, first, Second, second, merge_right) {
          var FirstStrings = first === "blobs" ? First : First.strings;
          var SecondStrings = second === "blobs" ? Second : Second.strings;
          var firstChar = FirstStrings[first].slice(-1);
          var secondChar = SecondStrings[second].slice(0, 1);
          function cullRight() {
            SecondStrings[second] = SecondStrings[second].slice(1);
          }
          function cullLeft() {
            FirstStrings[first] = FirstStrings[first].slice(0, -1);
          }
          function addRight(chr) {
            SecondStrings[second] = chr + SecondStrings[second];
          }
          function addLeft(chr) {
            FirstStrings[first] += chr;
          }
          var cull = merge_right ? cullLeft : cullRight;
          function matchOnRight() {
            return RtoL_MAP[secondChar];
          }
          function matchOnLeft() {
            return LtoR_MAP[firstChar];
          }
          var match = merge_right ? matchOnLeft : matchOnRight;
          function mergeToRight() {
            var chr = LtoR_MAP[firstChar][secondChar];
            if (typeof chr === "string") {
              cullLeft();
              cullRight();
              addRight(chr);
            } else {
              addRight(firstChar);
              cullLeft();
            }
          }
          function mergeToLeft() {
            var chr = RtoL_MAP[secondChar][firstChar];
            if (typeof chr === "string") {
              cullLeft();
              cullRight();
              addLeft(chr);
            } else {
              addLeft(secondChar);
              cullRight();
            }
          }
          var merge = merge_right ? mergeToRight : mergeToLeft;
          var isDuplicate = firstChar === secondChar;
          if (isDuplicate) {
            cull();
          } else {
            if (match()) {
              merge();
            }
          }
        }
        function upward(parent) {
          if (parent.blobs && typeof parent.blobs == "string") {
            if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
          } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var parentDecorations = blobHasDecorations(parent, true);
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            this.upward(parent.blobs[i]);
            var parentStrings = parent.strings;
            var childStrings = parent.blobs[i].strings;
            if (i === 0) {
              if (parentStrings.prefix.slice(-1) === " " && childStrings.prefix.slice(0, 1) === " ") {
                childStrings.prefix = childStrings.prefix.slice(1);
              }
              var childChar = childStrings.prefix.slice(0, 1);
              if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {
                parentStrings.prefix += childChar;
                childStrings.prefix = childStrings.prefix.slice(1);
              }
            }
            if (i === parent.blobs.length - 1) {
              var childChar = childStrings.suffix.slice(-1);
              if (!parentDecorations && [" "].indexOf(childChar) > -1) {
                if (parentStrings.suffix.slice(0, 1) !== childChar) {
                  parentStrings.suffix = childChar + parentStrings.suffix;
                }
                childStrings.suffix = childStrings.suffix.slice(0, -1);
              }
            }
            if (parentStrings.delimiter && i > 0) {
              if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)] && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {
                childStrings.prefix = childStrings.prefix.slice(1);
              }
            }
          }
        }
        function leftward(parent) {
          if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            this.leftward(parent.blobs[i]);
            if (i < parent.blobs.length - 1 && !parent.strings.delimiter) {
              var child = parent.blobs[i];
              var childChar = child.strings.suffix.slice(-1);
              var sibling = parent.blobs[i + 1];
              var siblingChar = sibling.strings.prefix.slice(0, 1);
              var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);
              var hasNumber = typeof childChar === "number" || typeof siblingChar === "number";
              if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {
                var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);
                var suffixAndFieldMatch = !child.strings.suffix && typeof child.blobs === "string" && child.blobs.slice(-1) === siblingChar;
                if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {
                  mergeChars(child, "suffix", sibling, "prefix");
                } else {
                  sibling.strings.prefix = sibling.strings.prefix.slice(1);
                }
              }
            }
          }
        }
        function downward(parent) {
          if (parent.blobs && typeof parent.blobs == "string") {
            if (PUNCT[parent.strings.suffix.slice(0, 1)] && parent.strings.suffix.slice(0, 1) === parent.blobs.slice(-1)) {
              parent.strings.suffix = parent.strings.suffix.slice(1);
            }
            return;
          } else if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var parentStrings = parent.strings;
          var someChildrenAreNumbers = false;
          for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
            if (blobIsNumber(parent.blobs[i])) {
              someChildrenAreNumbers = true;
              break;
            }
          }
          if (true) {
            if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {
              var delimChar = parentStrings.delimiter.slice(0, 1);
              for (var i = parent.blobs.length - 2; i > -1; i--) {
                var childStrings = parent.blobs[i].strings;
                if (childStrings.suffix.slice(-1) !== delimChar) {
                  childStrings.suffix += delimChar;
                }
              }
              parentStrings.delimiter = parentStrings.delimiter.slice(1);
            }
          }
          for (var i = parent.blobs.length - 1; i > -1; i--) {
            var child = parent.blobs[i];
            var childStrings = parent.blobs[i].strings;
            var childDecorations = blobHasDecorations(child, true);
            var childIsNumber = blobIsNumber(child);
            if (i === parent.blobs.length - 1) {
              if (true) {
                var parentChar = parentStrings.suffix.slice(0, 1);
                var allowMigration = false;
                if (PUNCT[parentChar]) {
                  allowMigration = blobHasDescendantMergingPunctuation(parentChar, child);
                  if (!allowMigration && punctInQuote) {
                    allowMigration = blobHasDescendantQuotes(child);
                  }
                }
                if (allowMigration) {
                  if (PUNCT[parentChar]) {
                    if (!blobEndsInNumber(child)) {
                      if (typeof child.blobs === "string") {
                        mergeChars(child, "blobs", parent, "suffix");
                      } else {
                        mergeChars(child, "suffix", parent, "suffix");
                      }
                      if (parentStrings.suffix.slice(0, 1) === ".") {
                        childStrings.suffix += parentStrings.suffix.slice(0, 1);
                        parentStrings.suffix = parentStrings.suffix.slice(1);
                      }
                    }
                  }
                }
                if (childStrings.suffix.slice(-1) === "\xA0" && parentStrings.suffix.slice(0, 1) === " ") {
                  parentStrings.suffix = parentStrings.suffix.slice(1);
                }
                if (PUNCT_OR_SPACE[childStrings.suffix.slice(0, 1)]) {
                  if (typeof child.blobs === "string" && child.blobs.slice(-1) === childStrings.suffix.slice(0, 1)) {
                    childStrings.suffix = childStrings.suffix.slice(1);
                  }
                  if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {
                    parentStrings.suffix = parentStrings.suffix.slice(0, -1);
                  }
                }
              }
              if (matchLastChar(parent, parent.strings.suffix.slice(0, 1))) {
                parent.strings.suffix = parent.strings.suffix.slice(1);
              }
            } else if (parentStrings.delimiter) {
              if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0, 1)] && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {
                parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);
              }
            } else {
              var siblingStrings = parent.blobs[i + 1].strings;
              if (!blobIsNumber(child) && !childDecorations && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)] && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {
                siblingStrings.prefix = siblingStrings.prefix.slice(1);
              }
            }
            if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0, 1)] && typeof child.blobs === "string") {
              mergeChars(child, "blobs", child, "suffix");
            }
            this.downward(parent.blobs[i]);
          }
        }
        function swapToTheLeft(child) {
          var childChar = child.strings.suffix.slice(0, 1);
          if (typeof child.blobs === "string") {
            while (SWAP_IN[childChar]) {
              mergeChars(child, "blobs", child, "suffix");
              childChar = child.strings.suffix.slice(0, 1);
            }
          } else {
            while (SWAP_IN[childChar]) {
              mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix");
              childChar = child.strings.suffix.slice(0, 1);
            }
          }
        }
        function swapToTheRight(child) {
          if (typeof child.blobs === "string") {
            var childChar = child.blobs.slice(-1);
            while (SWAP_OUT[childChar]) {
              mergeChars(child, "blobs", child, "suffix", true);
              childChar = child.blobs.slice(-1);
            }
          } else {
            var childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
            while (SWAP_OUT[childChar]) {
              mergeChars(child.blobs[child.blobs.length - 1], "suffix", child, "suffix", true);
              childChar = child.blobs[child.blobs.length - 1].strings.suffix.slice(-1);
            }
          }
        }
        function fix(parent) {
          if (typeof parent !== "object" || typeof parent.blobs !== "object" || !parent.blobs.length) {
            return;
          }
          var lastChar;
          for (var i = 0, ilen = parent.blobs.length; i < ilen; i++) {
            var child = parent.blobs[i];
            var quoteSwap = false;
            for (var j = 0, jlen = child.decorations.length; j < jlen; j++) {
              var decoration = child.decorations[j];
              if (decoration[0] === "@quotes" && decoration[1] !== "false") {
                quoteSwap = true;
              }
            }
            if (quoteSwap) {
              if (punctInQuote) {
                swapToTheLeft(child);
              } else {
                swapToTheRight(child);
              }
            }
            lastChar = this.fix(parent.blobs[i]);
            if (child.blobs && typeof child.blobs === "string") {
              lastChar = child.blobs.slice(-1);
            }
          }
          return lastChar;
        }
        this.upward = upward;
        this.leftward = leftward;
        this.downward = downward;
        this.fix = fix;
      };
      CSL2.Engine.Opt = function() {
        this.parallel = {
          enable: false
        }, this.has_disambiguate = false;
        this.mode = "html";
        this.dates = {};
        this.jurisdictions_seen = {};
        this.suppressedJurisdictions = {};
        this.inheritedAttributes = {};
        this["locale-sort"] = [];
        this["locale-translit"] = [];
        this["locale-translat"] = [];
        this.citeAffixes = {
          persons: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          institutions: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          titles: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          journals: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          publishers: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          },
          places: {
            "locale-orig": {
              prefix: "",
              suffix: ""
            },
            "locale-translit": {
              prefix: "",
              suffix: ""
            },
            "locale-translat": {
              prefix: "",
              suffix: ""
            }
          }
        };
        this["default-locale"] = [];
        this.update_mode = CSL2.NONE;
        this.bib_mode = CSL2.NONE;
        this.sort_citations = false;
        this["et-al-min"] = 0;
        this["et-al-use-first"] = 1;
        this["et-al-use-last"] = false;
        this["et-al-subsequent-min"] = false;
        this["et-al-subsequent-use-first"] = false;
        this["demote-non-dropping-particle"] = "display-and-sort";
        this["parse-names"] = true;
        this.citation_number_slug = false;
        this.trigraph = "Aaaa00:AaAa00:AaAA00:AAAA00";
        this.nodenames = [];
        this.gender = {};
        this["cite-lang-prefs"] = {
          persons: ["orig"],
          institutions: ["orig"],
          titles: ["orig"],
          journals: ["orig"],
          publishers: ["orig"],
          places: ["orig"],
          number: ["orig"]
        };
        this.has_layout_locale = false;
        this.disable_duplicate_year_suppression = [];
        this.use_context_condition = false;
        this.jurisdiction_fallbacks = {};
        this.development_extensions = {};
        this.development_extensions.field_hack = true;
        this.development_extensions.allow_field_hack_date_override = true;
        this.development_extensions.locator_date_and_revision = true;
        this.development_extensions.locator_label_parse = true;
        this.development_extensions.raw_date_parsing = true;
        this.development_extensions.clean_up_csl_flaws = true;
        this.development_extensions.consolidate_legal_items = false;
        this.development_extensions.csl_reverse_lookup_support = false;
        this.development_extensions.wrap_url_and_doi = false;
        this.development_extensions.thin_non_breaking_space_html_hack = false;
        this.development_extensions.apply_citation_wrapper = false;
        this.development_extensions.main_title_from_short_title = false;
        this.development_extensions.uppercase_subtitles = false;
        this.development_extensions.normalize_lang_keys_to_lowercase = false;
        this.development_extensions.strict_text_case_locales = false;
        this.development_extensions.expect_and_symbol_form = false;
        this.development_extensions.require_explicit_legal_case_title_short = false;
        this.development_extensions.spoof_institutional_affiliations = false;
        this.development_extensions.force_jurisdiction = false;
        this.development_extensions.parse_names = true;
        this.development_extensions.hanging_indent_legacy_number = false;
        this.development_extensions.throw_on_empty = false;
        this.development_extensions.strict_inputs = true;
        this.development_extensions.prioritize_disambiguate_condition = false;
        this.development_extensions.force_short_title_casing_alignment = true;
        this.development_extensions.implicit_short_title = false;
        this.development_extensions.force_title_abbrev_fallback = false;
        this.development_extensions.split_container_title = false;
        this.development_extensions.legacy_institution_name_ordering = false;
        this.development_extensions.etal_min_etal_usefirst_hack = false;
      };
      CSL2.Engine.Tmp = function() {
        this.names_max = new CSL2.Stack();
        this.names_base = new CSL2.Stack();
        this.givens_base = new CSL2.Stack();
        this.value = [];
        this.namepart_decorations = {};
        this.namepart_type = false;
        this.area = "citation";
        this.root = "citation";
        this.extension = "";
        this.can_substitute = new CSL2.Stack(0, CSL2.LITERAL);
        this.element_rendered_ok = false;
        this.element_trace = new CSL2.Stack("style");
        this.nameset_counter = 0;
        this.group_context = new CSL2.Stack({
          term_intended: false,
          variable_attempt: false,
          variable_success: false,
          output_tip: void 0,
          label_form: void 0,
          parallel_first: void 0,
          parallel_last: void 0,
          parallel_delimiter_override: void 0,
          condition: false,
          force_suppress: false,
          done_vars: []
        });
        this.term_predecessor = false;
        this.in_cite_predecessor = false;
        this.jump = new CSL2.Stack(0, CSL2.LITERAL);
        this.decorations = new CSL2.Stack();
        this.tokenstore_stack = new CSL2.Stack();
        this.last_suffix_used = "";
        this.last_names_used = [];
        this.last_years_used = [];
        this.years_used = [];
        this.names_used = [];
        this.taintedItemIDs = {};
        this.taintedCitationIDs = {};
        this.initialize_with = new CSL2.Stack();
        this.disambig_request = false;
        this["name-as-sort-order"] = false;
        this.suppress_decorations = false;
        this.disambig_settings = new CSL2.AmbigConfig();
        this.bib_sort_keys = [];
        this.prefix = new CSL2.Stack("", CSL2.LITERAL);
        this.suffix = new CSL2.Stack("", CSL2.LITERAL);
        this.delimiter = new CSL2.Stack("", CSL2.LITERAL);
        this.cite_locales = [];
        this.cite_affixes = {
          citation: false,
          bibliography: false,
          citation_sort: false,
          bibliography_sort: false
        };
        this.strip_periods = 0;
        this.shadow_numbers = {};
        this.authority_stop_last = 0;
        this.loadedItemIDs = {};
        this.condition_counter = 0;
        this.condition_lang_val_arr = [];
        this.condition_lang_counter_arr = [];
      };
      CSL2.Engine.Fun = function(state) {
        this.match = new CSL2.Util.Match();
        this.suffixator = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
        this.romanizer = new CSL2.Util.Romanizer();
        this.ordinalizer = new CSL2.Util.Ordinalizer(state);
        this.long_ordinalizer = new CSL2.Util.LongOrdinalizer();
      };
      CSL2.Engine.Build = function() {
        this["alternate-term"] = false;
        this.in_bibliography = false;
        this.in_style = false;
        this.skip = false;
        this.postponed_macro = false;
        this.layout_flag = false;
        this.name = false;
        this.names_variables = [[]];
        this.name_label = [{}];
        this.form = false;
        this.term = false;
        this.macro = {};
        this.macro_stack = [];
        this.text = false;
        this.lang = false;
        this.area = "citation";
        this.root = "citation";
        this.extension = "";
        this.substitute_level = new CSL2.Stack(0, CSL2.LITERAL);
        this.names_level = 0;
        this.render_nesting_level = 0;
        this.render_seen = false;
        this.bibliography_key_pos = 0;
      };
      CSL2.Engine.Configure = function() {
        this.tests = [];
        this.fail = [];
        this.succeed = [];
      };
      CSL2.Engine.Citation = function(state) {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.srt = new CSL2.Registry.Comparifier(state, "citation_sort");
        this.opt.collapse = [];
        this.opt["disambiguate-add-names"] = false;
        this.opt["disambiguate-add-givenname"] = false;
        this.opt["disambiguate-add-year-suffix"] = false;
        this.opt["givenname-disambiguation-rule"] = "by-cite";
        this.opt["near-note-distance"] = 5;
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "citation";
      };
      CSL2.Engine.Bibliography = function() {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.opt.collapse = [];
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt["line-spacing"] = 1;
        this.opt["entry-spacing"] = 1;
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "bibliography";
      };
      CSL2.Engine.BibliographySort = function() {
        this.tokens = [];
        this.opt = {};
        this.opt.sort_directions = [];
        this.opt.topdecor = [];
        this.opt.citation_number_sort_direction = CSL2.ASCENDING;
        this.opt.citation_number_secondary = false;
        this.tmp = {};
        this.keys = [];
        this.root = "bibliography";
      };
      CSL2.Engine.CitationSort = function() {
        this.tokens = [];
        this.opt = {};
        this.opt.sort_directions = [];
        this.keys = [];
        this.opt.topdecor = [];
        this.root = "citation";
      };
      CSL2.Engine.InText = function() {
        this.opt = {
          inheritedAttributes: {}
        };
        this.tokens = [];
        this.opt.collapse = [];
        this.opt["disambiguate-add-names"] = false;
        this.opt["disambiguate-add-givenname"] = false;
        this.opt["disambiguate-add-year-suffix"] = false;
        this.opt["givenname-disambiguation-rule"] = "by-cite";
        this.opt["near-note-distance"] = 5;
        this.opt.topdecor = [];
        this.opt.layout_decorations = [];
        this.opt.layout_prefix = "";
        this.opt.layout_suffix = "";
        this.opt.layout_delimiter = "";
        this.opt.sort_locales = [];
        this.opt.max_number_of_names = 0;
        this.root = "intext";
      };
      CSL2.Engine.prototype.previewCitationCluster = function(citation, citationsPre, citationsPost, newMode) {
        var oldMode = this.opt.mode;
        this.setOutputFormat(newMode);
        if (citation.citationID) {
          delete citation.citationID;
        }
        var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL2.PREVIEW);
        this.setOutputFormat(oldMode);
        return ret[1];
      };
      CSL2.Engine.prototype.appendCitationCluster = function(citation) {
        var citationsPre = [];
        var len = this.registry.citationreg.citationByIndex.length;
        for (var pos = 0; pos < len; pos += 1) {
          var c = this.registry.citationreg.citationByIndex[pos];
          citationsPre.push(["" + c.citationID, c.properties.noteIndex]);
        }
        return this.processCitationCluster(citation, citationsPre, [])[1];
      };
      CSL2.Engine.prototype.processCitationCluster = function(citation, citationsPre, citationsPost, flag) {
        var c, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m, citationsInNote;
        this.debug = false;
        this.tmp.loadedItemIDs = {};
        this.tmp.citation_errors = [];
        this.registry.return_data = { "bibchange": false };
        this.setCitationId(citation);
        var oldCitationList;
        var oldItemList;
        var oldAmbigs;
        if (flag === CSL2.PREVIEW) {
          if (this.debug) {
            CSL2.debug("****** start state save *********");
          }
          oldCitationList = this.registry.citationreg.citationByIndex.slice();
          oldItemList = this.registry.reflist.slice();
          var newCitationList = citationsPre.concat(citationsPost);
          var newItemIds = {};
          var newItemIdsList = [];
          for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {
            c = this.registry.citationreg.citationById[newCitationList[i][0]];
            for (j = 0, jlen = c.citationItems.length; j < jlen; j += 1) {
              newItemIds[c.citationItems[j].id] = true;
              newItemIdsList.push("" + c.citationItems[j].id);
            }
          }
          for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {
            newItemIds[citation.citationItems[j].id] = true;
            newItemIdsList.push("" + citation.citationItems[j].id);
          }
          oldAmbigs = {};
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            if (!newItemIds[oldItemList[i].id]) {
              var oldAkey = this.registry.registry[oldItemList[i].id].ambig;
              var ids = this.registry.ambigcites[oldAkey];
              if (ids) {
                for (j = 0, jlen = ids.length; j < jlen; j += 1) {
                  oldAmbigs[ids[j]] = CSL2.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);
                }
              }
            }
          }
          if (this.debug) {
            CSL2.debug("****** end state save *********");
          }
        }
        this.tmp.taintedCitationIDs = {};
        var sortedItems = [];
        var rerunAkeys = {};
        for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {
          item = {};
          for (var key in citation.citationItems[i]) {
            item[key] = citation.citationItems[i][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (Item.id) {
            this.transform.loadAbbreviation("default", "hereinafter", Item.id, Item.language);
          }
          item = CSL2.parseLocator.call(this, item);
          if (this.opt.development_extensions.consolidate_legal_items) {
            this.remapSectionVariable([[Item, item]]);
          }
          if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
              var m = CSL2.LOCATOR_LABELS_REGEXP.exec(item.locator);
              if (m) {
                var tryLabel = CSL2.LOCATOR_LABELS_MAP[m[2]];
                if (this.getTerm(tryLabel)) {
                  item.label = tryLabel;
                  item.locator = m[3];
                }
              }
            }
          }
          var newitem = [Item, item];
          sortedItems.push(newitem);
          citation.citationItems[i].item = Item;
        }
        citation.sortedItems = sortedItems;
        var citationByIndex = [];
        var citationById = {};
        var lastNotePos;
        for (i = 0, ilen = citationsPre.length; i < ilen; i += 1) {
          preCitation = citationsPre[i];
          if (this.opt.development_extensions.strict_inputs) {
            if (citationById[preCitation[0]]) {
              CSL2.error("Previously referenced citationID " + preCitation[0] + " encountered in citationsPre");
            }
            if (preCitation[1]) {
              if (lastNotePos > preCitation[1]) {
                CSL2.debug("Note index sequence is not sane at citationsPre[" + i + "]");
              }
              lastNotePos = preCitation[1];
            }
          }
          this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);
          citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];
        }
        if (!citation.properties) {
          citation.properties = {
            noteIndex: 0
          };
        }
        if (this.opt.development_extensions.strict_inputs) {
          if (citationById[citation.citationID]) {
            CSL2.error("Citation with previously referenced citationID " + citation.citationID);
          }
          if (citation.properties.noteIndex) {
            if (lastNotePos > citation.properties.noteIndex) {
              CSL2.debug("Note index sequence is not sane for citation " + citation.citationID);
            }
            lastNotePos = citation.properties.noteIndex;
          }
        }
        citationByIndex.push(citation);
        citationById[citation.citationID] = citation;
        for (i = 0, ilen = citationsPost.length; i < ilen; i += 1) {
          postCitation = citationsPost[i];
          if (this.opt.development_extensions.strict_inputs) {
            if (citationById[postCitation[0]]) {
              CSL2.error("Previously referenced citationID " + postCitation[0] + " encountered in citationsPost");
            }
            if (postCitation[1]) {
              if (lastNotePos > postCitation[1]) {
                CSL2.debug("Note index sequence is not sane at postCitation[" + i + "]");
              }
              lastNotePos = postCitation[1];
            }
          }
          this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);
          citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];
        }
        this.registry.citationreg.citationByIndex = citationByIndex;
        this.registry.citationreg.citationById = citationById;
        this.registry.citationreg.citationsByItemId = {};
        if (this.opt.update_mode === CSL2.POSITION) {
          textCitations = [];
          noteCitations = [];
          citationsInNote = {};
        }
        var update_items = [];
        for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {
          citationByIndex[i].properties.index = i;
          for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {
            item = citationByIndex[i].sortedItems[j];
            if (!this.registry.citationreg.citationsByItemId[item[1].id]) {
              this.registry.citationreg.citationsByItemId[item[1].id] = [];
              update_items.push("" + item[1].id);
            }
            if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {
              this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);
            }
          }
          if (this.opt.update_mode === CSL2.POSITION) {
            if (citationByIndex[i].properties.noteIndex) {
              noteCitations.push(citationByIndex[i]);
            } else {
              citationByIndex[i].properties.noteIndex = 0;
              textCitations.push(citationByIndex[i]);
            }
          }
        }
        if (flag !== CSL2.ASSUME_ALL_ITEMS_REGISTERED) {
          if (this.debug) {
            CSL2.debug("****** start update items *********");
          }
          this.updateItems(update_items, null, null, true);
          if (this.debug) {
            CSL2.debug("****** endo update items *********");
          }
        }
        if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
            sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
          }
          if (this.opt.grouped_sort && !citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              var sortkeys = sortedItems[i][1].sortkeys;
              this.tmp.authorstring_request = true;
              var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;
              this.tmp.authorstring_request = true;
              CSL2.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);
              var authorstring = this.registry.authorstrings[sortedItems[i][0].id];
              this.tmp.authorstring_request = false;
              sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
            var lastauthor = false;
            var thiskey = false;
            var thisauthor = false;
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              if (sortedItems[i][1].sortkeys[0] !== lastauthor) {
                thisauthor = sortedItems[i][1].sortkeys[0];
                thiskey = sortedItems[i][1].sortkeys[1];
              }
              sortedItems[i][1].sortkeys[0] = "" + thiskey + i;
              lastauthor = thisauthor;
            }
          }
          if (!citation.properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
        }
        if (this.opt.parallel.enable) {
          this.parallel.StartCitation(citation.sortedItems);
        }
        var citations;
        if (this.opt.update_mode === CSL2.POSITION) {
          for (var i = 0; i < 2; i += 1) {
            var first_ref = {};
            var last_ref = {};
            var first_container_ref = {};
            citations = [textCitations, noteCitations][i];
            for (j = 0, jlen = citations.length; j < jlen; j += 1) {
              var onecitation = citations[j];
              if (!citations[j].properties.noteIndex) {
                citations[j].properties.noteIndex = 0;
              }
              citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);
              if (j > 0 && onecitation.properties.noteIndex && citations[j - 1].properties.noteIndex > onecitation.properties.noteIndex) {
                citationsInNote = {};
                first_ref = {};
                last_ref = {};
                first_container_ref = {};
              }
              for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {
                if (onecitation.sortedItems[k][1].parallel && onecitation.sortedItems[k][1].parallel !== "first") {
                  continue;
                }
                if (!citationsInNote[onecitation.properties.noteIndex]) {
                  citationsInNote[onecitation.properties.noteIndex] = 1;
                } else {
                  citationsInNote[onecitation.properties.noteIndex] += 1;
                }
              }
              for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {
                item = citations[j].sortedItems[k];
                var item_id = item[0].id;
                var first_id = item[0].legislation_id ? item[0].legislation_id : item[0].id;
                var last_id = item[0].legislation_id ? item[0].legislation_id : item[0].container_id ? item[0].container_id : item[0].id;
                var myxloc = item[1]["locator-extra"];
                var mylocator = item[1].locator;
                var mylabel = item[1].label;
                var incitationid;
                var incitationxloc;
                if (k > 0) {
                  if (onecitation.sortedItems[k - 1][0].legislation_id) {
                    incitationid = onecitation.sortedItems[k - 1][0].legislation_id;
                  } else {
                    incitationid = onecitation.sortedItems[k - 1][1].id;
                    incitationxloc = onecitation.sortedItems[k - 1][1]["locator-extra"];
                    for (var l = k - 2; l > -1; l--) {
                      if (onecitation.sortedItems[l][1].parallel === "first") {
                        incitationid = onecitation.sortedItems[l][1].id;
                        incitationxloc = onecitation.sortedItems[l][1]["locator-extra"];
                      }
                    }
                  }
                }
                if (flag === CSL2.PREVIEW) {
                  if (onecitation.citationID != citation.citationID) {
                    if (typeof first_ref[item[1].id] === "undefined") {
                      first_ref[first_id] = onecitation.properties.noteIndex;
                      last_ref[last_id] = onecitation.properties.noteIndex;
                    } else {
                      last_ref[last_id] = onecitation.properties.noteIndex;
                    }
                    continue;
                  }
                }
                var oldvalue = {};
                oldvalue.position = item[1].position;
                oldvalue["first-reference-note-number"] = item[1]["first-reference-note-number"];
                oldvalue["first-container-reference-note-number"] = item[1]["first-container-reference-note-number"];
                oldvalue["near-note"] = item[1]["near-note"];
                item[1]["first-reference-note-number"] = 0;
                item[1]["first-container-reference-note-number"] = 0;
                item[1]["near-note"] = false;
                if (this.registry.citationreg.citationsByItemId[item_id]) {
                  if (this.opt.xclass === "note" && this.opt.has_disambiguate) {
                    var oldCount = this.registry.registry[item[0].id]["citation-count"];
                    var newCount = this.registry.citationreg.citationsByItemId[item_id].length;
                    this.registry.registry[item[0].id]["citation-count"] = this.registry.citationreg.citationsByItemId[item_id].length;
                    if (typeof oldCount === "number") {
                      var oldCountCheck = oldCount < 2;
                      var newCountCheck = newCount < 2;
                      if (oldCountCheck !== newCountCheck) {
                        for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                          this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                        }
                      }
                    } else {
                      for (var l = 0, llen = this.registry.citationreg.citationsByItemId[item_id].length; l < llen; l++) {
                        rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                        this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                      }
                    }
                  }
                }
                var oldlastid;
                var oldlastxloc;
                if (typeof last_ref[last_id] === "undefined" && onecitation.properties.mode !== "author-only") {
                  first_ref[first_id] = onecitation.properties.noteIndex;
                  last_ref[last_id] = onecitation.properties.noteIndex;
                  first_container_ref[last_id] = onecitation.properties.noteIndex;
                  item[1].position = CSL2.POSITION_FIRST;
                } else {
                  var ibidme = false;
                  var suprame = false;
                  var prevCitation = null;
                  if (j > 0) {
                    var prevCitation = citations[j - 1];
                  }
                  var thisCitation = citations[j];
                  if (j > 0) {
                    var old_last_id_offset = 1;
                    if (prevCitation.properties.mode === "author-only" && j > 1) {
                      old_last_id_offset = 2;
                    }
                    var adjusted_offset = j - old_last_id_offset;
                    if (citations[adjusted_offset].sortedItems.length) {
                      oldlastid = citations[adjusted_offset].sortedItems.slice(-1)[0][1].id;
                      oldlastxloc = citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1]["locator-extra"];
                    }
                    if (prevCitation.sortedItems.length) {
                      if (prevCitation.sortedItems[0].slice(-1)[0].legislation_id) {
                        oldlastid = prevCitation.sortedItems[0].slice(-1)[0].legislation_id;
                      }
                    }
                  }
                  if (j > 0 && k === 0 && prevCitation.properties.noteIndex !== thisCitation.properties.noteIndex) {
                    var useme = false;
                    var oldid = prevCitation.sortedItems[0][0].id;
                    if (prevCitation.sortedItems[0][0].legislation_id) {
                      oldid = prevCitation.sortedItems[0][0].legislation_id;
                    }
                    if (oldid == first_id && prevCitation.properties.noteIndex >= thisCitation.properties.noteIndex - 1) {
                      var prevxloc = prevCitation.sortedItems[0][1]["locator-extra"];
                      var thisxloc = thisCitation.sortedItems[0][1]["locator-extra"];
                      if ((citationsInNote[prevCitation.properties.noteIndex] === 1 || prevCitation.properties.noteIndex === 0) && prevxloc === thisxloc) {
                        useme = true;
                      }
                    }
                    if (useme) {
                      ibidme = true;
                    } else {
                      suprame = true;
                    }
                  } else if (k > 0 && incitationid == first_id && incitationxloc == myxloc) {
                    ibidme = true;
                  } else if (k === 0 && j > 0 && prevCitation.properties.noteIndex == thisCitation.properties.noteIndex && prevCitation.sortedItems.length && oldlastid == first_id && oldlastxloc == myxloc) {
                    ibidme = true;
                  } else {
                    suprame = true;
                  }
                  var prev, prev_locator, prev_label, curr_locator, curr_label;
                  if (ibidme) {
                    if (k > 0) {
                      prev = onecitation.sortedItems[k - 1][1];
                    } else {
                      prev = citations[j - 1].sortedItems[0][1];
                    }
                    if (prev.locator) {
                      if (prev.label) {
                        prev_label = prev.label;
                      } else {
                        prev_label = "";
                      }
                      prev_locator = "" + prev.locator + prev_label;
                    } else {
                      prev_locator = prev.locator;
                    }
                    if (mylocator) {
                      if (mylabel) {
                        curr_label = mylabel;
                      } else {
                        curr_label = "";
                      }
                      curr_locator = "" + mylocator + curr_label;
                    } else {
                      curr_locator = mylocator;
                    }
                  }
                  if (ibidme && prev_locator && !curr_locator) {
                    ibidme = false;
                    suprame = true;
                  }
                  if (ibidme) {
                    if (!prev_locator && curr_locator) {
                      item[1].position = CSL2.POSITION_IBID_WITH_LOCATOR;
                    } else if (!prev_locator && !curr_locator) {
                      item[1].position = CSL2.POSITION_IBID;
                    } else if (prev_locator && curr_locator === prev_locator) {
                      item[1].position = CSL2.POSITION_IBID;
                    } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {
                      item[1].position = CSL2.POSITION_IBID_WITH_LOCATOR;
                    } else {
                      ibidme = false;
                      suprame = true;
                    }
                  }
                  if (suprame) {
                    item[1].position = CSL2.POSITION_CONTAINER_SUBSEQUENT;
                    if (typeof first_ref[first_id] === "undefined") {
                      first_ref[first_id] = onecitation.properties.noteIndex;
                    } else {
                      item[1].position = CSL2.POSITION_SUBSEQUENT;
                    }
                  }
                  if (suprame || ibidme) {
                    if (onecitation.properties.mode === "author-only") {
                      item[1].position = CSL2.POSITION_FIRST;
                    }
                    if (first_container_ref[last_id] != onecitation.properties.noteIndex) {
                      item[1]["first-container-reference-note-number"] = first_container_ref[last_id];
                      if (this.registry.registry[item[0].id]) {
                        this.registry.registry[item[0].id]["first-container-reference-note-number"] = first_container_ref[last_id];
                      }
                    }
                    if (first_ref[first_id] != onecitation.properties.noteIndex) {
                      item[1]["first-reference-note-number"] = first_ref[first_id];
                      if (this.registry.registry[item[0].id]) {
                        this.registry.registry[item[0].id]["first-reference-note-number"] = first_ref[first_id];
                      }
                    }
                  }
                }
                if (onecitation.properties.noteIndex) {
                  var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[last_id], 10);
                  if (item[1].position !== CSL2.POSITION_FIRST && note_distance <= this.citation.opt["near-note-distance"]) {
                    item[1]["near-note"] = true;
                  }
                  last_ref[last_id] = onecitation.properties.noteIndex;
                } else if (item[1].position !== CSL2.POSITION_FIRST) {
                  item[1]["near-note"] = true;
                }
                if (onecitation.citationID != citation.citationID) {
                  for (n = 0, nlen = CSL2.POSITION_TEST_VARS.length; n < nlen; n += 1) {
                    var param = CSL2.POSITION_TEST_VARS[n];
                    if (item[1][param] !== oldvalue[param]) {
                      if (this.registry.registry[item[0].id]) {
                        if (param === "first-reference-note-number") {
                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                          this.tmp.taintedItemIDs[item[0].id] = true;
                        }
                      }
                      this.tmp.taintedCitationIDs[onecitation.citationID] = true;
                    }
                  }
                }
                if (this.sys.variableWrapper) {
                  item[1].index = onecitation.properties.index;
                  item[1].noteIndex = onecitation.properties.noteIndex;
                }
              }
            }
          }
        }
        if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          if (!citation.properties.unsorted) {
            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
            }
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
        }
        for (var key in this.tmp.taintedItemIDs) {
          if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {
            citations = this.registry.citationreg.citationsByItemId[key];
            if (citations) {
              for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
                this.tmp.taintedCitationIDs[citations[i].citationID] = true;
              }
            }
          }
        }
        var ret = [];
        if (flag === CSL2.PREVIEW) {
          if (this.debug) {
            CSL2.debug("****** start run processor *********");
          }
          try {
            ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);
          } catch (e) {
            CSL2.error("Error running CSL processor for preview: " + e);
          }
          if (this.debug) {
            CSL2.debug("****** end run processor *********");
            CSL2.debug("****** start state restore *********");
          }
          this.registry.citationreg.citationByIndex = oldCitationList;
          this.registry.citationreg.citationById = {};
          for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {
            this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];
          }
          if (this.debug) {
            CSL2.debug("****** start final update *********");
          }
          var oldItemIds = [];
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
            oldItemIds.push("" + oldItemList[i].id);
          }
          this.updateItems(oldItemIds, null, null, true);
          if (this.debug) {
            CSL2.debug("****** end final update *********");
          }
          for (var key in oldAmbigs) {
            if (oldAmbigs.hasOwnProperty(key)) {
              this.registry.registry[key].disambig = oldAmbigs[key];
            }
          }
          if (this.debug) {
            CSL2.debug("****** end state restore *********");
          }
        } else {
          for (var rerunAkey in rerunAkeys) {
            this.disambiguate.run(rerunAkey, citation);
          }
          var obj;
          for (var key in this.tmp.taintedCitationIDs) {
            if (key == citation.citationID) {
              continue;
            }
            var mycitation = this.registry.citationreg.citationById[key];
            if (!mycitation.properties.unsorted) {
              for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {
                mycitation.sortedItems[i][1].sortkeys = CSL2.getSortKeys.call(this, mycitation.sortedItems[i][0], "citation_sort");
              }
              mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);
            }
            this.tmp.citation_pos = mycitation.properties.index;
            this.tmp.citation_note_index = mycitation.properties.noteIndex;
            this.tmp.citation_id = "" + mycitation.citationID;
            obj = [];
            obj.push(mycitation.properties.index);
            obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));
            obj.push(mycitation.citationID);
            ret.push(obj);
          }
          this.tmp.taintedItemIDs = {};
          this.tmp.taintedCitationIDs = {};
          this.tmp.citation_pos = citation.properties.index;
          this.tmp.citation_note_index = citation.properties.noteIndex;
          this.tmp.citation_id = "" + citation.citationID;
          obj = [];
          obj.push(citationsPre.length);
          obj.push(this.process_CitationCluster.call(this, sortedItems, citation));
          obj.push(citation.citationID);
          ret.push(obj);
          ret.sort(function(a, b) {
            if (a[0] > b[0]) {
              return 1;
            } else if (a[0] < b[0]) {
              return -1;
            } else {
              return 0;
            }
          });
        }
        this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();
        return [this.registry.return_data, ret];
      };
      CSL2.Engine.prototype.process_CitationCluster = function(sortedItems, citation) {
        var str = "";
        if (citation && citation.properties && citation.properties.mode === "composite") {
          citation.properties.mode = "author-only";
          var firstChunk = CSL2.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "suppress-author";
          var secondChunk = "";
          if (citation.properties.infix) {
            this.output.append(citation.properties.infix);
            secondChunk = this.output.string(this, this.output.queue);
            if (typeof secondChunk === "object") {
              secondChunk = secondChunk.join("");
            }
          }
          var thirdChunk = CSL2.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "composite";
          if (firstChunk && secondChunk && CSL2.SWAPPING_PUNCTUATION.concat(["\u2019", "'"]).indexOf(secondChunk[0]) > -1) {
            firstChunk += secondChunk;
            secondChunk = false;
          }
          str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {
            return obj;
          }).join(" ");
        } else {
          str = CSL2.getCitationCluster.call(this, sortedItems, citation);
        }
        return str;
      };
      CSL2.Engine.prototype.makeCitationCluster = function(rawList) {
        var inputList, newitem, str, pos, len, item, Item;
        inputList = [];
        len = rawList.length;
        for (pos = 0; pos < len; pos += 1) {
          item = {};
          for (var key in rawList[pos]) {
            item[key] = rawList[pos][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (this.opt.development_extensions.locator_label_parse) {
            if (item.locator && ["bill", "gazette", "legislation", "regulation", "treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === "page")) {
              var m = CSL2.LOCATOR_LABELS_REGEXP.exec(item.locator);
              if (m) {
                var tryLabel = CSL2.LOCATOR_LABELS_MAP[m[2]];
                if (this.getTerm(tryLabel)) {
                  item.label = tryLabel;
                  item.locator = m[3];
                }
              }
            }
          }
          if (item.locator) {
            item.locator = ("" + item.locator).replace(/\s+$/, "");
          }
          newitem = [Item, item];
          inputList.push(newitem);
        }
        if (this.opt.development_extensions.consolidate_legal_items) {
          this.remapSectionVariable(inputList);
        }
        if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {
          len = inputList.length;
          for (pos = 0; pos < len; pos += 1) {
            inputList[pos][1].sortkeys = CSL2.getSortKeys.call(this, inputList[pos][0], "citation_sort");
          }
          inputList.sort(this.citation.srt.compareCompositeKeys);
        }
        this.tmp.citation_errors = [];
        var str = CSL2.getCitationCluster.call(this, inputList);
        return str;
      };
      CSL2.getAmbiguousCite = function(Item, disambig, visualForm, item) {
        var ret;
        var flags = this.tmp.group_context.tip;
        var oldTermSiblingLayer = {
          term_intended: flags.term_intended,
          variable_attempt: flags.variable_attempt,
          variable_success: flags.variable_success,
          output_tip: flags.output_tip,
          label_form: flags.label_form,
          non_parallel: flags.non_parallel,
          parallel_last: flags.parallel_last,
          parallel_first: flags.parallel_first,
          parallel_last_override: flags.parallel_last_override,
          parallel_delimiter_override: flags.parallel_delimiter_override,
          parallel_delimiter_override_on_suppress: flags.parallel_delimiter_override_on_suppress,
          condition: flags.condition,
          force_suppress: flags.force_suppress,
          done_vars: flags.done_vars.slice()
        };
        if (disambig) {
          this.tmp.disambig_request = disambig;
        } else {
          this.tmp.disambig_request = false;
        }
        var itemSupp = {
          position: CSL2.POSITION_SUBSEQUENT,
          "near-note": true
        };
        if (item) {
          itemSupp.locator = item.locator;
          itemSupp.label = item.label;
        }
        if (this.registry.registry[Item.id] && this.registry.citationreg.citationsByItemId && this.registry.citationreg.citationsByItemId[Item.id] && this.registry.citationreg.citationsByItemId[Item.id].length && visualForm) {
          if (this.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            itemSupp["first-reference-note-number"] = this.registry.registry[Item.id]["first-reference-note-number"];
          }
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        var origSuppressDecorations = this.tmp.suppress_decorations;
        this.tmp.suppress_decorations = true;
        this.tmp.just_looking = true;
        CSL2.getCite.call(this, Item, itemSupp, null, false);
        for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
          CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
        }
        if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.output.adjust.fix(this.output.queue[j]);
          }
        }
        var ret = this.output.string(this, this.output.queue);
        this.tmp.just_looking = false;
        this.tmp.suppress_decorations = origSuppressDecorations;
        this.tmp.group_context.replace(oldTermSiblingLayer);
        return ret;
      };
      CSL2.getSpliceDelimiter = function(last_locator, last_collapsed, pos) {
        if (this.citation.opt["after-collapse-delimiter"] !== void 0) {
          if (last_locator) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (last_collapsed && !this.tmp.have_collapsed) {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== "year-suffix") {
            this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else {
            this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;
          }
        } else if (this.tmp.use_cite_group_delimiter) {
          this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
        } else {
          if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL2.NUMERIC) {
            this.tmp.splice_delimiter = ", ";
          } else if (this.tmp.cite_locales[pos - 1]) {
            var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
            if (alt_affixes && alt_affixes.delimiter) {
              this.tmp.splice_delimiter = alt_affixes.delimiter;
            }
          } else if (!this.tmp.splice_delimiter) {
            this.tmp.splice_delimiter = "";
          }
        }
        return this.tmp.splice_delimiter;
      };
      CSL2.getCitationCluster = function(inputList, citation) {
        var result, objects, myparams, len, pos, item, last_collapsed, params, empties, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;
        var citation_prefix = "";
        this.output.checkNestedBrace = new CSL2.checkNestedBrace(this);
        if (citation) {
          citationID = citation.citationID;
          authorOnly = citation.properties.mode === "author-only" ? !!citation.properties.mode : false;
          if (this.opt.xclass !== "note") {
            suppressAuthor = citation.properties.mode === "suppress-author" ? !!citation.properties.mode : false;
          }
          if (citation.properties.prefix) {
            citation_prefix = CSL2.checkPrefixSpaceAppend(this, citation.properties.prefix);
          }
        }
        inputList = inputList ? inputList : [];
        this.tmp.last_primary_names_string = false;
        txt_esc = CSL2.getSafeEscape(this);
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        result = "";
        objects = [];
        this.tmp.last_suffix_used = "";
        this.tmp.last_names_used = [];
        this.tmp.last_years_used = [];
        this.tmp.backref_index = [];
        this.tmp.cite_locales = [];
        if (!this.tmp.just_looking) {
          this.tmp.abbrev_trimmer = {
            QUASHES: {}
          };
        }
        var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);
        var suppressTrailingPunctuation = false;
        if (this.citation.opt.suppressTrailingPunctuation) {
          suppressTrailingPunctuation = true;
        }
        if (citationID) {
          if (this.registry.citationreg.citationById[citationID].properties["suppress-trailing-punctuation"]) {
            suppressTrailingPunctuation = true;
          }
        }
        if (this.opt.xclass === "note") {
          var parasets = [];
          var lastTitle = false;
          var lastPosition = false;
          var lastID = false;
          var lst = [];
          for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
            var type2 = inputList[i][0].type;
            var title2 = inputList[i][0].title;
            var position = inputList[i][1].position;
            var id = inputList[i][0].id;
            if (title2 && type2 === "legal_case" && id !== lastID && position) {
              if (title2 !== lastTitle || parasets.length === 0) {
                lst = [];
                parasets.push(lst);
              }
              lst.push(inputList[i][1]);
            }
            lastTitle = title2;
            lastPosition = position;
            lastID = id;
          }
          for (i = 0, ilen = parasets.length; i < ilen; i += 1) {
            lst = parasets[i];
            if (lst.length < 2) {
              continue;
            }
            var locatorInLastPosition = lst.slice(-1)[0].locator;
            if (locatorInLastPosition) {
              for (var j = 0, jlen = lst.length - 1; j < jlen; j += 1) {
                if (lst[j].locator) {
                  locatorInLastPosition = false;
                }
              }
            }
            if (locatorInLastPosition) {
              lst[0].locator = locatorInLastPosition;
              delete lst.slice(-1)[0].locator;
              lst[0].label = lst.slice(-1)[0].label;
              if (lst.slice(-1)[0].label) {
                delete lst.slice(-1)[0].label;
              }
            }
          }
        }
        myparams = [];
        len = inputList.length;
        if (inputList[0] && inputList[0][1]) {
          if (authorOnly) {
            delete inputList[0][1]["suppress-author"];
            inputList[0][1]["author-only"] = true;
          } else if (suppressAuthor) {
            delete inputList[0][1]["author-only"];
            inputList[0][1]["suppress-author"] = true;
          }
        }
        if (this.opt.parallel.enable) {
          this.parallel.StartCitation(inputList);
        }
        for (pos = 0; pos < len; pos += 1) {
          this.tmp.cite_index = pos;
          Item = inputList[pos][0];
          item = inputList[pos][1];
          item = CSL2.parseLocator.call(this, item);
          last_collapsed = this.tmp.have_collapsed;
          var last_locator = false;
          if (pos > 0 && inputList[pos - 1][1]) {
            last_locator = !!inputList[pos - 1][1].locator;
          }
          params = {};
          this.tmp.shadow_numbers = {};
          if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {
            var output = this.output;
            this.output = new CSL2.Output.Queue(this);
            this.output.adjust = new CSL2.Output.Queue.adjust();
            CSL2.getAmbiguousCite.call(this, Item, null, false, item);
            this.output = output;
          }
          this.tmp.in_cite_predecessor = false;
          if (pos > 0) {
            CSL2.getCite.call(this, Item, item, "" + inputList[pos - 1][0].id, true);
          } else {
            this.tmp.term_predecessor = false;
            CSL2.getCite.call(this, Item, item, null, true);
          }
          if (!this.tmp.cite_renders_content) {
            error_object = {
              citationID: "" + this.tmp.citation_id,
              index: this.tmp.citation_pos,
              noteIndex: this.tmp.citation_note_index,
              itemID: "" + Item.id,
              citationItems_pos: pos,
              error_code: CSL2.ERROR_NO_RENDERED_FORM
            };
            this.tmp.citation_errors.push(error_object);
          }
          params.splice_delimiter = CSL2.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);
          if (item && item["author-only"]) {
            this.tmp.suppress_decorations = true;
          }
          if (pos > 0) {
            preceding_item = inputList[pos - 1][1];
            var precedingEndsInPeriodOrComma = preceding_item.suffix && [";", ".", ","].indexOf(preceding_item.suffix.slice(-1)) > -1;
            var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [";", ".", ","].indexOf(item.prefix.slice(0, 1)) > -1;
            if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {
              var spaceidx = params.splice_delimiter.indexOf(" ");
              if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {
                params.splice_delimiter = params.splice_delimiter.slice(spaceidx);
              } else {
                params.splice_delimiter = "";
              }
            }
          }
          params.suppress_decorations = this.tmp.suppress_decorations;
          params.have_collapsed = this.tmp.have_collapsed;
          myparams.push(params);
          if (item["author-only"]) {
            break;
          }
        }
        empties = 0;
        myblobs = this.output.queue.slice();
        var citation_suffix = "";
        if (citation) {
          citation_suffix = CSL2.checkSuffixSpacePrepend(this, citation.properties.suffix);
        }
        var suffix = this.citation.opt.layout_suffix;
        var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];
        if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {
          suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;
        }
        if (CSL2.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {
          suffix = suffix.slice(0, 1);
        }
        suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);
        for (var i = 0, ilen = this.output.queue.length; i < ilen; i += 1) {
          CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
        }
        if (!this.tmp.suppress_decorations && this.output.queue.length) {
          if (!(this.opt.development_extensions.apply_citation_wrapper && this.sys.wrapCitationEntry && !this.tmp.just_looking && this.tmp.area === "citation")) {
            if (!suppressTrailingPunctuation) {
              this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;
            }
            this.output.queue[0].strings.prefix = use_layout_prefix;
          }
        }
        if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j]);
            this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);
          }
        }
        for (pos = 0, len = myblobs.length; pos < len; pos += 1) {
          var buffer = [];
          this.output.queue = [myblobs[pos]];
          this.tmp.suppress_decorations = myparams[pos].suppress_decorations;
          this.tmp.splice_delimiter = myparams[pos].splice_delimiter;
          if (myblobs[pos].parallel_delimiter) {
            this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;
          }
          this.tmp.have_collapsed = myparams[pos].have_collapsed;
          composite = this.output.string(this, this.output.queue);
          this.tmp.suppress_decorations = false;
          if (typeof composite === "string") {
            this.tmp.suppress_decorations = false;
            if (!composite) {
              if (this.opt.development_extensions.throw_on_empty) {
                CSL2.error("Citation would render no content");
              } else {
                composite = "[NO_PRINTED_FORM]";
              }
            }
            return composite;
          }
          if (typeof composite === "object" && composite.length === 0 && !item["suppress-author"]) {
            if (pos === 0) {
              var errStr = "[CSL STYLE ERROR: reference with no printed form.]";
              var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : "";
              var sufStr = pos === myblobs.length - 1 ? txt_esc(this.citation.opt.layout_suffix) : "";
              composite.push(preStr + errStr + sufStr);
            } else if (pos === myblobs.length - 1) {
              var tmpobj = objects[objects.length - 1];
              if (typeof tmpobj === "string") {
                objects[objects.length - 1] += txt_esc(this.citation.opt.layout_suffix);
              } else if (typeof tmpobj === "object") {
                tmpobj.strings.suffix += txt_esc(this.citation.opt.layout_suffix);
              }
            }
          }
          if (buffer.length && typeof composite[0] === "string") {
            composite.reverse();
            var tmpstr = composite.pop();
            if (tmpstr && tmpstr.slice(0, 1) === ",") {
              buffer.push(tmpstr);
            } else if (typeof buffer.slice(-1)[0] == "string" && buffer.slice(-1)[0].slice(-1) === ",") {
              buffer.push(" " + tmpstr);
            } else if (tmpstr) {
              buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);
            }
          } else {
            composite.reverse();
            compie = composite.pop();
            if (typeof compie !== "undefined") {
              if (buffer.length && typeof buffer[buffer.length - 1] === "string") {
                buffer[buffer.length - 1] += compie.successor_prefix;
              }
              buffer.push(compie);
            }
          }
          llen = composite.length;
          for (ppos = 0; ppos < llen; ppos += 1) {
            obj = composite[ppos];
            if (typeof obj === "string") {
              buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);
              continue;
            }
            compie = composite.pop();
            if (typeof compie !== "undefined") {
              buffer.push(compie);
            }
          }
          if (buffer.length === 0 && !inputList[pos][1]["suppress-author"]) {
            empties += 1;
          }
          if (buffer.length > 1 && typeof buffer[0] !== "string") {
            buffer = [this.output.renderBlobs(buffer)];
          }
          if (buffer.length) {
            if (typeof buffer[0] === "string") {
              if (pos > 0) {
                buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];
              }
            } else {
              if (pos > 0) {
                buffer[0].splice_prefix = this.tmp.splice_delimiter;
              } else {
                buffer[0].splice_prefix = "";
              }
            }
          }
          objects = objects.concat(buffer);
        }
        result += this.output.renderBlobs(objects);
        if (result) {
          if (!this.tmp.suppress_decorations) {
            len = this.citation.opt.layout_decorations.length;
            for (pos = 0; pos < len; pos += 1) {
              params = this.citation.opt.layout_decorations[pos];
              if (params[1] === "normal") {
                continue;
              }
              if (!item || !item["author-only"]) {
                result = this.fun.decorate[params[0]][params[1]](this, result);
              }
            }
          }
        }
        this.tmp.suppress_decorations = false;
        if (!result) {
          if (this.opt.development_extensions.throw_on_empty) {
            CSL2.error("Citation would render no content");
          } else {
            result = "[NO_PRINTED_FORM]";
          }
        }
        return result;
      };
      CSL2.getCite = function(Item, item, prevItemID, blockShadowNumberReset) {
        var next, error_object;
        var areaOrig = this.tmp.area;
        if (item && item["author-only"] && this.intext && this.intext.tokens.length > 0) {
          this.tmp.area = "intext";
        }
        this.tmp.cite_renders_content = false;
        this.tmp.probably_rendered_something = false;
        this.tmp.prevItemID = prevItemID;
        CSL2.citeStart.call(this, Item, item, blockShadowNumberReset);
        next = 0;
        this.tmp.name_node = {};
        this.nameOutput = new CSL2.NameOutput(this, Item, item);
        while (next < this[this.tmp.area].tokens.length) {
          next = CSL2.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);
        }
        CSL2.citeEnd.call(this, Item, item);
        if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {
          if (this.tmp.area === "bibliography") {
            error_object = {
              index: this.tmp.bibliography_pos,
              itemID: "" + Item.id,
              error_code: CSL2.ERROR_NO_RENDERED_FORM
            };
            this.tmp.bibliography_errors.push(error_object);
          }
        }
        this.tmp.area = areaOrig;
        return "" + Item.id;
      };
      CSL2.citeStart = function(Item, item, blockShadowNumberReset) {
        this.tmp.lang_array = [];
        if (Item.language) {
          var m = Item.language.match(/^([a-zA-Z]+).*/);
          if (m) {
            this.tmp.lang_array.push(m[1].toLowerCase());
          }
        }
        this.tmp.lang_array.push(this.opt.lang);
        if (!blockShadowNumberReset) {
          this.tmp.shadow_numbers = {};
        }
        this.tmp.disambiguate_count = 0;
        this.tmp.disambiguate_maxMax = 0;
        this.tmp.same_author_as_previous_cite = false;
        if (!this.tmp.suppress_decorations) {
          this.tmp.subsequent_author_substitute_ok = true;
        } else {
          this.tmp.subsequent_author_substitute_ok = false;
        }
        this.tmp.lastchr = "";
        if (this.tmp.area === "citation" && this.citation.opt.collapse && this.citation.opt.collapse.length) {
          this.tmp.have_collapsed = true;
        } else {
          this.tmp.have_collapsed = false;
        }
        this.tmp.render_seen = false;
        if (this.tmp.disambig_request && !this.tmp.disambig_override) {
          this.tmp.disambig_settings = this.tmp.disambig_request;
        } else if (this.registry.registry[Item.id] && !this.tmp.disambig_override) {
          this.tmp.disambig_request = this.registry.registry[Item.id].disambig;
          this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;
        } else {
          this.tmp.disambig_settings = new CSL2.AmbigConfig();
        }
        if (this.tmp.area !== "citation") {
          if (!this.registry.registry[Item.id]) {
            this.tmp.disambig_restore = new CSL2.AmbigConfig();
          } else {
            this.tmp.disambig_restore = CSL2.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
            if (this.tmp.area === "bibliography" && this.tmp.disambig_settings && this.tmp.disambig_override) {
              if (this.opt["disambiguate-add-names"]) {
                this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();
                if (this.tmp.disambig_request) {
                  this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();
                }
              }
              if (this.opt["disambiguate-add-givenname"]) {
                this.tmp.disambig_request = this.tmp.disambig_settings;
                this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();
                this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();
                for (var i = 0, ilen = this.tmp.disambig_settings.givens.length; i < ilen; i += 1) {
                  this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                }
                for (var i = 0, ilen = this.tmp.disambig_request.givens.length; i < ilen; i += 1) {
                  this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                }
              }
            }
          }
        }
        this.tmp.names_used = [];
        this.tmp.nameset_counter = 0;
        this.tmp.years_used = [];
        this.tmp.names_max.clear();
        if (!this.tmp.just_looking) {
          if (!item || item.parallel === "first" || !item.parallel) {
            this.tmp.abbrev_trimmer = {
              QUASHES: {}
            };
          }
        }
        this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;
        this.bibliography_sort.keys = [];
        this.citation_sort.keys = [];
        this.tmp.has_done_year_suffix = false;
        this.tmp.last_cite_locale = false;
        if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {
          this.tmp.disambig_restore = CSL2.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
        }
        this.tmp.first_name_string = false;
        this.tmp.authority_stop_last = 0;
      };
      CSL2.citeEnd = function(Item, item) {
        if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
          this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();
          this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();
          for (var i = 0, ilen = this.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
            this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();
          }
        }
        this.tmp.disambig_restore = false;
        if (item && item.suffix) {
          this.tmp.last_suffix_used = item.suffix;
        } else {
          this.tmp.last_suffix_used = "";
        }
        this.tmp.last_years_used = this.tmp.years_used.slice();
        this.tmp.last_names_used = this.tmp.names_used.slice();
        this.tmp.cut_var = false;
        this.tmp.disambig_request = false;
        this.tmp.cite_locales.push(this.tmp.last_cite_locale);
        if (this.tmp.issued_date && this.tmp.renders_collection_number) {
          var buf = [];
          for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {
            buf.push(this.tmp.issued_date.list.pop());
          }
          this.tmp.issued_date.list.pop();
          for (i = buf.length - 1; i > -1; i += -1) {
            this.tmp.issued_date.list.push(buf.pop());
          }
        }
        this.tmp.issued_date = false;
        this.tmp.renders_collection_number = false;
      };
      CSL2.Engine.prototype.makeBibliography = function(bibsection) {
        var debug, ret, params, maxoffset, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;
        debug = false;
        if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {
          bibsection = {
            exclude: []
          };
          if (this.bibliography.opt.exclude_types) {
            for (var i in this.bibliography.opt.exclude_types) {
              var val = this.bibliography.opt.exclude_types[i];
              bibsection.exclude.push({
                field: "type",
                value: val
              });
            }
          }
          if (this.bibliography.opt.exclude_with_fields) {
            for (var i in this.bibliography.opt.exclude_with_fields) {
              var field = this.bibliography.opt.exclude_with_fields[i];
              bibsection.exclude.push({
                field,
                value: true
              });
            }
          }
        }
        if (!this.bibliography.tokens.length) {
          return false;
        }
        if (typeof bibsection === "string") {
          this.opt.citation_number_slug = bibsection;
          bibsection = false;
        }
        if (debug) {
          len = this.bibliography.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tok = this.bibliography.tokens[pos];
            CSL2.debug("bibtok: " + tok.name);
          }
          CSL2.debug("---");
          len = this.citation.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tokk = this.citation.tokens[pos];
            CSL2.debug("cittok: " + tok.name);
          }
          CSL2.debug("---");
          len = this.bibliography_sort.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
            tokkk = this.bibliography_sort.tokens[pos];
            CSL2.debug("bibsorttok: " + tok.name);
          }
        }
        ret = CSL2.getBibliographyEntries.call(this, bibsection);
        entry_ids = ret[0];
        entry_strings = ret[1];
        var done = ret[2];
        params = {
          "maxoffset": 0,
          "entryspacing": this.bibliography.opt["entry-spacing"],
          "linespacing": this.bibliography.opt["line-spacing"],
          "second-field-align": false,
          "entry_ids": entry_ids,
          "bibliography_errors": this.tmp.bibliography_errors.slice(),
          "done": done
        };
        if (this.bibliography.opt["second-field-align"]) {
          params["second-field-align"] = this.bibliography.opt["second-field-align"];
        }
        maxoffset = 0;
        len = this.registry.reflist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.registry.reflist[pos];
          if (item.offset > params.maxoffset) {
            params.maxoffset = item.offset;
          }
        }
        if (this.bibliography.opt.hangingindent) {
          params.hangingindent = this.bibliography.opt.hangingindent;
        }
        params.bibstart = this.fun.decorate.bibstart;
        params.bibend = this.fun.decorate.bibend;
        this.opt.citation_number_slug = false;
        return [params, entry_strings];
      };
      CSL2.getBibliographyEntries = function(bibsection) {
        var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, debug, i, ilen, siblings, skips, sortedItems, eyetem, entry_item_data, j, jlen;
        ret = [];
        entry_item_data = [];
        this.tmp.area = "bibliography";
        this.tmp.root = "bibliography";
        this.tmp.last_rendered_name = false;
        this.tmp.bibliography_errors = [];
        this.tmp.bibliography_pos = 0;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          input = this.registry.getSortedIds();
        } else {
          input = this.refetchItems(this.registry.getSortedIds());
        }
        this.tmp.disambig_override = true;
        function eval_string(a, b) {
          if (a === b) {
            return true;
          }
          return false;
        }
        function eval_list(a, lst) {
          lllen = lst.length;
          for (pppos = 0; pppos < lllen; pppos += 1) {
            if (eval_string(a, lst[pppos])) {
              return true;
            }
          }
          return false;
        }
        function eval_spec(a, b) {
          if (typeof a === "boolean" || !a) {
            if (a) {
              return !!b;
            } else {
              return !b;
            }
          } else {
            if (typeof b === "string") {
              return eval_string(a, b);
            } else if (!b) {
              return false;
            } else {
              return eval_list(a, b);
            }
          }
        }
        skips = {};
        var page_item_count;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          page_item_count = 0;
          if (bibsection.page_start !== true) {
            for (i = 0, ilen = input.length; i < ilen; i += 1) {
              skips[input[i]] = true;
              if (bibsection.page_start == input[i]) {
                break;
              }
            }
          }
        }
        var processed_item_ids = [];
        var consolidatedIDs = {};
        this.tmp.container_item_count = {};
        input = input.filter((o) => {
          var ret2 = o;
          if (o.legislation_id) {
            if (consolidatedIDs[o.legislation_id]) {
              ret2 = false;
            } else {
              consolidatedIDs[o.legislation_id] = true;
            }
          } else if (o.container_id) {
            if (!this.tmp.container_item_count[o.container_id]) {
              this.tmp.container_item_count[o.container_id] = 0;
            }
            this.tmp.container_item_count[o.container_id]++;
            if (this.bibliography.opt.consolidate_containers.indexOf(o.type) > -1) {
              if (consolidatedIDs[o.container_id]) {
                ret2 = false;
              } else {
                consolidatedIDs[o.container_id] = true;
              }
            }
          }
          return ret2;
        });
        this.tmp.container_item_pos = {};
        for (i = 0, ilen = input.length; i < ilen; i += 1) {
          if (bibsection && bibsection.page_start && bibsection.page_length) {
            if (skips[input[i]]) {
              continue;
            }
            item = this.refetchItem(input[i]);
            if (page_item_count === bibsection.page_length) {
              break;
            }
          } else {
            item = input[i];
            if (skips[item.id]) {
              continue;
            }
          }
          if (bibsection) {
            include = true;
            if (bibsection.include) {
              include = false;
              for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {
                spec = bibsection.include[j];
                if (eval_spec(spec.value, item[spec.field])) {
                  include = true;
                  break;
                }
              }
            } else if (bibsection.exclude) {
              anymatch = false;
              for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {
                spec = bibsection.exclude[j];
                if (eval_spec(spec.value, item[spec.field])) {
                  anymatch = true;
                  break;
                }
              }
              if (anymatch) {
                include = false;
              }
            } else if (bibsection.select) {
              include = false;
              allmatch = true;
              for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {
                spec = bibsection.select[j];
                if (!eval_spec(spec.value, item[spec.field])) {
                  allmatch = false;
                }
              }
              if (allmatch) {
                include = true;
              }
            }
            if (bibsection.quash) {
              allmatch = true;
              for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {
                spec = bibsection.quash[j];
                if (!eval_spec(spec.value, item[spec.field])) {
                  allmatch = false;
                }
              }
              if (allmatch) {
                include = false;
              }
            }
            if (!include) {
              continue;
            }
          }
          if (debug) {
            CSL2.debug("BIB: " + item.id);
          }
          if (item.container_id) {
            if (!this.tmp.container_item_pos[item.container_id]) {
              this.tmp.container_item_pos[item.container_id] = 0;
            }
            this.tmp.container_item_pos[item.container_id]++;
          }
          bib_entry = new CSL2.Token("group", CSL2.START);
          bib_entry.decorations = [["@bibliography", "entry"]].concat(this.bibliography.opt.layout_decorations);
          this.output.startTag("bib_entry", bib_entry);
          if (item.system_id && this.sys.embedBibliographyEntry) {
            this.output.current.value().item_id = item.system_id;
          } else {
            this.output.current.value().system_id = item.id;
          }
          entry_item_ids = [];
          if (this.registry.registry[item.id].master && !(bibsection && bibsection.page_start && bibsection.page_length)) {
            sortedItems = [[item, { id: item.id }]];
            siblings = this.registry.registry[item.id].siblings;
            for (var j = 0, jlen = siblings.length; j < jlen; j++) {
              sortedItems.push([this.refetchItem(siblings[j]), { id: siblings[j] }]);
            }
            this.parallel.StartCitation(sortedItems);
            if (this.registry.registry[item.id].parallel_delimiter_override) {
              this.output.queue[0].strings.delimiter = this.registry.registry[item.id].parallel_delimiter_override;
            } else {
              this.output.queue[0].strings.delimiter = ", ";
            }
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            for (j = 0, jlen = sortedItems.length; j < jlen; j += 1) {
              if (j < sortedItems.length - 1) {
                this.tmp.parallel_and_not_last = true;
              } else {
                delete this.tmp.parallel_and_not_last;
              }
              entry_item_ids.push("" + CSL2.getCite.call(this, sortedItems[j][0], sortedItems[j][1]));
              this.tmp.cite_index++;
              skips[sortedItems[j][0].id] = true;
            }
          } else if (!this.registry.registry[item.id].siblings) {
            this.tmp.term_predecessor = false;
            this.tmp.cite_index = 0;
            entry_item_ids.push("" + CSL2.getCite.call(this, item));
            if (bibsection && bibsection.page_start && bibsection.page_length) {
              page_item_count += 1;
            }
          }
          entry_item_data.push("");
          this.tmp.bibliography_pos += 1;
          processed_item_ids.push(entry_item_ids);
          this.output.endTag("bib_entry");
          if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {
            if (!this.output.queue[0].blobs[0].blobs[0].strings) {
              topblobs = this.output.queue[0].blobs;
            } else {
              topblobs = this.output.queue[0].blobs[0].blobs;
            }
            topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;
          }
          for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            CSL2.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);
          }
          for (j = 0, jlen = this.output.queue.length; j < jlen; j += 1) {
            this.output.adjust.upward(this.output.queue[j]);
            this.output.adjust.leftward(this.output.queue[j]);
            this.output.adjust.downward(this.output.queue[j], true);
            this.output.adjust.fix(this.output.queue[j]);
          }
          res = this.output.string(this, this.output.queue)[0];
          if (!res && this.opt.update_mode === CSL2.NUMERIC) {
            var err = ret.length + 1 + ". [CSL STYLE ERROR: reference with no printed form.]";
            res = CSL2.Output.Formats[this.opt.mode]["@bibliography/entry"](this, err);
          }
          if (res) {
            ret.push(res);
          }
        }
        var done = false;
        if (bibsection && bibsection.page_start && bibsection.page_length) {
          var last_expected_id = input.slice(-1)[0];
          var last_seen_id = processed_item_ids.slice(-1)[0];
          if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {
            done = true;
          }
        }
        this.tmp.disambig_override = false;
        return [processed_item_ids, ret, done];
      };
      CSL2.Engine.prototype.setCitationId = function(citation, force) {
        var ret, id, direction;
        ret = false;
        if (!citation.citationID || force) {
          id = Math.floor(Math.random() * 1e14);
          while (true) {
            direction = 0;
            if (!this.registry.citationreg.citationById[id]) {
              citation.citationID = "a" + id.toString(32);
              break;
            } else if (!direction && id < 5e13) {
              direction = 1;
            } else {
              direction = -1;
            }
            if (direction === 1) {
              id += 1;
            } else {
              id += -1;
            }
          }
          ret = "" + id;
        }
        this.registry.citationreg.citationById[citation.citationID] = citation;
        return ret;
      };
      CSL2.Engine.prototype.rebuildProcessorState = function(citations, mode, uncitedItemIDs) {
        if (!citations) {
          citations = [];
        }
        if (!mode) {
          mode = "html";
        }
        var doneIDs = {};
        var itemIDs = [];
        for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
          for (var j = 0, jlen = citations[i].citationItems.length; j < jlen; j += 1) {
            var itemID = "" + citations[i].citationItems[j].id;
            if (!doneIDs[itemID]) {
              itemIDs.push(itemID);
            }
            doneIDs[itemID] = true;
          }
        }
        this.updateItems(itemIDs);
        var pre = [];
        var post = [];
        var ret = [];
        var oldMode = this.opt.mode;
        this.setOutputFormat(mode);
        for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
          var res = this.processCitationCluster(citations[i], pre, post, CSL2.ASSUME_ALL_ITEMS_REGISTERED);
          pre.push([citations[i].citationID, citations[i].properties.noteIndex]);
          for (var j = 0, jlen = res[1].length; j < jlen; j += 1) {
            var index = res[1][j][0];
            ret[index] = [
              pre[index][0],
              pre[index][1],
              res[1][j][1]
            ];
          }
        }
        this.updateUncitedItems(uncitedItemIDs);
        this.setOutputFormat(oldMode);
        return ret;
      };
      CSL2.Engine.prototype.restoreProcessorState = function(citations) {
        var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;
        citationList = [];
        itemList = [];
        if (!citations) {
          citations = [];
        }
        var indexNumbers = [];
        var citationIds = {};
        for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          if (citationIds[citations[i].citationID]) {
            this.setCitationId(citations[i], true);
          }
          citationIds[citations[i].citationID] = true;
          indexNumbers.push(citations[i].properties.index);
        }
        var oldCitations = citations.slice();
        oldCitations.sort(function(a, b) {
          if (a.properties.index < b.properties.index) {
            return -1;
          } else if (a.properties.index > b.properties.index) {
            return 1;
          } else {
            return 0;
          }
        });
        for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          oldCitations[i].properties.index = i;
        }
        for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          sortedItems = [];
          for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {
            item = oldCitations[i].citationItems[j];
            if (typeof item.sortkeys === "undefined") {
              item.sortkeys = [];
            }
            Item = this.retrieveItem("" + item.id);
            newitem = [Item, item];
            sortedItems.push(newitem);
            oldCitations[i].citationItems[j].item = Item;
            itemList.push("" + item.id);
          }
          if (!oldCitations[i].properties.unsorted) {
            sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
          oldCitations[i].sortedItems = sortedItems;
          this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];
        }
        this.updateItems(itemList);
        for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          citationList.push(["" + citations[i].citationID, citations[i].properties.noteIndex]);
        }
        var ret = [];
        if (citations && citations.length) {
          ret = this.processCitationCluster(citations[0], [], citationList.slice(1));
        } else {
          this.registry = new CSL2.Registry(this);
          this.tmp = new CSL2.Engine.Tmp();
          this.disambiguate = new CSL2.Disambiguation(this);
        }
        return ret;
      };
      CSL2.Engine.prototype.updateItems = function(idList, nosort, rerun_ambigs, implicitUpdate) {
        var debug = false;
        var oldArea = this.tmp.area;
        var oldRoot = this.tmp.root;
        var oldExtension = this.tmp.extension;
        if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        this.tmp.extension = "";
        if (!implicitUpdate) {
          this.tmp.loadedItemIDs = {};
        }
        if (debug) {
          CSL2.debug("--> init <--");
        }
        this.registry.init(idList);
        if (rerun_ambigs) {
          for (var ambig in this.registry.ambigcites) {
            this.registry.ambigsTouched[ambig] = true;
          }
        }
        this.registry.dodeletes(this.registry.myhash);
        this.registry.doinserts(this.registry.mylist);
        this.registry.dorefreshes();
        this.registry.rebuildlist(nosort);
        this.registry.setsortkeys();
        this.registry.setdisambigs();
        this.registry.sorttokens(nosort);
        this.registry.renumber();
        this.tmp.extension = oldExtension;
        this.tmp.area = oldArea;
        this.tmp.root = oldRoot;
        return this.registry.getSortedIds();
      };
      CSL2.Engine.prototype.updateUncitedItems = function(idList, nosort) {
        var idHash;
        var oldArea = this.tmp.area;
        var oldRoot = this.tmp.root;
        var oldExtension = this.tmp.extension;
        if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
        }
        this.tmp.area = "citation";
        this.tmp.root = "citation";
        this.tmp.extension = "";
        this.tmp.loadedItemIDs = {};
        if (!idList) {
          idList = [];
        }
        if (typeof idList == "object") {
          if (typeof idList.length == "undefined") {
            idHash = idList;
            idList = [];
            for (var key in idHash) {
              idList.push(key);
            }
          } else if (typeof idList.length == "number") {
            idHash = {};
            for (var i = 0, ilen = idList.length; i < ilen; i += 1) {
              idHash[idList[i]] = true;
            }
          }
        }
        this.registry.init(idList, true);
        this.registry.dopurge(idHash);
        this.registry.doinserts(this.registry.mylist);
        this.registry.dorefreshes();
        this.registry.rebuildlist(nosort);
        this.registry.setsortkeys();
        this.registry.setdisambigs();
        this.registry.sorttokens(nosort);
        this.registry.renumber();
        this.tmp.extension = oldExtension;
        this.tmp.area = oldArea;
        this.tmp.root = oldRoot;
        return this.registry.getSortedIds();
      };
      CSL2.localeResolve = function(langstr, defaultLocale) {
        var ret, langlst;
        if (!defaultLocale) {
          defaultLocale = "en-US";
        }
        if (!langstr) {
          langstr = defaultLocale;
        }
        ret = {};
        langlst = langstr.split(/[\-_]/);
        ret.base = CSL2.LANG_BASES[langlst[0]];
        if (typeof ret.base === "undefined") {
          return { base: defaultLocale, best: langstr, bare: langlst[0] };
        }
        if (langlst.length === 1) {
          ret.generic = true;
        }
        if (langlst.length === 1 || langlst[1] === "x") {
          ret.best = ret.base.replace("_", "-");
        } else {
          ret.best = langlst.slice(0, 2).join("-");
        }
        ret.base = ret.base.replace("_", "-");
        ret.bare = langlst[0];
        return ret;
      };
      CSL2.Engine.prototype.localeConfigure = function(langspec, beShy) {
        var localexml;
        if (beShy && this.locale[langspec.best]) {
          return;
        }
        if (langspec.best === "en-US") {
          localexml = CSL2.setupXml(this.sys.retrieveLocale("en-US"));
          this.localeSet(localexml, "en-US", langspec.best);
        } else if (langspec.best !== "en-US") {
          if (langspec.base !== langspec.best) {
            localexml = CSL2.setupXml(this.sys.retrieveLocale(langspec.base));
            this.localeSet(localexml, langspec.base, langspec.best);
          }
          localexml = CSL2.setupXml(this.sys.retrieveLocale(langspec.best));
          this.localeSet(localexml, langspec.best, langspec.best);
        }
        this.localeSet(this.cslXml, "", langspec.best);
        this.localeSet(this.cslXml, langspec.bare, langspec.best);
        if (langspec.base !== langspec.best) {
          this.localeSet(this.cslXml, langspec.base, langspec.best);
        }
        this.localeSet(this.cslXml, langspec.best, langspec.best);
        if (typeof this.locale[langspec.best].terms["page-range-delimiter"] === "undefined") {
          if (["fr", "pt"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {
            this.locale[langspec.best].terms["page-range-delimiter"] = "-";
          } else {
            this.locale[langspec.best].terms["page-range-delimiter"] = "\u2013";
          }
        }
        if (typeof this.locale[langspec.best].terms["year-range-delimiter"] === "undefined") {
          this.locale[langspec.best].terms["year-range-delimiter"] = "\u2013";
        }
        if (typeof this.locale[langspec.best].terms["citation-range-delimiter"] === "undefined") {
          this.locale[langspec.best].terms["citation-range-delimiter"] = "\u2013";
        }
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          var localeLists = ["default-locale", "locale-sort", "locale-translit", "locale-translat"];
          for (var i = 0, ilen = localeLists.length; i < ilen; i += 1) {
            for (var j = 0, jlen = this.opt[localeLists[i]].length; j < jlen; j += 1) {
              this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();
            }
          }
          this.opt.lang = this.opt.lang.toLowerCase();
        }
      };
      CSL2.Engine.prototype.localeSet = function(myxml, lang_in, lang_out) {
        var blob, locale, nodes, attributes, pos, term, form, termname, styleopts, date2, attrname, len, genderform, target, i, ilen;
        lang_in = lang_in.replace("_", "-");
        lang_out = lang_out.replace("_", "-");
        if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          lang_in = lang_in.toLowerCase();
          lang_out = lang_out.toLowerCase();
        }
        if (!this.locale[lang_out]) {
          this.locale[lang_out] = {};
          this.locale[lang_out].terms = {};
          this.locale[lang_out].opts = {};
          this.locale[lang_out].opts["skip-words"] = CSL2.SKIP_WORDS;
          if (!this.locale[lang_out].opts["leading-noise-words"]) {
            this.locale[lang_out].opts["leading-noise-words"] = [];
          }
          this.locale[lang_out].dates = {};
          this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
          this.locale[lang_out]["noun-genders"] = {};
        }
        locale = myxml.makeXml();
        if (myxml.nodeNameIs(myxml.dataObj, "locale")) {
          locale = myxml.dataObj;
        } else {
          nodes = myxml.getNodesByName(myxml.dataObj, "locale");
          var foundLocale = false;
          for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
            blob = nodes[pos];
            if (!foundLocale && myxml.getAttributeValue(blob, "lang", "xml") === lang_in) {
              locale = blob;
              foundLocale = true;
            } else {
              var lang = myxml.getAttributeValue(blob, "lang", "xml");
              var style_options = myxml.getNodesByName(blob, "style-options");
              if (lang && style_options && style_options.length) {
                var jurispref = myxml.getAttributeValue(style_options[0], "jurisdiction-preference");
                if (jurispref) {
                  if (!this.locale[lang]) {
                    this.locale[lang] = {
                      opts: {}
                    };
                  }
                  this.locale[lang].opts["jurisdiction-preference"] = jurispref.split(/\s+/);
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "type");
        for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {
          var typenode = nodes[i];
          var type2 = myxml.getAttributeValue(typenode, "name");
          var gender = myxml.getAttributeValue(typenode, "gender");
          this.opt.gender[type2] = gender;
        }
        var hasCslOrdinals101 = myxml.getNodesByName(locale, "term", "ordinal").length;
        if (hasCslOrdinals101) {
          for (var key in this.locale[lang_out].ord.keys) {
            delete this.locale[lang_out].terms[key];
          }
          this.locale[lang_out].ord = { "1.0.1": false, keys: {} };
        }
        nodes = myxml.getNodesByName(locale, "term");
        var ordinals101 = { "last-digit": {}, "last-two-digits": {}, "whole-number": {} };
        var ordinals101_toggle = false;
        var genderized_terms = {};
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          term = nodes[pos];
          termname = myxml.getAttributeValue(term, "name");
          if (termname === "sub verbo") {
            termname = "sub-verbo";
          }
          if (termname.slice(0, 7) === "ordinal") {
            if (termname === "ordinal") {
              ordinals101_toggle = true;
            } else {
              var match = myxml.getAttributeValue(term, "match");
              var termstub = termname.slice(8);
              var genderform = myxml.getAttributeValue(term, "gender-form");
              if (!genderform) {
                genderform = "neuter";
              }
              if (!match) {
                match = "last-two-digits";
                if (termstub.slice(0, 1) === "0") {
                  match = "last-digit";
                }
              }
              if (termstub.slice(0, 1) === "0") {
                termstub = termstub.slice(1);
              }
              if (!ordinals101[match][termstub]) {
                ordinals101[match][termstub] = {};
              }
              ordinals101[match][termstub][genderform] = termname;
            }
            this.locale[lang_out].ord.keys[termname] = true;
          }
          if (typeof this.locale[lang_out].terms[termname] === "undefined") {
            this.locale[lang_out].terms[termname] = {};
          }
          form = "long";
          genderform = false;
          if (myxml.getAttributeValue(term, "form")) {
            form = myxml.getAttributeValue(term, "form");
          }
          if (myxml.getAttributeValue(term, "gender-form")) {
            genderform = myxml.getAttributeValue(term, "gender-form");
          }
          if (myxml.getAttributeValue(term, "gender")) {
            this.locale[lang_out]["noun-genders"][termname] = myxml.getAttributeValue(term, "gender");
          }
          if (genderform) {
            this.locale[lang_out].terms[termname][genderform] = {};
            this.locale[lang_out].terms[termname][genderform][form] = [];
            target = this.locale[lang_out].terms[termname][genderform];
            genderized_terms[termname] = true;
          } else {
            this.locale[lang_out].terms[termname][form] = [];
            target = this.locale[lang_out].terms[termname];
          }
          if (myxml.numberofnodes(myxml.getNodesByName(term, "multiple"))) {
            target[form][0] = myxml.getNodeValue(term, "single");
            if (target[form][0].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
            target[form][1] = myxml.getNodeValue(term, "multiple");
            if (target[form][1].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
          } else {
            target[form] = myxml.getNodeValue(term);
            if (target[form].indexOf("%s") > -1) {
              this.opt.hasPlaceholderTerm = true;
            }
          }
        }
        if (!this.locale[lang_out].terms.supplement) {
          this.locale[lang_out].terms.supplement = {};
        }
        if (!this.locale[lang_out].terms.supplement["long"]) {
          this.locale[lang_out].terms.supplement["long"] = ["supplement", "supplements"];
        }
        if (ordinals101_toggle) {
          for (var ikey in genderized_terms) {
            var gender_segments = {};
            var form_segments = 0;
            for (var jkey in this.locale[lang_out].terms[ikey]) {
              if (["masculine", "feminine"].indexOf(jkey) > -1) {
                gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];
              } else {
                form_segments += 1;
              }
            }
            if (!form_segments) {
              if (gender_segments.feminine) {
                for (var jkey in gender_segments.feminine) {
                  this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];
                }
              } else if (gender_segments.masculine) {
                for (var jkey in gender_segments.masculine) {
                  this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];
                }
              }
            }
          }
          this.locale[lang_out].ord["1.0.1"] = ordinals101;
        }
        for (termname in this.locale[lang_out].terms) {
          for (i = 0, ilen = 2; i < ilen; i += 1) {
            genderform = CSL2.GENDERS[i];
            if (this.locale[lang_out].terms[termname][genderform]) {
              for (form in this.locale[lang_out].terms[termname]) {
                if (!this.locale[lang_out].terms[termname][genderform][form]) {
                  this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "style-options");
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
            styleopts = nodes[pos];
            attributes = myxml.attributes(styleopts);
            for (attrname in attributes) {
              if (attributes.hasOwnProperty(attrname)) {
                if (attrname === "@punctuation-in-quote" || attrname === "@limit-day-ordinals-to-day-1") {
                  if (attributes[attrname] === "true") {
                    this.locale[lang_out].opts[attrname.slice(1)] = true;
                  } else {
                    this.locale[lang_out].opts[attrname.slice(1)] = false;
                  }
                } else if (attrname === "@jurisdiction-preference") {
                  var jurisdiction_preference = attributes[attrname].split(/\s+/);
                  this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;
                } else if (attrname === "@skip-words") {
                  var skip_words = attributes[attrname].split(/\s*,\s*/);
                  this.locale[lang_out].opts[attrname.slice(1)] = skip_words;
                } else if (attrname === "@leading-noise-words") {
                  var val = attributes[attrname].split(/\s*,\s*/);
                  this.locale[lang_out].opts["leading-noise-words"] = val;
                } else if (attrname === "@name-as-sort-order") {
                  this.locale[lang_out].opts["name-as-sort-order"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-as-sort-order"][lst[i]] = true;
                  }
                } else if (attrname === "@name-as-reverse-order") {
                  this.locale[lang_out].opts["name-as-reverse-order"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-as-reverse-order"][lst[i]] = true;
                  }
                } else if (attrname === "@name-never-short") {
                  this.locale[lang_out].opts["name-never-short"] = {};
                  var lst = attributes[attrname].split(/\s+/);
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                    this.locale[lang_out].opts["name-never-short"][lst[i]] = true;
                  }
                }
              }
            }
          }
        }
        nodes = myxml.getNodesByName(locale, "date");
        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
            var date2 = nodes[pos];
            this.locale[lang_out].dates[myxml.getAttributeValue(date2, "form")] = date2;
          }
        }
        CSL2.SET_COURT_CLASSES(this, lang_out, myxml, locale);
      };
      CSL2.getLocaleNames = function(myxml, preferredLocale) {
        var stylexml = CSL2.setupXml(myxml);
        function extendLocaleList(localeList, locale) {
          var forms = ["base", "best"];
          if (locale) {
            var normalizedLocale = CSL2.localeResolve(locale);
            for (var i2 = 0, ilen2 = forms.length; i2 < ilen2; i2++) {
              if (normalizedLocale[forms[i2]] && localeList.indexOf(normalizedLocale[forms[i2]]) === -1) {
                localeList.push(normalizedLocale[forms[i2]]);
              }
            }
          }
        }
        var localeIDs = ["en-US"];
        function sniffLocaleOnOneNodeName(nodeName) {
          var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);
          for (var i2 = 0, ilen2 = nodes.length; i2 < ilen2; i2++) {
            var nodeLocales = stylexml.getAttributeValue(nodes[i2], "locale");
            if (nodeLocales) {
              nodeLocales = nodeLocales.split(/ +/);
              for (var j = 0, jlen = nodeLocales.length; j < jlen; j++) {
                this.extendLocaleList(localeIDs, nodeLocales[j]);
              }
            }
          }
        }
        extendLocaleList(localeIDs, preferredLocale);
        var styleNode = stylexml.getNodesByName(stylexml.dataObj, "style")[0];
        var defaultLocale = stylexml.getAttributeValue(styleNode, "default-locale");
        extendLocaleList(localeIDs, defaultLocale);
        var nodeNames = ["layout", "if", "else-if", "condition"];
        for (var i = 0, ilen = nodeNames.length; i < ilen; i++) {
          sniffLocaleOnOneNodeName(stylexml, localeIDs, nodeNames[i]);
        }
        return localeIDs;
      };
      CSL2.Node = {};
      CSL2.Node.bibliography = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            state.build.area = "bibliography";
            state.build.root = "bibliography";
            state.build.extension = "";
            var func = function(state2) {
              state2.tmp.area = "bibliography";
              state2.tmp.root = "bibliography";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node.choose = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL2.START) {
            func = function(state2) {
              state2.tmp.jump.push(void 0, CSL2.LITERAL);
            };
          }
          if (this.tokentype === CSL2.END) {
            func = function(state2) {
              state2.tmp.jump.pop();
            };
          }
          this.execs.push(func);
          target.push(this);
        },
        configure: function(state, pos) {
          if (this.tokentype === CSL2.END) {
            state.configure.fail.push(pos);
            state.configure.succeed.push(pos);
          } else {
            state.configure.fail.pop();
            state.configure.succeed.pop();
          }
        }
      };
      CSL2.Node.citation = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            state.build.area = "citation";
            state.build.root = "citation";
            state.build.extension = "";
            var func = function(state2) {
              state2.tmp.area = "citation";
              state2.tmp.root = "citation";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            state.opt.grouped_sort = state.opt.xclass === "in-text" && (state.citation.opt.collapse && state.citation.opt.collapse.length) || state.citation.opt.cite_group_delimiter && state.citation.opt.cite_group_delimiter.length && state.opt.update_mode !== CSL2.POSITION && state.opt.update_mode !== CSL2.NUMERIC;
            if (state.opt.grouped_sort && state.citation_sort.opt.sort_directions.length) {
              var firstkey = state.citation_sort.opt.sort_directions[0].slice();
              state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);
            }
            state.citation.srt = new CSL2.Registry.Comparifier(state, "citation_sort");
          }
          target.push(this);
        }
      };
      CSL2.Node["#comment"] = {
        build: function() {
        }
      };
      CSL2.Node.date = {
        build: function(state, target) {
          var func, date_obj, len, pos, part, dpx, parts, mypos, start, end;
          if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
            state.dateput.string(state, state.dateput.queue);
            state.tmp.date_token = CSL2.Util.cloneToken(this);
            state.tmp.date_token.strings.prefix = "";
            state.tmp.date_token.strings.suffix = "";
            state.dateput.openLevel(this);
            state.build.date_parts = [];
            state.build.date_variables = this.variables;
            if (!state.build.extension) {
              CSL2.Util.substituteStart.call(this, state, target);
            }
            if (state.build.extension) {
              func = CSL2.dateMacroAsSortKey;
            } else {
              func = function(state2, Item, item) {
                var dp;
                state2.tmp.element_rendered_ok = false;
                state2.tmp.donesies = [];
                state2.tmp.dateparts = [];
                dp = [];
                if (this.variables.length && !(state2.tmp.just_looking && this.variables[0] === "accessed")) {
                  date_obj = Item[this.variables[0]];
                  if (typeof date_obj === "undefined") {
                    date_obj = { "date-parts": [[0]] };
                    if (state2.opt.development_extensions.locator_date_and_revision) {
                      if (item && this.variables[0] === "locator-date" && item["locator-date"]) {
                        date_obj = item["locator-date"];
                      }
                    }
                  }
                  state2.tmp.date_object = date_obj;
                  len = this.dateparts.length;
                  for (pos = 0; pos < len; pos += 1) {
                    part = this.dateparts[pos];
                    if (typeof state2.tmp.date_object[part + "_end"] !== "undefined") {
                      dp.push(part);
                    } else if (part === "month" && typeof state2.tmp.date_object.season_end !== "undefined") {
                      dp.push(part);
                    }
                  }
                  dpx = [];
                  parts = ["year", "month", "day"];
                  len = parts.length;
                  for (pos = 0; pos < len; pos += 1) {
                    if (dp.indexOf(parts[pos]) > -1) {
                      dpx.push(parts[pos]);
                    }
                  }
                  dp = dpx.slice();
                  mypos = 2;
                  len = dp.length;
                  for (pos = 0; pos < len; pos += 1) {
                    part = dp[pos];
                    start = state2.tmp.date_object[part];
                    end = state2.tmp.date_object[part + "_end"];
                    if (start !== end) {
                      mypos = pos;
                      break;
                    }
                  }
                  state2.tmp.date_collapse_at = dp.slice(mypos);
                } else {
                  state2.tmp.date_object = false;
                }
              };
            }
            this.execs.push(func);
            func = function(state2, Item) {
              if (!Item[this.variables[0]]) {
                return;
              }
              state2.output.startTag("date", this);
              if (this.variables[0] === "issued" && (Item.type === "legal_case" || Item.type === "legislation") && state2.opt.disable_duplicate_year_suppression.indexOf(Item.country) === -1 && !state2.tmp.extension && "" + Item["collection-number"] === "" + state2.tmp.date_object.year && this.dateparts.length === 1 && this.dateparts[0] === "year") {
                for (var key in state2.tmp.date_object) {
                  if (state2.tmp.date_object.hasOwnProperty(key)) {
                    if (key.slice(0, 4) === "year") {
                      state2.tmp.issued_date = {};
                      var lst = state2.output.current.mystack.slice(-2)[0].blobs;
                      state2.tmp.issued_date.list = lst;
                      state2.tmp.issued_date.pos = lst.length - 1;
                    }
                  }
                }
              }
            };
            this.execs.push(func);
          }
          if (!state.build.extension && (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON)) {
            func = function(state2, Item) {
              if (!Item[this.variables[0]]) {
                return;
              }
              state2.output.endTag();
            };
            this.execs.push(func);
          }
          target.push(this);
          if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
            if (!state.build.extension) {
              CSL2.Util.substituteEnd.call(this, state, target);
            }
          }
        }
      };
      CSL2.Node["date-part"] = {
        build: function(state, target) {
          var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number2, num, formatter, item;
          if (!this.strings.form) {
            this.strings.form = "long";
          }
          state.build.date_parts.push(this.strings.name);
          var date_variable = state.build.date_variables[0];
          function formatAndStrip(myform, gender, val) {
            if (!val) {
              return val;
            }
            val = "" + CSL2.Util.Dates[this.strings.name][myform](state, val, gender, this.default_locale);
            if (this.strings.name === "month") {
              if (state.tmp.strip_periods) {
                val = val.replace(/\./g, "");
              } else {
                for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                  if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                    val = val.replace(/\./g, "");
                    break;
                  }
                }
              }
            }
            return val;
          }
          func = function(state2, Item) {
            if (!state2.tmp.date_object) {
              return;
            } else {
              state2.tmp.probably_rendered_something = true;
            }
            var last_string_output = "";
            first_date = true;
            value = "";
            value_end = "";
            state2.tmp.donesies.push(this.strings.name);
            if (state2.tmp.date_object.literal && this.strings.name === "year") {
              last_string_output = state2.tmp.date_object.literal;
              state2.output.append(state2.tmp.date_object.literal, this);
            }
            if (state2.tmp.date_object) {
              value = state2.tmp.date_object[this.strings.name];
              value_end = state2.tmp.date_object[this.strings.name + "_end"];
            }
            if (this.strings.name === "year" && value === 0 && !state2.tmp.suppress_decorations) {
              value = false;
            }
            real = !state2.tmp.suppress_decorations;
            have_collapsed = state2.tmp.have_collapsed;
            invoked = state2[state2.tmp.area].opt.collapse === "year-suffix" || state2[state2.tmp.area].opt.collapse === "year-suffix-ranged";
            precondition = state2.opt["disambiguate-add-year-suffix"];
            if (real && precondition && invoked) {
              state2.tmp.years_used.push(value);
              known_year = state2.tmp.last_years_used.length >= state2.tmp.years_used.length;
              if (known_year && have_collapsed) {
                if (state2.tmp.last_years_used[state2.tmp.years_used.length - 1] === value) {
                  value = false;
                }
              }
            }
            if (typeof value !== "undefined") {
              bc = false;
              ad = false;
              bc_end = false;
              ad_end = false;
              if (this.strings.name === "year") {
                if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {
                  ad = state2.getTerm("ad");
                }
                if (parseInt(value, 10) < 0) {
                  bc = state2.getTerm("bc");
                  value = parseInt(value, 10) * -1;
                }
                if (value_end) {
                  if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {
                    ad_end = state2.getTerm("ad");
                  }
                  if (parseInt(value_end, 10) < 0) {
                    bc_end = state2.getTerm("bc");
                    value_end = parseInt(value_end, 10) * -1;
                  }
                }
              }
              var monthnameid = "" + state2.tmp.date_object.month;
              while (monthnameid.length < 2) {
                monthnameid = "0" + monthnameid;
              }
              monthnameid = "month-" + monthnameid;
              var gender = state2.locale[state2.opt.lang]["noun-genders"][monthnameid];
              if (this.strings.form) {
                var myform = this.strings.form;
                var myform_end = this.strings.form;
                if (this.strings.name === "day") {
                  if (myform === "ordinal" && state2.locale[state2.opt.lang].opts["limit-day-ordinals-to-day-1"]) {
                    if (value != 1) {
                      myform = "numeric";
                    }
                    if (value_end != 1) {
                      myform_end = "numeric";
                    }
                  }
                }
                value = formatAndStrip.call(this, myform, gender, value);
                value_end = formatAndStrip.call(this, myform_end, gender, value_end);
              }
              state2.output.openLevel("empty");
              if (state2.tmp.date_collapse_at.length) {
                ready = true;
                len = state2.tmp.date_collapse_at.length;
                for (pos = 0; pos < len; pos += 1) {
                  item = state2.tmp.date_collapse_at[pos];
                  if (state2.tmp.donesies.indexOf(item) === -1) {
                    ready = false;
                    break;
                  }
                }
                if (ready) {
                  if ("" + value_end !== "0") {
                    if (state2.dateput.queue.length === 0) {
                      first_date = true;
                    }
                    if (state2.opt["year-range-format"] && state2.opt["year-range-format"] !== "expanded" && !state2.tmp.date_object.day && !state2.tmp.date_object.month && !state2.tmp.date_object.season && this.strings.name === "year" && value && value_end) {
                      value_end = state2.fun.year_mangler(value + "-" + value_end, true);
                      var range_delimiter = state2.getTerm("year-range-delimiter");
                      value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);
                    }
                    last_string_output = value_end;
                    state2.dateput.append(value_end, this);
                    if (first_date) {
                      state2.dateput.current.value().blobs[0].strings.prefix = "";
                    }
                  }
                  last_string_output = value;
                  state2.output.append(value, this);
                  curr = state2.output.current.value();
                  curr.blobs[curr.blobs.length - 1].strings.suffix = "";
                  if (this.strings["range-delimiter"]) {
                    state2.output.append(this.strings["range-delimiter"]);
                  } else {
                    state2.output.append(state2.getTerm("year-range-delimiter"), "empty");
                  }
                  state2.dateput.closeLevel();
                  dcurr = state2.dateput.current.value();
                  curr.blobs = curr.blobs.concat(dcurr);
                  state2.dateput.string(state2, state2.dateput.queue);
                  state2.dateput.openLevel(state2.tmp.date_token);
                  state2.tmp.date_collapse_at = [];
                } else {
                  last_string_output = value;
                  state2.output.append(value, this);
                  if (state2.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {
                    if ("" + value_end !== "0") {
                      if (state2.dateput.queue.length === 0) {
                        first_date = true;
                      }
                      state2.dateput.openLevel("empty");
                      last_string_output = value_end;
                      state2.dateput.append(value_end, this);
                      if (first_date) {
                        state2.dateput.current.value().blobs[0].strings.prefix = "";
                      }
                      if (bc) {
                        last_string_output = bc;
                        state2.dateput.append(bc);
                      }
                      if (ad) {
                        last_string_output = ad;
                        state2.dateput.append(ad);
                      }
                      state2.dateput.closeLevel();
                    }
                  }
                }
              } else {
                last_string_output = value;
                state2.output.append(value, this);
              }
              if (bc) {
                last_string_output = bc;
                state2.output.append(bc);
              }
              if (ad) {
                last_string_output = ad;
                state2.output.append(ad);
              }
              state2.output.closeLevel();
            } else if (this.strings.name === "month") {
              if (state2.tmp.date_object.season) {
                value = "" + state2.tmp.date_object.season;
                if (value && value.match(/^[1-4]$/)) {
                  state2.tmp.group_context.tip.variable_success = true;
                  last_string_output = "winter";
                  state2.output.append(state2.getTerm("season-0" + value), this);
                } else if (value) {
                  last_string_output = value;
                  state2.output.append(value, this);
                }
              }
            }
            state2.tmp.value = [];
            if (Item[date_variable] && (value || state2.tmp.have_collapsed) && !state2.opt.has_year_suffix && this.strings.name === "year" && !state2.tmp.just_looking) {
              if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.has_done_year_suffix) {
                state2.tmp.has_done_year_suffix = true;
                last_string_output = "x";
                num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                number2 = new CSL2.NumericBlob(state2, false, num, this, Item.id);
                this.successor_prefix = state2[state2.build.area].opt.layout_delimiter;
                this.splice_prefix = state2[state2.build.area].opt.layout_delimiter;
                formatter = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
                number2.setFormatter(formatter);
                if (state2[state2.tmp.area].opt.collapse === "year-suffix-ranged") {
                  number2.range_prefix = state2.getTerm("citation-range-delimiter");
                }
                if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                  number2.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                } else if (state2[state2.tmp.area].opt["year-suffix-delimiter"]) {
                  number2.successor_prefix = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                } else {
                  number2.successor_prefix = state2[state2.tmp.area].opt.layout_delimiter;
                }
                number2.UGLY_DELIMITER_SUPPRESS_HACK = true;
                state2.output.append(number2, "literal");
              }
            }
            if (last_string_output && !state2.tmp.group_context.tip.condition) {
              state2.tmp.just_did_number = last_string_output.match(/[0-9]$/);
              if (state2.output.current.tip.strings.suffix) {
                state2.tmp.just_did_number = false;
              }
            }
          };
          this.execs.push(func);
          target.push(this);
        }
      };
      CSL2.Node["else-if"] = {
        build: function(state, target) {
          CSL2.Conditions.TopNode.call(this, state, target);
          target.push(this);
        },
        configure: function(state, pos) {
          CSL2.Conditions.Configure.call(this, state, pos);
        }
      };
      CSL2.Node["else"] = {
        build: function(state, target) {
          target.push(this);
        },
        configure: function(state, pos) {
          if (this.tokentype === CSL2.START) {
            state.configure.fail[state.configure.fail.length - 1] = pos;
          }
        }
      };
      CSL2.Node["et-al"] = {
        build: function(state, target) {
          if (state.build.area === "citation" || state.build.area === "bibliography") {
            var func = function(state2) {
              state2.tmp.etal_node = this;
              if (typeof this.strings.term === "string") {
                state2.tmp.etal_term = this.strings.term;
              }
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node.group = {
        build: function(state, target, realGroup) {
          var func, execs;
          this.realGroup = realGroup;
          if (this.tokentype === CSL2.START) {
            CSL2.Util.substituteStart.call(this, state, target);
            if (state.build.substitute_level.value()) {
              state.build.substitute_level.replace(state.build.substitute_level.value() + 1);
            }
            if (!this.juris) {
              target.push(this);
            }
            func = function(state2) {
              state2.output.startTag("group", this);
              if (this.strings.label_form_override) {
                if (!state2.tmp.group_context.tip.label_form) {
                  state2.tmp.group_context.tip.label_form = this.strings.label_form_override;
                }
              }
              if (this.strings.label_capitalize_if_first_override) {
                if (!state2.tmp.group_context.tip.label_capitalize_if_first) {
                  state2.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;
                }
              }
              if (this.realGroup) {
                if (state2.tmp.group_context.tip.condition) {
                  CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.prefix, null, this);
                }
                var condition = false;
                var force_suppress = false;
                if (state2.tmp.group_context.mystack.length) {
                  state2.output.current.value().parent = state2.tmp.group_context.tip.output_tip;
                }
                var label_form = state2.tmp.group_context.tip.label_form;
                if (!label_form) {
                  label_form = this.strings.label_form_override;
                }
                var label_capitalize_if_first = state2.tmp.group_context.tip.label_capitalize_if_first;
                if (!label_capitalize_if_first) {
                  label_capitalize_if_first = this.strings.label_capitalize_if_first;
                }
                if (state2.tmp.group_context.tip.condition) {
                  condition = state2.tmp.group_context.tip.condition;
                  force_suppress = state2.tmp.group_context.tip.force_suppress;
                } else if (this.strings.reject) {
                  condition = {
                    test: this.strings.reject,
                    not: true
                  };
                } else if (this.strings.require) {
                  condition = {
                    test: this.strings.require,
                    not: false
                  };
                }
                var context = {
                  old_term_predecessor: state2.tmp.term_predecessor,
                  term_intended: false,
                  variable_attempt: false,
                  variable_success: false,
                  variable_success_parent: state2.tmp.group_context.tip.variable_success,
                  output_tip: state2.output.current.tip,
                  label_form,
                  label_static: state2.tmp.group_context.tip.label_static,
                  label_capitalize_if_first,
                  parallel_delimiter_override: this.strings.set_parallel_delimiter_override,
                  parallel_delimiter_override_on_suppress: this.strings.set_parallel_delimiter_override_on_suppress,
                  condition,
                  force_suppress,
                  done_vars: state2.tmp.group_context.tip.done_vars.slice()
                };
                if (this.non_parallel) {
                  var non_parallel = state2.tmp.group_context.tip.non_parallel;
                  if (!non_parallel) {
                    non_parallel = {};
                  }
                  Object.assign(non_parallel, this.non_parallel);
                  context.non_parallel = non_parallel;
                }
                if (this.parallel_first) {
                  var parallel_first = state2.tmp.group_context.tip.parallel_first;
                  if (!parallel_first) {
                    parallel_first = {};
                  }
                  Object.assign(parallel_first, this.parallel_first);
                  context.parallel_first = parallel_first;
                }
                if (this.parallel_last) {
                  var parallel_last = state2.tmp.group_context.tip.parallel_last;
                  if (!parallel_last) {
                    parallel_last = {};
                  }
                  Object.assign(parallel_last, this.parallel_last);
                  context.parallel_last = parallel_last;
                }
                if (state2.tmp.abbrev_trimmer && state2.tmp.abbrev_trimmer.LAST_TO_FIRST && context.parallel_last) {
                  if (!context.parallel_first) {
                    context.parallel_first = {};
                  }
                  for (var varname in state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                    if (context.parallel_last[varname]) {
                      context.parallel_first[varname] = true;
                      delete context.parallel_last[varname];
                    }
                  }
                }
                state2.tmp.group_context.push(context);
                if (state2.tmp.abbrev_trimmer && this.parallel_last_to_first) {
                  if (!state2.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                    state2.tmp.abbrev_trimmer.LAST_TO_FIRST = {};
                  }
                  for (var varname in this.parallel_last_to_first) {
                    state2.tmp.abbrev_trimmer.LAST_TO_FIRST[varname] = true;
                  }
                }
              }
            };
            execs = [];
            execs.push(func);
            this.execs = execs.concat(this.execs);
            if (this.strings["has-publisher-and-publisher-place"]) {
              state.build["publisher-special"] = true;
              if (this.strings["subgroup-delimiter"]) {
                func = function(state2, Item) {
                  if (Item.publisher && Item["publisher-place"]) {
                    var publisher_lst = Item.publisher.split(/;\s*/);
                    var publisher_place_lst = Item["publisher-place"].split(/;\s*/);
                    if (publisher_lst.length > 1 && publisher_lst.length === publisher_place_lst.length) {
                      state2.publisherOutput = new CSL2.PublisherOutput(state2, this);
                      state2.publisherOutput["publisher-list"] = publisher_lst;
                      state2.publisherOutput["publisher-place-list"] = publisher_place_lst;
                    }
                  }
                };
                this.execs.push(func);
              }
            }
            if (this.juris) {
              var choose_start = new CSL2.Token("choose", CSL2.START);
              CSL2.Node.choose.build.call(choose_start, state, target);
              var if_start = new CSL2.Token("if", CSL2.START);
              func = function(macroName) {
                return function(Item, item) {
                  return CSL2.INIT_JURISDICTION_MACROS(state, Item, item, macroName);
                };
              }(this.juris);
              if_start.tests ? {} : if_start.tests = [];
              if_start.tests.push(func);
              if_start.test = state.fun.match.any(if_start, state, if_start.tests);
              target.push(if_start);
              var text_node = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2, Item, item) {
                var itemItem = Item;
                if (item && item["best-jurisdiction"] && this.juris === "juris-locator") {
                  itemItem = item;
                }
                var next = 0;
                if (state2.juris[itemItem["best-jurisdiction"]][this.juris]) {
                  while (next < state2.juris[itemItem["best-jurisdiction"]][this.juris].length) {
                    next = CSL2.tokenExec.call(state2, state2.juris[itemItem["best-jurisdiction"]][this.juris][next], Item, item);
                  }
                }
              };
              text_node.juris = this.juris;
              text_node.execs.push(func);
              target.push(text_node);
              var if_end = new CSL2.Token("if", CSL2.END);
              CSL2.Node["if"].build.call(if_end, state, target);
              var else_start = new CSL2.Token("else", CSL2.START);
              CSL2.Node["else"].build.call(else_start, state, target);
            }
          }
          if (this.tokentype === CSL2.END) {
            if (state.build["publisher-special"]) {
              state.build["publisher-special"] = false;
              func = function(state2) {
                if (state2.publisherOutput) {
                  state2.publisherOutput.render();
                  state2.publisherOutput = false;
                }
              };
              this.execs.push(func);
            }
            func = function(state2, Item, item) {
              if (!state2.tmp.group_context.tip.condition) {
                if (state2.output.current.tip.strings.suffix) {
                  state2.tmp.just_did_number = false;
                }
              }
              state2.output.endTag();
              if (this.realGroup) {
                var flags = state2.tmp.group_context.pop();
                if (flags.parallel_delimiter_override) {
                  state2.tmp.group_context.tip.parallel_delimiter_override = flags.parallel_delimiter_override;
                  if (!state2.tmp.just_looking && state2.registry.registry[Item.id].master) {
                    state2.registry.registry[Item.id].parallel_delimiter_override = flags.parallel_delimiter_override;
                  }
                }
                if (flags.parallel_delimiter_override_on_suppress) {
                  state2.tmp.group_context.tip.parallel_delimiter_override_on_suppress = flags.parallel_delimiter_override_on_suppress;
                }
                if (state2.tmp.area === "bibliography_sort") {
                  var citationNumberIdx = flags.done_vars.indexOf("citation-number");
                  if (this.strings.sort_direction && citationNumberIdx > -1 && state2.tmp.group_context.length() == 1) {
                    if (this.strings.sort_direction === CSL2.DESCENDING) {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.DESCENDING;
                    } else {
                      state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.ASCENDING;
                    }
                    flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1));
                  }
                }
                if (flags.condition) {
                  flags.force_suppress = CSL2.EVALUATE_GROUP_CONDITION(state2, flags);
                }
                if (state2.tmp.group_context.tip.condition) {
                  state2.tmp.group_context.tip.force_suppress = flags.force_suppress;
                }
                if (!flags.force_suppress && (flags.variable_success || flags.term_intended && !flags.variable_attempt)) {
                  if (!this.isJurisLocatorLabel) {
                    state2.tmp.group_context.tip.variable_success = true;
                  }
                  var blobs = state2.output.current.value().blobs;
                  var pos = state2.output.current.value().blobs.length - 1;
                  if (!state2.tmp.just_looking && (flags.non_parallel || flags.parallel_last || flags.parallel_first || flags.parallel_delimiter_override || flags.parallel_delimiter_override_on_suppress)) {
                    var hasRepeat = state2.parallel.checkRepeats(flags);
                    if (hasRepeat) {
                      if (blobs) {
                        blobs.pop();
                      }
                    }
                    if (state2.tmp.cite_index > 0 && (hasRepeat || !flags.parallel_first && !flags.parallel_last && !flags.non_parallel)) {
                      var info = state2.tmp.suppress_repeats[state2.tmp.cite_index - 1];
                      if (hasRepeat && flags.parallel_delimiter_override_on_suppress && (info.SIBLING || info.ORPHAN)) {
                        state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override_on_suppress;
                      } else if (flags.parallel_delimiter_override && info.SIBLING) {
                        state2.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override;
                      }
                    }
                  }
                } else {
                  state2.tmp.term_predecessor = flags.old_term_predecessor;
                  state2.tmp.group_context.tip.variable_attempt = flags.variable_attempt;
                  if (flags.force_suppress && !state2.tmp.group_context.tip.condition) {
                    state2.tmp.group_context.tip.variable_attempt = true;
                    state2.tmp.group_context.tip.variable_success = flags.variable_success_parent;
                  }
                  if (flags.force_suppress) {
                    for (var i = 0, ilen = flags.done_vars.length; i < ilen; i++) {
                      var doneVar = flags.done_vars[i];
                      for (var j = 0, jlen = state2.tmp.done_vars.length; j < jlen; j++) {
                        if (state2.tmp.done_vars[j] === doneVar) {
                          state2.tmp.done_vars = state2.tmp.done_vars.slice(0, j).concat(state2.tmp.done_vars.slice(j + 1));
                        }
                      }
                    }
                  }
                  if (state2.output.current.value().blobs) {
                    state2.output.current.value().blobs.pop();
                  }
                }
              }
            };
            this.execs.push(func);
            if (this.juris) {
              var else_end = new CSL2.Token("else", CSL2.END);
              CSL2.Node["else"].build.call(else_end, state, target);
              var choose_end = new CSL2.Token("choose", CSL2.END);
              CSL2.Node.choose.build.call(choose_end, state, target);
            }
          }
          if (this.tokentype === CSL2.END) {
            if (!this.juris) {
              target.push(this);
            }
            if (state.build.substitute_level.value()) {
              state.build.substitute_level.replace(state.build.substitute_level.value() - 1);
            }
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL2.Node["if"] = {
        build: function(state, target) {
          CSL2.Conditions.TopNode.call(this, state, target);
          target.push(this);
        },
        configure: function(state, pos) {
          CSL2.Conditions.Configure.call(this, state, pos);
        }
      };
      CSL2.Node["conditions"] = {
        build: function(state) {
          if (this.tokentype === CSL2.START) {
            state.tmp.conditions.addMatch(this.match);
          }
          if (this.tokentype === CSL2.END) {
            state.tmp.conditions.matchCombine();
          }
        }
      };
      CSL2.Node["condition"] = {
        build: function(state) {
          if (this.tokentype === CSL2.SINGLETON) {
            var test = state.fun.match[this.match](this, state, this.tests);
            state.tmp.conditions.addTest(test);
          }
        }
      };
      CSL2.Conditions = {};
      CSL2.Conditions.TopNode = function(state) {
        var func;
        if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
          if (this.locale) {
            state.opt.lang = this.locale;
          }
          if (!this.tests || !this.tests.length) {
            state.tmp.conditions = new CSL2.Conditions.Engine(state, this);
          } else {
            this.test = state.fun.match[this.match](this, state, this.tests);
          }
          if (state.build.substitute_level.value() === 0) {
            func = function(state2) {
              state2.tmp.condition_counter++;
            };
            this.execs.push(func);
          }
        }
        if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
          if (state.build.substitute_level.value() === 0) {
            func = function(state2) {
              state2.tmp.condition_counter--;
              if (state2.tmp.condition_lang_counter_arr.length > 0) {
                var counter = state2.tmp.condition_lang_counter_arr.slice(-1)[0];
                if (counter === state2.tmp.condition_counter) {
                  state2.opt.lang = state2.tmp.condition_lang_val_arr.pop();
                  state2.tmp.condition_lang_counter_arr.pop();
                }
              }
              if (this.locale_default) {
                state2.output.current.value().old_locale = this.locale_default;
                state2.output.closeLevel("empty");
                state2.opt.lang = this.locale_default;
              }
            };
            this.execs.push(func);
          }
          func = function(state2) {
            var next = this[state2.tmp.jump.value()];
            return next;
          };
          this.execs.push(func);
          if (this.locale_default) {
            state.opt.lang = this.locale_default;
          }
        }
      };
      CSL2.Conditions.Configure = function(state, pos) {
        if (this.tokentype === CSL2.START) {
          this.fail = state.configure.fail.slice(-1)[0];
          this.succeed = this.next;
          state.configure.fail[state.configure.fail.length - 1] = pos;
        } else if (this.tokentype === CSL2.SINGLETON) {
          this.fail = this.next;
          this.succeed = state.configure.succeed.slice(-1)[0];
          state.configure.fail[state.configure.fail.length - 1] = pos;
        } else {
          this.succeed = state.configure.succeed.slice(-1)[0];
          this.fail = this.next;
        }
      };
      CSL2.Conditions.Engine = function(state, token) {
        this.token = token;
        this.state = state;
      };
      CSL2.Conditions.Engine.prototype.addTest = function(test) {
        this.token.tests ? {} : this.token.tests = [];
        this.token.tests.push(test);
      };
      CSL2.Conditions.Engine.prototype.addMatch = function(match) {
        this.token.match = match;
      };
      CSL2.Conditions.Engine.prototype.matchCombine = function() {
        this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);
      };
      CSL2.Node.info = {
        build: function(state) {
          if (this.tokentype === CSL2.START) {
            state.build.skip = "info";
          } else {
            state.build.skip = false;
          }
        }
      };
      CSL2.Node.institution = {
        build: function(state, target) {
          if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
            var func = function(state2) {
              if (typeof this.strings.delimiter === "string") {
                state2.tmp.institution_delimiter = this.strings.delimiter;
              } else {
                state2.tmp.institution_delimiter = state2.tmp.name_delimiter;
              }
              if (state2.inheritOpt(this, "and") === "text") {
                this.and_term = state2.getTerm("and", "long", 0);
              } else if (state2.inheritOpt(this, "and") === "symbol") {
                if (state2.opt.development_extensions.expect_and_symbol_form) {
                  this.and_term = state2.getTerm("and", "symbol", 0);
                } else {
                  this.and_term = "&";
                }
              } else if (state2.inheritOpt(this, "and") === "none") {
                this.and_term = state2.tmp.institution_delimiter;
              }
              if (typeof this.and_term === "undefined" && state2.tmp.and_term) {
                this.and_term = state2.tmp.and_term;
              }
              if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                this.and_prefix_single = " ";
                this.and_prefix_multiple = ", ";
                if (typeof state2.tmp.institution_delimiter === "string") {
                  this.and_prefix_multiple = state2.tmp.institution_delimiter;
                }
                this.and_suffix = " ";
              } else {
                this.and_prefix_single = "";
                this.and_prefix_multiple = "";
                this.and_suffix = "";
              }
              if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
                this.and_prefix_single = state2.tmp.institution_delimiter;
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              }
              this.and = {};
              if (typeof this.and_term !== "undefined") {
                state2.output.append(this.and_term, "empty", true);
                this.and.single = state2.output.pop();
                this.and.single.strings.prefix = this.and_prefix_single;
                this.and.single.strings.suffix = this.and_suffix;
                state2.output.append(this.and_term, "empty", true);
                this.and.multiple = state2.output.pop();
                this.and.multiple.strings.prefix = this.and_prefix_multiple;
                this.and.multiple.strings.suffix = this.and_suffix;
              } else if (this.strings.delimiter !== "undefined") {
                this.and.single = new CSL2.Blob(state2.tmp.institution_delimiter);
                this.and.single.strings.prefix = "";
                this.and.single.strings.suffix = "";
                this.and.multiple = new CSL2.Blob(state2.tmp.institution_delimiter);
                this.and.multiple.strings.prefix = "";
                this.and.multiple.strings.suffix = "";
              }
              state2.nameOutput.institution = this;
            };
            this.execs.push(func);
          }
          target.push(this);
        },
        configure: function(state) {
          if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
            state.build.has_institution = true;
          }
        }
      };
      CSL2.Node["institution-part"] = {
        build: function(state, target) {
          var func;
          if (this.strings.name === "long") {
            if (this.strings["if-short"]) {
              func = function(state2) {
                state2.nameOutput.institutionpart["long-with-short"] = this;
              };
            } else {
              func = function(state2) {
                state2.nameOutput.institutionpart["long"] = this;
              };
            }
          } else if (this.strings.name === "short") {
            func = function(state2) {
              state2.nameOutput.institutionpart["short"] = this;
            };
          }
          this.execs.push(func);
          target.push(this);
        }
      };
      CSL2.Node.key = {
        build: function(state, target) {
          target = state[state.build.root + "_sort"].tokens;
          var func;
          var debug = false;
          var start_key = new CSL2.Token("key", CSL2.START);
          state.tmp.root = state.build.root;
          start_key.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
          start_key.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
          start_key.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
          func = function(state2) {
            state2.tmp.done_vars = [];
          };
          start_key.execs.push(func);
          func = function(state2) {
            state2.output.openLevel("empty");
          };
          start_key.execs.push(func);
          var sort_direction = [];
          if (this.strings.sort_direction === CSL2.DESCENDING) {
            sort_direction.push(1);
            sort_direction.push(-1);
          } else {
            sort_direction.push(-1);
            sort_direction.push(1);
          }
          state[state.build.area].opt.sort_directions.push(sort_direction);
          if (CSL2.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {
            state.build.date_key = true;
          }
          func = function(state2) {
            state2.tmp.sort_key_flag = true;
            if (state2.inheritOpt(this, "et-al-min")) {
              state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
            }
            if (state2.inheritOpt(this, "et-al-use-first")) {
              state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
            }
            if (typeof state2.inheritOpt(this, "et-al-use-last") === "boolean") {
              state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
            }
          };
          start_key.execs.push(func);
          target.push(start_key);
          if (this.variables.length) {
            var variable = this.variables[0];
            if (CSL2.NAME_VARIABLES.indexOf(variable) > -1) {
              var names_start_token = new CSL2.Token("names", CSL2.START);
              names_start_token.tokentype = CSL2.START;
              names_start_token.variables = this.variables;
              CSL2.Node.names.build.call(names_start_token, state, target);
              var name_token = new CSL2.Token("name", CSL2.SINGLETON);
              name_token.tokentype = CSL2.SINGLETON;
              name_token.strings["name-as-sort-order"] = "all";
              name_token.strings["sort-separator"] = " ";
              name_token.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
              name_token.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
              name_token.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
              CSL2.Node.name.build.call(name_token, state, target);
              var institution_token = new CSL2.Token("institution", CSL2.SINGLETON);
              institution_token.tokentype = CSL2.SINGLETON;
              CSL2.Node.institution.build.call(institution_token, state, target);
              var names_end_token = new CSL2.Token("names", CSL2.END);
              names_end_token.tokentype = CSL2.END;
              CSL2.Node.names.build.call(names_end_token, state, target);
            } else {
              var single_text = new CSL2.Token("text", CSL2.SINGLETON);
              single_text.strings.sort_direction = this.strings.sort_direction;
              single_text.dateparts = this.dateparts;
              if (CSL2.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                if (variable === "citation-number") {
                  func = function(state2, Item) {
                    if (state2.tmp.area === "bibliography_sort") {
                      if (this.strings.sort_direction === CSL2.DESCENDING) {
                        state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.DESCENDING;
                      } else {
                        state2.bibliography_sort.opt.citation_number_sort_direction = CSL2.ASCENDING;
                      }
                    }
                    if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                      var num = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                    } else {
                      var num = state2.registry.registry[Item.id].seq;
                    }
                    if (num) {
                      num = CSL2.Util.padding("" + num);
                    }
                    state2.output.append(num, this);
                  };
                } else {
                  func = function(state2, Item) {
                    var num = false;
                    num = Item[variable];
                    if (num) {
                      num = CSL2.Util.padding(num);
                    }
                    state2.output.append(num, this);
                  };
                }
              } else if (variable === "citation-label") {
                func = function(state2, Item) {
                  var trigraph = state2.getCitationLabel(Item);
                  state2.output.append(trigraph, this);
                };
              } else if (CSL2.DATE_VARIABLES.indexOf(variable) > -1) {
                func = CSL2.dateAsSortKey;
                single_text.variables = this.variables;
              } else if (variable === "title") {
                var abbrevfam = "title";
                var abbrfall = false;
                var altvar = false;
                var transfall = true;
                func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
              } else if (variable === "court-class") {
                func = function(state2, Item, item) {
                  CSL2.INIT_JURISDICTION_MACROS(state2, Item, item, "juris-main");
                  var cls = CSL2.GET_COURT_CLASS(state2, Item, true);
                  state2.output.append(cls, "empty");
                };
              } else {
                func = function(state2, Item) {
                  var varval = Item[variable];
                  state2.output.append(varval, "empty");
                };
              }
              single_text.execs.push(func);
              target.push(single_text);
            }
          } else {
            var token = new CSL2.Token("text", CSL2.SINGLETON);
            token.strings.sort_direction = this.strings.sort_direction;
            token.postponed_macro = this.postponed_macro;
            CSL2.expandMacro.call(state, token, target);
          }
          var end_key = new CSL2.Token("key", CSL2.END);
          func = function(state2) {
            var keystring = state2.output.string(state2, state2.output.queue);
            if (state2.sys.normalizeUnicode) {
              keystring = state2.sys.normalizeUnicode(keystring);
            }
            keystring = keystring ? keystring.split(" ").join(state2.opt.sort_sep) + state2.opt.sort_sep : "";
            if (debug) {
              CSL2.debug("keystring: " + keystring + " " + typeof keystring);
            }
            if (keystring === "") {
              keystring = void 0;
            }
            if (typeof keystring !== "string") {
              keystring = void 0;
            }
            state2[state2[state2.tmp.area].root + "_sort"].keys.push(keystring);
            state2.tmp.value = [];
          };
          end_key.execs.push(func);
          if (state.build.date_key) {
            if (state.build.area === "citation" && state.build.extension === "_sort") {
              state[state.build.area].opt.sort_directions.push([-1, 1]);
              func = function(state2, Item) {
                var year_suffix = state2.registry.registry[Item.id].disambig.year_suffix;
                if (!year_suffix) {
                  year_suffix = 0;
                }
                var key = CSL2.Util.padding("" + year_suffix);
                state2[state2.tmp.area].keys.push(key);
              };
              end_key.execs.push(func);
            }
            state.build.date_key = false;
          }
          func = function(state2) {
            state2.tmp["et-al-min"] = void 0;
            state2.tmp["et-al-use-first"] = void 0;
            state2.tmp["et-al-use-last"] = void 0;
            state2.tmp.sort_key_flag = false;
          };
          end_key.execs.push(func);
          target.push(end_key);
        }
      };
      CSL2.Node.label = {
        build: function(state, target) {
          if (this.strings.term) {
            var func = function(state2, Item, item) {
              var termtxt = CSL2.evaluateLabel(this, state2, Item, item);
              if (item && this.strings.term === "locator") {
                item.section_form_override = this.strings.form;
              }
              if (termtxt) {
                state2.tmp.group_context.tip.term_intended = true;
              }
              CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, termtxt, null, this);
              if (termtxt.indexOf("%s") === -1) {
                if (this.strings.capitalize_if_first) {
                  if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                    termtxt = CSL2.Output.Formatters["capitalize-first"](state2, termtxt);
                  }
                }
                state2.output.append(termtxt, this);
              }
            };
            this.execs.push(func);
          } else {
            if (!this.strings.form) {
              this.strings.form = "long";
            }
            var namevars = state.build.names_variables[state.build.names_variables.length - 1];
            var namelabels = state.build.name_label[state.build.name_label.length - 1];
            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
              if (!namelabels[namevars[i]]) {
                namelabels[namevars[i]] = {};
              }
            }
            if (!state.build.name_flag) {
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                namelabels[namevars[i]].before = this;
              }
            } else {
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                namelabels[namevars[i]].after = this;
              }
            }
          }
          target.push(this);
        }
      };
      CSL2.Node.layout = {
        build: function(state, target) {
          var func, prefix_token, suffix_token, tok;
          function setSuffix() {
            if (state.build.area === "bibliography") {
              suffix_token = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2) {
                if (!state2.tmp.parallel_and_not_last) {
                  var suffix;
                  if (state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale]) {
                    suffix = state2.tmp.cite_affixes[state2.tmp.area][state2.tmp.last_cite_locale].suffix;
                  } else {
                    suffix = state2.bibliography.opt.layout_suffix;
                  }
                  var topblob = state2.output.current.value();
                  if (state2.opt.using_display) {
                    topblob.blobs[topblob.blobs.length - 1].strings.suffix = suffix;
                  } else {
                    topblob.strings.suffix = suffix;
                  }
                }
                if (state2.bibliography.opt["second-field-align"]) {
                  state2.output.endTag("bib_other");
                }
              };
              suffix_token.execs.push(func);
              target.push(suffix_token);
            }
          }
          if (this.tokentype === CSL2.START) {
            if (this.locale_raw) {
              state.build.current_default_locale = this.locale_raw;
            } else {
              state.build.current_default_locale = state.opt["default-locale"];
            }
            func = function(state2, Item, item) {
              if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                var cite_entry = new CSL2.Token("group", CSL2.START);
                cite_entry.decorations = [["@cite", "entry"]];
                state2.output.startTag("cite_entry", cite_entry);
                state2.output.current.value().item_id = Item.system_id;
                if (item) {
                  state2.output.current.value().locator_txt = item.locator_txt;
                  state2.output.current.value().suffix_txt = item.suffix_txt;
                }
              }
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.START && !state.tmp.cite_affixes[state.build.area]) {
            func = function(state2, Item, item) {
              state2.tmp.done_vars = [];
              if (item && item["author-only"]) {
                state2.tmp.done_vars.push("locator");
              }
              if (state2.opt.suppressedJurisdictions[Item["country"]] && Item["country"] && ["treaty", "patent"].indexOf(Item.type) === -1) {
                state2.tmp.done_vars.push("country");
              }
              if (!state2.tmp.just_looking && state2.registry.registry[Item.id] && state2.registry.registry[Item.id].parallel) {
                state2.tmp.done_vars.push("first-reference-note-number");
              }
              if (!state2.tmp.just_looking && state2.tmp.abbrev_trimmer && Item.jurisdiction) {
                for (var field in state2.tmp.abbrev_trimmer.QUASHES[Item.jurisdiction]) {
                  state2.tmp.done_vars.push(field);
                }
              }
              state2.tmp.rendered_name = false;
            };
            this.execs.push(func);
            func = function(state2) {
              state2.tmp.sort_key_flag = false;
            };
            this.execs.push(func);
            func = function(state2) {
              state2.tmp.nameset_counter = 0;
            };
            this.execs.push(func);
            func = function(state2, Item) {
              var tok2 = new CSL2.Token();
              state2.output.openLevel(tok2);
            };
            this.execs.push(func);
            target.push(this);
            if (state.build.area === "citation") {
              prefix_token = new CSL2.Token("text", CSL2.SINGLETON);
              func = function(state2, Item, item) {
                if (item && item.prefix) {
                  var prefix = CSL2.checkPrefixSpaceAppend(state2, item.prefix);
                  if (!state2.tmp.just_looking) {
                    prefix = state2.output.checkNestedBrace.update(prefix);
                  }
                  var ignorePredecessor = CSL2.checkIgnorePredecessor(state2, prefix);
                  state2.output.append(prefix, this, false, ignorePredecessor);
                }
              };
              prefix_token.execs.push(func);
              target.push(prefix_token);
            }
          }
          var my_tok;
          if (this.locale_raw) {
            my_tok = new CSL2.Token("dummy", CSL2.START);
            my_tok.locale = this.locale_raw;
            my_tok.strings.delimiter = this.strings.delimiter;
            my_tok.strings.suffix = this.strings.suffix;
            if (!state.tmp.cite_affixes[state.build.area]) {
              state.tmp.cite_affixes[state.build.area] = {};
            }
          }
          if (this.tokentype === CSL2.START) {
            state.build.layout_flag = true;
            if (!this.locale_raw) {
              state[state.tmp.area].opt.topdecor = [this.decorations];
              state[state.tmp.area + "_sort"].opt.topdecor = [this.decorations];
              state[state.build.area].opt.layout_prefix = this.strings.prefix;
              state[state.build.area].opt.layout_suffix = this.strings.suffix;
              state[state.build.area].opt.layout_delimiter = this.strings.delimiter;
              state[state.build.area].opt.layout_decorations = this.decorations;
              if (state.tmp.cite_affixes[state.build.area]) {
                tok = new CSL2.Token("else", CSL2.START);
                CSL2.Node["else"].build.call(tok, state, target);
              }
            }
            if (this.locale_raw) {
              if (!state.build.layout_locale_flag) {
                var choose_tok = new CSL2.Token("choose", CSL2.START);
                CSL2.Node.choose.build.call(choose_tok, state, target);
                my_tok.name = "if";
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["if"].build.call(my_tok, state, target);
              } else {
                my_tok.name = "else-if";
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["else-if"].build.call(my_tok, state, target);
              }
              state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};
              state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;
              state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;
            }
          }
          if (this.tokentype === CSL2.END) {
            if (this.locale_raw) {
              setSuffix();
              if (!state.build.layout_locale_flag) {
                my_tok.name = "if";
                my_tok.tokentype = CSL2.END;
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["if"].build.call(my_tok, state, target);
                state.build.layout_locale_flag = true;
              } else {
                my_tok.name = "else-if";
                my_tok.tokentype = CSL2.END;
                CSL2.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                CSL2.Node["else-if"].build.call(my_tok, state, target);
              }
            }
            if (!this.locale_raw) {
              setSuffix();
              if (state.tmp.cite_affixes[state.build.area]) {
                if (state.build.layout_locale_flag) {
                  tok = new CSL2.Token("else", CSL2.END);
                  CSL2.Node["else"].build.call(tok, state, target);
                  tok = new CSL2.Token("choose", CSL2.END);
                  CSL2.Node.choose.build.call(tok, state, target);
                }
              }
              state.build_layout_locale_flag = true;
              if (state.build.area === "citation") {
                suffix_token = new CSL2.Token("text", CSL2.SINGLETON);
                func = function(state2, Item, item) {
                  var sp;
                  if (item && item.suffix) {
                    var suffix = CSL2.checkSuffixSpacePrepend(state2, item.suffix);
                    if (!state2.tmp.just_looking) {
                      suffix = state2.output.checkNestedBrace.update(suffix);
                    }
                    state2.output.append(suffix, this);
                  }
                };
                suffix_token.execs.push(func);
                target.push(suffix_token);
              }
              func = function(state2) {
                state2.output.closeLevel();
              };
              this.execs.push(func);
              func = function(state2, Item) {
                if (state2.opt.development_extensions.apply_citation_wrapper && state2.sys.wrapCitationEntry && !state2.tmp.just_looking && Item.system_id && state2.tmp.area === "citation") {
                  state2.output.endTag();
                }
              };
              this.execs.push(func);
              target.push(this);
              state.build.layout_flag = false;
              state.build.layout_locale_flag = false;
            }
          }
        }
      };
      CSL2.Node.macro = {
        build: function() {
        }
      };
      CSL2.Node.alternative = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            var choose_tok = new CSL2.Token("choose", CSL2.START);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
            var if_tok = new CSL2.Token("if", CSL2.START);
            CSL2.Attributes["@alternative-node-internal"].call(if_tok, state);
            CSL2.Node["if"].build.call(if_tok, state, target);
            var func = function(state2, Item) {
              state2.tmp.oldItem = Item;
              state2.tmp.oldLang = state2.opt.lang;
              state2.tmp.abort_alternative = true;
              if (Item["language-name"] && Item["language-name-original"]) {
                var newItem = JSON.parse(JSON.stringify(Item));
                newItem.language = newItem["language-name"];
                var langspec = CSL2.localeResolve(newItem.language, state2.opt["default-locale"][0]);
                if (state2.opt.multi_layout) {
                  for (var i in state2.opt.multi_layout) {
                    var locale_list = state2.opt.multi_layout[i];
                    var gotlang = false;
                    for (var j in locale_list) {
                      var tryspec = locale_list[j];
                      if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {
                        gotlang = locale_list[0].best;
                        break;
                      }
                    }
                    if (!gotlang) {
                      gotlang = state2.opt["default-locale"][0];
                    }
                    state2.opt.lang = gotlang;
                  }
                }
                for (var key in newItem) {
                  if (["id", "type", "language", "multi"].indexOf(key) === -1 && key.slice(0, 4) !== "alt-") {
                    if (newItem.multi && newItem.multi._keys[key]) {
                      var deleteme = true;
                      for (var lang in newItem.multi._keys[key]) {
                        if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, "$1")) {
                          deleteme = false;
                          break;
                        }
                      }
                      if (deleteme) {
                        delete newItem[key];
                      }
                    } else {
                      delete newItem[key];
                    }
                  }
                }
                for (var key in newItem) {
                  if (key.slice(0, 4) === "alt-") {
                    newItem[key.slice(4)] = newItem[key];
                    state2.tmp.abort_alternative = false;
                  } else {
                    if (newItem.multi && newItem.multi._keys) {
                      if (!newItem["alt-" + key] && newItem.multi._keys[key]) {
                        if (newItem.multi._keys[key][langspec.best]) {
                          newItem[key] = newItem.multi._keys[key][langspec.best];
                          state2.tmp.abort_alternative = false;
                        } else if (newItem.multi._keys[key][langspec.base]) {
                          newItem[key] = newItem.multi._keys[key][langspec.base];
                          state2.tmp.abort_alternative = false;
                        } else if (newItem.multi._keys[key][langspec.bare]) {
                          newItem[key] = newItem.multi._keys[key][langspec.bare];
                          state2.tmp.abort_alternative = false;
                        }
                      }
                    }
                  }
                }
              }
              state2.output.openLevel(this);
              state2.registry.refhash[Item.id] = newItem;
              state2.nameOutput = new CSL2.NameOutput(state2, newItem);
            };
            this.execs.push(func);
            target.push(this);
            var choose_tok = new CSL2.Token("choose", CSL2.START);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
            var if_tok = new CSL2.Token("if", CSL2.START);
            CSL2.Attributes["@alternative-node-internal"].call(if_tok, state);
            var func = function(state2) {
              state2.tmp.abort_alternative = true;
            };
            if_tok.execs.push(func);
            CSL2.Node["if"].build.call(if_tok, state, target);
          } else if (this.tokentype === CSL2.END) {
            var if_tok = new CSL2.Token("if", CSL2.END);
            CSL2.Node["if"].build.call(if_tok, state, target);
            var choose_tok = new CSL2.Token("choose", CSL2.END);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
            var func = function(state2, Item) {
              state2.output.closeLevel();
              state2.registry.refhash[Item.id] = state2.tmp.oldItem;
              state2.opt.lang = state2.tmp.oldLang;
              state2.nameOutput = new CSL2.NameOutput(state2, state2.tmp.oldItem);
              state2.tmp.abort_alternative = false;
            };
            this.execs.push(func);
            target.push(this);
            var if_tok = new CSL2.Token("if", CSL2.END);
            CSL2.Node["if"].build.call(if_tok, state, target);
            var choose_tok = new CSL2.Token("choose", CSL2.END);
            CSL2.Node["choose"].build.call(choose_tok, state, target);
          }
        }
      };
      CSL2.Node["alternative-text"] = {
        build: function(state, target) {
          if (this.tokentype === CSL2.SINGLETON) {
            var func = function(state2, Item) {
              var Item = state2.refetchItem(Item.id);
              CSL2.getCite.call(state2, Item);
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.NameOutput = function(state, Item, item) {
        this.debug = false;
        if (this.debug) {
          print("(1)");
        }
        this.state = state;
        this.Item = Item;
        this.item = item;
        this.nameset_base = 0;
        this.etal_spec = {};
        this._first_creator_variable = false;
        this._please_chop = false;
      };
      CSL2.NameOutput.prototype.init = function(names2) {
        this.requireMatch = names2.requireMatch;
        if (this.state.tmp.term_predecessor) {
          this.state.tmp.subsequent_author_substitute_ok = false;
        }
        if (this.nameset_offset) {
          this.nameset_base = this.nameset_base + this.nameset_offset;
        }
        this.nameset_offset = 0;
        this.names = names2;
        this.variables = names2.variables;
        this.state.tmp.value = [];
        this.state.tmp.rendered_name = [];
        this.state.tmp.label_blob = false;
        this.state.tmp.etal_node = false;
        this.state.tmp.etal_term = false;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
            this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
          }
        }
        this["et-al"] = void 0;
        this["with"] = void 0;
        this.name = void 0;
        this.institutionpart = {};
        this.state.tmp.group_context.tip.variable_attempt = true;
        this.labelVariable = this.variables[0];
        if (!this.state.tmp.value.length) {
          return;
        }
        var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
        if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
              this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
            }
          }
          this.state.tmp.common_term_match_fail = true;
          this.variables = [];
        }
      };
      CSL2.NameOutput.prototype.reinit = function(names2, labelVariable) {
        this.requireMatch = names2.requireMatch;
        this.labelVariable = labelVariable;
        if (this.state.tmp.can_substitute.value()) {
          this.nameset_offset = 0;
          this.variables = names2.variables;
          var oldval = this.state.tmp.value.slice();
          this.state.tmp.value = [];
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
              this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
            }
          }
          if (this.state.tmp.value.length) {
            this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
          }
          this.state.tmp.value = oldval;
        }
        var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
        if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
            if (idx > -1) {
              this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i + 1));
            }
          }
          this.variables = [];
        }
      };
      CSL2.NameOutput.prototype.outputNames = function() {
        var i, ilen;
        var variables = this.variables;
        if (this.institution.and) {
          if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {
            this.institution.and.single.blobs = this.name.and.single.blobs;
          }
          if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {
            this.institution.and.multiple.blobs = this.name.and.multiple.blobs;
          }
        }
        this.variable_offset = {};
        if (this.family) {
          this.family_decor = CSL2.Util.cloneToken(this.family);
          this.family_decor.strings.prefix = "";
          this.family_decor.strings.suffix = "";
          for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {
            this.family.execs[i].call(this.family_decor, this.state, this.Item);
          }
        } else {
          this.family_decor = false;
        }
        if (this.given) {
          this.given_decor = CSL2.Util.cloneToken(this.given);
          this.given_decor.strings.prefix = "";
          this.given_decor.strings.suffix = "";
          for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {
            this.given.execs[i].call(this.given_decor, this.state, this.Item);
          }
        } else {
          this.given_decor = false;
        }
        if (this.debug) {
          print("(2)");
        }
        this.getEtAlConfig();
        if (this.debug) {
          print("(3)");
        }
        this.divideAndTransliterateNames();
        if (this.debug) {
          print("(4)");
        }
        this.truncatePersonalNameLists();
        if (this.debug) {
          print("(5)");
        }
        if (this.debug) {
          print("(6)");
        }
        this.disambigNames();
        this.constrainNames();
        if (this.debug) {
          print("(7)");
        }
        if (this.name.strings.form === "count") {
          if (this.state.tmp.extension || this.names_count != 0) {
            this.state.output.append(this.names_count, "empty");
            this.state.tmp.group_context.tip.variable_success = true;
          }
          return;
        }
        if (this.debug) {
          print("(8)");
        }
        this.setEtAlParameters();
        if (this.debug) {
          print("(9)");
        }
        this.setCommonTerm(this.requireMatch);
        if (this.debug) {
          print("(10)");
        }
        this.renderAllNames();
        if (this.debug) {
          print("(11)");
        }
        var blob_list = [];
        for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          var institution_sets = [];
          var institutions = false;
          var varblob = null;
          if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
            varblob = this._join([this.freeters[v]], "");
          } else {
            if (this.debug) {
              print("(11a)");
            }
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));
            }
            if (this.debug) {
              print("(11b)");
            }
            if (this.institutions[v].length) {
              var pos = this.nameset_base + this.variable_offset[v];
              if (this.freeters[v].length) {
                pos += 1;
              }
              institutions = this.joinInstitutionSets(institution_sets, pos);
            }
            if (this.debug) {
              print("(11c)");
            }
            var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);
            if (this.debug) {
              print("(11d)");
            }
          }
          if (varblob) {
            if (!this.state.tmp.extension) {
              varblob = this._applyLabels(varblob, v);
            }
            blob_list.push(varblob);
          }
          if (this.debug) {
            print("(11e)");
          }
          if (this.common_term) {
            break;
          }
        }
        if (this.debug) {
          print("(12)");
        }
        this.state.output.openLevel("empty");
        this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, "delimiter", "names-delimiter");
        if (this.debug) {
          print("(13)");
        }
        for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {
          this.state.output.append(blob_list[i], "literal", true);
        }
        if (!this.state.tmp.just_looking && blob_list.length > 0) {
          this.state.tmp.probably_rendered_something = true;
        }
        if (this.debug) {
          print("(14)");
        }
        this.state.output.closeLevel("empty");
        if (this.debug) {
          print("(15)");
        }
        var blob = this.state.output.pop();
        this.state.tmp.name_node.top = blob;
        if (this.debug) {
          print("(16)");
        }
        var namesToken = CSL2.Util.cloneToken(this.names);
        if (this.state.tmp.group_context.tip.condition) {
          CSL2.UPDATE_GROUP_CONTEXT_CONDITION(this.state, this.names.strings.prefix, null, this.names);
        }
        this.state.output.append(blob, namesToken);
        if (this.state.tmp.term_predecessor_name) {
          this.state.tmp.term_predecessor = true;
        }
        if (this.debug) {
          print("(17)");
        }
        if (this.debug) {
          print("(18)");
        }
        if (variables[0] !== "authority") {
          var name_node_string = [];
          var nameobjs = this.Item[variables[0]];
          if (nameobjs) {
            for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {
              var substring = CSL2.Util.Names.getRawName(nameobjs[i]);
              if (substring) {
                name_node_string.push(substring);
              }
            }
          }
          name_node_string = name_node_string.join(", ");
          if (name_node_string) {
            this.state.tmp.name_node.string = name_node_string;
          }
        }
        if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {
          this.state.tmp.first_name_string = this.state.tmp.name_node.string;
        }
        if (this.Item.type === "classic") {
          if (this.state.tmp.first_name_string) {
            var author_title = [];
            author_title.push(this.state.tmp.first_name_string);
            if (this.Item.title) {
              author_title.push(this.Item.title);
            }
            author_title = author_title.join(", ");
            if (author_title && this.state.sys.getAbbreviation) {
              if (this.state.sys.normalizeAbbrevsKey) {
                author_title = this.state.sys.normalizeAbbrevsKey("classic", author_title);
              }
              this.state.transform.loadAbbreviation("default", "classic", author_title, this.Item.language);
              if (this.state.transform.abbrevs["default"].classic[author_title]) {
                this.state.tmp.done_vars.push("title");
                this.state.output.append(this.state.transform.abbrevs["default"].classic[author_title], "empty", true);
                blob = this.state.output.pop();
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.top.blobs.push(blob);
              }
            }
          }
        }
        this._collapseAuthor();
        this.variables = [];
        this.state.tmp.authority_stop_last = 0;
        if (this.debug) {
          print("(19)");
        }
      };
      CSL2.NameOutput.prototype._applyLabels = function(blob, v) {
        var txt;
        if (!this.label || !this.label[this.labelVariable]) {
          return blob;
        }
        var plural = 0;
        var num = this.freeters_count[v] + this.institutions_count[v];
        if (num > 1) {
          plural = 1;
        } else {
          for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
            num += this.persons_count[v][i];
          }
          if (num > 1) {
            plural = 1;
          }
        }
        if (this.label[this.labelVariable].before) {
          if (typeof this.label[this.labelVariable].before.strings.plural === "number") {
            plural = this.label[this.labelVariable].before.strings.plural;
          }
          txt = this._buildLabel(v, plural, "before", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(txt, this.label[this.labelVariable].before, true);
          this.state.output.append(blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
        } else if (this.label[this.labelVariable].after) {
          if (typeof this.label[this.labelVariable].after.strings.plural === "number") {
            plural = this.label[this.labelVariable].after.strings.plural;
          }
          txt = this._buildLabel(v, plural, "after", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(blob, "literal", true);
          this.state.output.append(txt, this.label[this.labelVariable].after, true);
          this.state.tmp.label_blob = this.state.output.pop();
          this.state.output.append(this.state.tmp.label_blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
        }
        return blob;
      };
      CSL2.NameOutput.prototype._buildLabel = function(term, plural, position, v) {
        if (this.common_term) {
          term = this.common_term;
        }
        var ret = false;
        var node = this.label[v][position];
        if (node) {
          ret = CSL2.castLabel(this.state, node, term, plural, CSL2.TOLERANT);
        }
        return ret;
      };
      CSL2.NameOutput.prototype._collapseAuthor = function() {
        var myqueue, mystr, oldchars;
        if (this.state.tmp.name_node.top.blobs.length === 0) {
          return;
        }
        if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {
          this._first_creator_variable = this.variables[0];
        }
        if (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter.length) {
          if (this.state.tmp.authorstring_request) {
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
              mystr = this.state.output.string(this.state, myqueue, false);
            }
            this.state.tmp.offset_characters = oldchars;
            this.state.registry.authorstrings[this.Item.id] = mystr;
          } else if (!this.state.tmp.just_looking && !this.state.tmp.suppress_decorations && (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {
            mystr = "";
            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
            oldchars = this.state.tmp.offset_characters;
            if (myqueue) {
              mystr = this.state.output.string(this.state, myqueue, false);
            }
            if (mystr === this.state.tmp.last_primary_names_string) {
              if (this.item["suppress-author"] || this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) {
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.children = [];
                this.state.tmp.offset_characters = oldchars;
              }
              if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                this.state.tmp.use_cite_group_delimiter = true;
              }
            } else {
              this.state.tmp.last_primary_names_string = mystr;
              if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item["suppress-author"] && this.Item.type !== "legal_case") {
                this.state.tmp.name_node.top.blobs.pop();
                this.state.tmp.name_node.children = [];
                this.state.tmp.offset_characters = oldchars;
                this.state.tmp.term_predecessor = false;
              }
              this.state.tmp.have_collapsed = false;
              if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                this.state.tmp.use_cite_group_delimiter = false;
              }
            }
          }
        }
      };
      CSL2.NameOutput.prototype.isPerson = function(value) {
        if (value.literal || !value.given && value.family && value.isInstitution) {
          return false;
        } else {
          return true;
        }
      };
      CSL2.NameOutput.prototype.truncatePersonalNameLists = function() {
        var v, i, ilen, j, jlen, chopvar, values;
        this.freeters_count = {};
        this.persons_count = {};
        this.institutions_count = {};
        for (v in this.freeters) {
          if (this.freeters.hasOwnProperty(v)) {
            this.freeters_count[v] = this.freeters[v].length;
            this.freeters[v] = this._truncateNameList(this.freeters, v);
          }
        }
        for (v in this.persons) {
          if (this.persons.hasOwnProperty(v)) {
            this.institutions_count[v] = this.institutions[v].length;
            this._truncateNameList(this.institutions, v);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.persons_count[v] = [];
            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              this.persons_count[v][j] = this.persons[v][j].length;
              this.persons[v][j] = this._truncateNameList(this.persons, v, j);
            }
          }
        }
        if (this.state.opt.development_extensions.etal_min_etal_usefirst_hack && this.etal_min === 1 && this.etal_use_first === 1 && !(this.state.tmp.extension || this.state.tmp.just_looking)) {
          chopvar = v;
        } else {
          chopvar = false;
        }
        if (chopvar || this._please_chop) {
          for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            v = this.variables[i];
            if (this.freeters[v].length) {
              if (this._please_chop === v) {
                this.freeters[v] = this.freeters[v].slice(1);
                this.freeters_count[v] += -1;
                this._please_chop = false;
              } else if (chopvar && !this._please_chop) {
                this.freeters[v] = this.freeters[v].slice(0, 1);
                this.freeters_count[v] = 1;
                this.institutions[v] = [];
                this.persons[v] = [];
                this._please_chop = chopvar;
              }
            }
            for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
              if (this.persons[v][j].length) {
                if (this._please_chop === v) {
                  this.persons[v][j] = this.persons[v][j].slice(1);
                  this.persons_count[v][j] += -1;
                  this._please_chop = false;
                  break;
                } else if (chopvar && !this._please_chop) {
                  this.freeters[v] = this.persons[v][j].slice(0, 1);
                  this.freeters_count[v] = 1;
                  this.institutions[v] = [];
                  this.persons[v] = [];
                  values = [];
                  this._please_chop = chopvar;
                  break;
                }
              }
            }
            if (this.institutions[v].length) {
              if (this._please_chop === v) {
                this.institutions[v] = this.institutions[v].slice(1);
                this.institutions_count[v] += -1;
                this._please_chop = false;
              } else if (chopvar && !this._please_chop) {
                this.institutions[v] = this.institutions[v].slice(0, 1);
                this.institutions_count[v] = 1;
                values = [];
                this._please_chop = chopvar;
              }
            }
          }
        }
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.institutions[v].length) {
            this.nameset_offset += 1;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j++) {
            if (this.persons[v][j].length) {
              this.nameset_offset += 1;
            }
          }
        }
      };
      CSL2.NameOutput.prototype._truncateNameList = function(container, variable, index) {
        var lst;
        if (typeof index === "undefined") {
          lst = container[variable];
        } else {
          lst = container[variable][index];
        }
        if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names && lst.length > 50 && lst.length > this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2) {
          var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;
          lst = lst.slice(0, limit + 1).concat(lst.slice(-1));
        }
        return lst;
      };
      CSL2.NameOutput.prototype.divideAndTransliterateNames = function() {
        var i, ilen, j, jlen;
        var Item = this.Item;
        var variables = this.variables;
        this.varnames = variables.slice();
        this.freeters = {};
        this.persons = {};
        this.institutions = {};
        for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          this.variable_offset[v] = this.nameset_offset;
          var values = this._normalizeVariableValue(Item, v);
          if (this.name.strings["suppress-min"] && values.length >= this.name.strings["suppress-min"]) {
            values = [];
          }
          if (this.name.strings["suppress-max"] && values.length <= this.name.strings["suppress-max"]) {
            values = [];
          }
          this._getFreeters(v, values);
          this._getPersonsAndInstitutions(v, values);
          if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
            if (this.name.strings["suppress-min"] === 0) {
              this.freeters[v] = [];
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                this.persons[v][j] = [];
              }
            } else if (this.institution.strings["suppress-min"] === 0) {
              this.institutions[v] = [];
              this.freeters[v] = this.freeters[v].concat(this.persons[v]);
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {
                  this.freeters[v].push(this.persons[v][j][k]);
                }
              }
              this.persons[v] = [];
            }
          }
        }
      };
      CSL2.NameOutput.prototype._normalizeVariableValue = function(Item, variable) {
        var names2;
        if (typeof Item[variable] === "string" || typeof Item[variable] === "number") {
          CSL2.debug('name variable "' + variable + '" is string or number, not array. Attempting to fix.');
          names2 = [{ literal: Item[variable] + "" }];
        } else if (!Item[variable]) {
          names2 = [];
        } else if (typeof Item[variable].length !== "number") {
          CSL2.debug('name variable "' + variable + '" is object, not array. Attempting to fix.');
          Item[variable] = [Item[variable]];
          names2 = Item[variable].slice();
        } else {
          names2 = Item[variable].slice();
        }
        return names2;
      };
      CSL2.NameOutput.prototype._getFreeters = function(v, values) {
        this.freeters[v] = [];
        if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
          for (var i = values.length - 1; i > -1; i--) {
            if (this.isPerson(values[i])) {
              var value = this._checkNickname(values.pop());
              if (value) {
                this.freeters[v].push(value);
              }
            } else {
              break;
            }
          }
        } else {
          for (var i = values.length - 1; i > -1; i--) {
            var value = values.pop();
            if (this.isPerson(value)) {
              var value = this._checkNickname(value);
            }
            this.freeters[v].push(value);
          }
        }
        this.freeters[v].reverse();
        if (this.freeters[v].length) {
          this.nameset_offset += 1;
        }
      };
      CSL2.NameOutput.prototype._getPersonsAndInstitutions = function(v, values) {
        this.persons[v] = [];
        this.institutions[v] = [];
        if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
          return;
        }
        var persons = [];
        var has_affiliates = false;
        var first = true;
        for (var i = values.length - 1; i > -1; i += -1) {
          if (this.isPerson(values[i])) {
            var value = this._checkNickname(values[i]);
            if (value) {
              persons.push(value);
            }
          } else {
            has_affiliates = true;
            this.institutions[v].push(values[i]);
            if (!first) {
              persons.reverse();
              this.persons[v].push(persons);
              persons = [];
            }
            first = false;
          }
        }
        if (has_affiliates) {
          persons.reverse();
          this.persons[v].push(persons);
          this.persons[v].reverse();
          this.institutions[v].reverse();
        }
      };
      CSL2.NameOutput.prototype._clearValues = function(values) {
        for (var i = values.length - 1; i > -1; i += -1) {
          values.pop();
        }
      };
      CSL2.NameOutput.prototype._checkNickname = function(name) {
        if (["interview", "personal_communication"].indexOf(this.Item.type) > -1) {
          var author2 = "";
          author2 = CSL2.Util.Names.getRawName(name);
          if (author2 && this.state.sys.getAbbreviation && !(this.item && this.item["suppress-author"])) {
            var normalizedKey = author2;
            if (this.state.sys.normalizeAbbrevsKey) {
              normalizedKey = this.state.sys.normalizeAbbrevsKey("author", author2);
            }
            this.state.transform.loadAbbreviation("default", "nickname", normalizedKey, this.Item.language);
            var myLocalName = this.state.transform.abbrevs["default"].nickname[normalizedKey];
            if (myLocalName) {
              if (myLocalName === "!here>>>") {
                name = false;
              } else {
                name = { family: myLocalName, given: "" };
              }
            }
          }
        }
        return name;
      };
      CSL2.NameOutput.prototype._purgeEmptyBlobs = function(blobs) {
        for (var i = blobs.length - 1; i > -1; i += -1) {
          if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {
            blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));
          }
        }
        return blobs;
      };
      CSL2.NameOutput.prototype.joinPersons = function(blobs, pos, j, tokenname) {
        var ret;
        blobs = this._purgeEmptyBlobs(blobs);
        if (!tokenname) {
          tokenname = "name";
        }
        if (typeof j === "undefined") {
          if (this.etal_spec[pos].freeters === 1) {
            ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].freeters === 2) {
            ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
          } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
        } else {
          if (this.etal_spec[pos].persons[j] === 1) {
            ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].persons[j] === 2) {
            ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
            ret = this._joinAnd(blobs);
          } else {
            ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
        }
        return ret;
      };
      CSL2.NameOutput.prototype.joinInstitutionSets = function(blobs, pos) {
        var ret;
        blobs = this._purgeEmptyBlobs(blobs);
        if (this.etal_spec[pos].institutions === 1) {
          ret = this._joinEtAl(blobs, "institution");
        } else if (this.etal_spec[pos].institutions === 2) {
          ret = this._joinEllipsis(blobs, "institution");
        } else {
          ret = this._joinAnd(blobs);
        }
        return ret;
      };
      CSL2.NameOutput.prototype.joinPersonsAndInstitutions = function(blobs) {
        blobs = this._purgeEmptyBlobs(blobs);
        var ret = this._join(blobs, this.state.tmp.name_delimiter);
        ret.isInstitution = true;
        return ret;
      };
      CSL2.NameOutput.prototype.joinFreetersAndInstitutionSets = function(blobs) {
        blobs = this._purgeEmptyBlobs(blobs);
        var ret = this._join(blobs, "[never here]", this["with"].single, this["with"].multiple);
        return ret;
      };
      CSL2.NameOutput.prototype._getAfterInvertedName = function(blobs, delimiter, finalJoin) {
        if (finalJoin && blobs.length > 1) {
          if (this.state.inheritOpt(this.name, "delimiter-precedes-last") === "after-inverted-name") {
            var prevBlob = blobs[blobs.length - 2];
            if (prevBlob.blobs.length > 0 && prevBlob.blobs[0].isInverted) {
              finalJoin.strings.prefix = delimiter;
            }
          }
        }
        return finalJoin;
      };
      CSL2.NameOutput.prototype._getAndJoin = function(blobs, delimiter) {
        var finalJoin = false;
        if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
            singleOrMultiple = "multiple";
          }
          if (blobs[blobs.length - 1].isInstitution) {
            finalJoin = this.institution.and[singleOrMultiple];
          } else {
            finalJoin = this.name.and[singleOrMultiple];
          }
          finalJoin = JSON.parse(JSON.stringify(finalJoin));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
        }
        return finalJoin;
      };
      CSL2.NameOutput.prototype._joinEtAl = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var blob = this._join(blobs, delimiter);
        this.state.output.openLevel(this._getToken("name"));
        this.state.output.current.value().strings.delimiter = "";
        this.state.output.append(blob, "literal", true);
        if (blobs.length > 1) {
          this.state.output.append(this["et-al"].multiple, "literal", true);
        } else if (blobs.length === 1) {
          this.state.output.append(this["et-al"].single, "literal", true);
        }
        this.state.output.closeLevel();
        return this.state.output.pop();
      };
      CSL2.NameOutput.prototype._joinEllipsis = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var finalJoin = false;
        if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
            singleOrMultiple = "multiple";
          }
          finalJoin = JSON.parse(JSON.stringify(this.name.ellipsis[singleOrMultiple]));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
        }
        return this._join(blobs, delimiter, finalJoin);
      };
      CSL2.NameOutput.prototype._joinAnd = function(blobs) {
        var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
        var finalJoin = this._getAndJoin(blobs, delimiter);
        return this._join(blobs, delimiter, finalJoin);
      };
      CSL2.NameOutput.prototype._join = function(blobs, delimiter, finalJoin) {
        var i, ilen;
        if (!blobs) {
          return false;
        }
        blobs = this._purgeEmptyBlobs(blobs);
        if (!blobs.length) {
          return false;
        }
        if (blobs.length > 1) {
          if (blobs.length === 2) {
            if (!finalJoin) {
              blobs[0].strings.suffix += delimiter;
            } else {
              blobs = [blobs[0], finalJoin, blobs[1]];
            }
          } else {
            var offset;
            if (finalJoin) {
              offset = 1;
            } else {
              offset = 0;
            }
            var blob = blobs.pop();
            for (var i = 0, ilen = blobs.length - offset; i < ilen; i++) {
              blobs[i].strings.suffix += delimiter;
            }
            blobs.push(finalJoin);
            blobs.push(blob);
          }
        }
        this.state.output.openLevel();
        for (i = 0, ilen = blobs.length; i < ilen; i += 1) {
          this.state.output.append(blobs[i], false, true);
        }
        this.state.output.closeLevel();
        return this.state.output.pop();
      };
      CSL2.NameOutput.prototype._getToken = function(tokenname) {
        var token = this[tokenname];
        if (tokenname === "institution") {
          var newtoken = new CSL2.Token();
          return newtoken;
        }
        return token;
      };
      CSL2.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {
        if (!requireMatch) {
          return false;
        }
        var common_term = false;
        if (this.variables.length === 2) {
          var variables = this.variables;
          var varnames = variables.slice();
          varnames.sort();
          common_term = varnames.join("");
        }
        if (!common_term) {
          return false;
        }
        var has_term = false;
        if (this.state.locale[this.state.opt.lang].terms[common_term]) {
          has_term = true;
        }
        if (!has_term) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
          return false;
        }
        var firstSet = this.Item[this.variables[0]];
        var secondSet = this.Item[this.variables[1]];
        var perfectMatch = this._compareNamesets(firstSet, secondSet);
        if (perfectMatch === true) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
        }
        return !perfectMatch;
      };
      CSL2.NameOutput.prototype.setCommonTerm = function() {
        var variables = this.variables;
        var varnames = variables.slice();
        varnames.sort();
        this.common_term = varnames.join("");
        if (!this.common_term) {
          return;
        }
        var has_term = false;
        if (this.label && this.label[this.variables[0]]) {
          if (this.label[this.variables[0]].before) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);
          } else if (this.label[this.variables[0]].after) {
            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);
          }
        }
        if (!this.state.locale[this.state.opt.lang].terms[this.common_term] || !has_term || this.variables.length < 2) {
          this.common_term = false;
          return;
        }
        var freeters_offset = 0;
        for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {
          var v = this.variables[i];
          var vv = this.variables[i + 1];
          if (this.freeters[v].length || this.freeters[vv].length) {
            if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {
              this.common_term = false;
              return;
            }
            freeters_offset += 1;
          }
          if (this.persons[v].length !== this.persons[vv].length) {
            this.common_term = false;
            return;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j] || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {
              this.common_term = false;
              return;
            }
          }
        }
      };
      CSL2.NameOutput.prototype._compareNamesets = function(base_nameset, nameset) {
        if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {
          return false;
        }
        for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {
          for (var j = 0, jlen = CSL2.NAME_PARTS.length; j < jlen; j += 1) {
            var part = CSL2.NAME_PARTS[j];
            if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {
              return false;
            }
          }
        }
        return true;
      };
      CSL2.NameOutput.prototype.constrainNames = function() {
        this.names_count = 0;
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this.state.tmp.names_max.push(this.freeters[v].length, "literal");
            this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);
            this.names_count += this.freeters[v].length;
          }
          if (this.institutions[v].length) {
            this.state.tmp.names_max.push(this.institutions[v].length, "literal");
            this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);
            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
            this.names_count += this.institutions[v].length;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
              this.state.tmp.names_max.push(this.persons[v][j].length, "literal");
              this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);
              this.names_count += this.persons[v][j].length;
            }
          }
        }
      };
      CSL2.NameOutput.prototype._imposeNameConstraints = function(lst, count, key, pos) {
        var display_names = lst[key];
        var discretionary_names_length = this.state.tmp["et-al-min"];
        if (this.state.tmp.suppress_decorations) {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {
            discretionary_names_length = this.state.tmp.disambig_request.names[pos];
          } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
          }
        } else {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {
            if (count[key] < this.etal_min) {
              discretionary_names_length = count[key];
            } else {
              discretionary_names_length = this.state.tmp.disambig_request.names[pos];
            }
          } else if (count[key] >= this.etal_min) {
            discretionary_names_length = this.etal_use_first;
          }
          if (this.etal_use_last && discretionary_names_length > this.etal_min - 2) {
            discretionary_names_length = this.etal_min - 2;
          }
        }
        var sane = this.etal_min >= this.etal_use_first;
        var overlength = count[key] > discretionary_names_length;
        if (discretionary_names_length > count[key]) {
          discretionary_names_length = display_names.length;
        }
        if (sane && overlength) {
          if (this.etal_use_last) {
            lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));
          } else {
            lst[key] = display_names.slice(0, discretionary_names_length);
          }
        }
        this.state.tmp.disambig_settings.names[pos] = lst[key].length;
        this.state.disambiguate.padBase(this.state.tmp.disambig_settings);
      };
      CSL2.NameOutput.prototype.disambigNames = function() {
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this._runDisambigNames(this.freeters[v], pos);
          }
          if (this.institutions[v].length) {
            if (typeof this.state.tmp.disambig_settings.givens[pos] === "undefined") {
              this.state.tmp.disambig_settings.givens[pos] = [];
            }
            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              if (typeof this.state.tmp.disambig_settings.givens[pos][j] === "undefined") {
                this.state.tmp.disambig_settings.givens[pos].push(2);
              }
            }
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (this.persons[v][j].length) {
              this._runDisambigNames(this.persons[v][j], pos);
            }
          }
        }
      };
      CSL2.NameOutput.prototype._runDisambigNames = function(lst, pos) {
        var chk, myform, myinitials, param, i, ilen, paramx;
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          if (!lst[i].given && !lst[i].family) {
            continue;
          }
          myinitials = this.state.inheritOpt(this.name, "initialize-with");
          this.state.registry.namereg.addname("" + this.Item.id, lst[i], i);
          chk = this.state.tmp.disambig_settings.givens[pos];
          if (typeof chk === "undefined") {
            for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {
              if (!this.state.tmp.disambig_settings.givens[j]) {
                this.state.tmp.disambig_settings.givens[j] = [];
              }
            }
          }
          chk = this.state.tmp.disambig_settings.givens[pos][i];
          if (typeof chk === "undefined") {
            myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
            param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
            this.state.tmp.disambig_settings.givens[pos].push(param);
          }
          myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
          paramx = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
          if (this.state.tmp.disambig_request) {
            var val = this.state.tmp.disambig_settings.givens[pos][i];
            if (val === 1 && this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && (typeof this.state.inheritOpt(this.name, "initialize-with") === "undefined" || typeof lst[i].given === "undefined")) {
              val = 2;
            }
            param = val;
            if (this.state.opt["disambiguate-add-givenname"] && lst[i].given) {
              param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, "form", "name-form", "long"), this.state.inheritOpt(this.name, "initialize-with"));
            }
          } else {
            param = paramx;
          }
          if (!this.state.tmp.just_looking && this.item && this.item.position === CSL2.POSITION_FIRST) {
            if (paramx > param) {
              param = paramx;
            }
          }
          if (!this.state.tmp.sort_key_flag) {
            this.state.tmp.disambig_settings.givens[pos][i] = param;
            if (typeof myinitials === "string" && (typeof this.name.strings["initialize"] === "undefined" || this.name.strings["initialize"] === true)) {
              this.state.tmp.disambig_settings.use_initials = true;
            }
          }
        }
      };
      CSL2.NameOutput.prototype.getEtAlConfig = function() {
        var item = this.item;
        this["et-al"] = {};
        this.state.output.append(this.etal_term, this.etal_style, true);
        this["et-al"].single = this.state.output.pop();
        this["et-al"].single.strings.suffix = this.etal_suffix;
        this["et-al"].single.strings.prefix = this.etal_prefix_single;
        this.state.output.append(this.etal_term, this.etal_style, true);
        this["et-al"].multiple = this.state.output.pop();
        this["et-al"].multiple.strings.suffix = this.etal_suffix;
        this["et-al"].multiple.strings.prefix = this.etal_prefix_multiple;
        if (typeof item === "undefined") {
          item = {};
        }
        if (item.position) {
          if (this.state.inheritOpt(this.name, "et-al-subsequent-min")) {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-subsequent-min");
          } else {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.inheritOpt(this.name, "et-al-subsequent-use-first")) {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-subsequent-use-first");
          } else {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
        } else {
          if (this.state.tmp["et-al-min"]) {
            this.etal_min = this.state.tmp["et-al-min"];
          } else {
            this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.tmp["et-al-use-first"]) {
            this.etal_use_first = this.state.tmp["et-al-use-first"];
          } else {
            this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
          if (typeof this.state.tmp["et-al-use-last"] === "boolean") {
            this.etal_use_last = this.state.tmp["et-al-use-last"];
          } else {
            this.etal_use_last = this.state.inheritOpt(this.name, "et-al-use-last");
          }
        }
        if (!this.state.tmp["et-al-min"]) {
          this.state.tmp["et-al-min"] = this.etal_min;
        }
      };
      CSL2.NameOutput.prototype.setEtAlParameters = function() {
        var i, ilen, j, jlen;
        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if (typeof this.etal_spec[v] === "undefined") {
            this.etal_spec[v] = { freeters: 0, institutions: 0, persons: [] };
          }
          this.etal_spec[this.nameset_base + i] = this.etal_spec[v];
          if (this.freeters[v].length) {
            this._setEtAlParameter("freeters", v);
          }
          for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
            if (typeof this.etal_spec[v][j] === "undefined") {
              this.etal_spec[v].persons[j] = 0;
            }
            this._setEtAlParameter("persons", v, j);
          }
          if (this.institutions[v].length) {
            this._setEtAlParameter("institutions", v);
          }
        }
      };
      CSL2.NameOutput.prototype._setEtAlParameter = function(type2, v, j) {
        var lst, count;
        if (type2 === "persons") {
          lst = this.persons[v][j];
          count = this.persons_count[v][j];
        } else {
          lst = this[type2][v];
          count = this[type2 + "_count"][v];
        }
        if (lst.length < count && !this.state.tmp.sort_key_flag) {
          if (this.etal_use_last) {
            if (type2 === "persons") {
              this.etal_spec[v].persons[j] = 2;
            } else {
              this.etal_spec[v][type2] = 2;
            }
          } else {
            if (type2 === "persons") {
              this.etal_spec[v].persons[j] = 1;
            } else {
              this.etal_spec[v][type2] = 1;
            }
          }
        } else {
          if (type2 === "persons") {
            this.etal_spec[v].persons[j] = 0;
          } else {
            this.etal_spec[v][type2] = 0;
          }
        }
      };
      CSL2.NameOutput.prototype.renderAllNames = function() {
        var pos;
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if (this.freeters[v].length || this.institutions[v].length) {
            if (!this.state.tmp.group_context.tip.condition) {
              this.state.tmp.just_did_number = false;
            }
          }
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
            this.freeters[v] = this._renderNames(v, this.freeters[v], pos);
          }
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);
          }
        }
        this.renderInstitutionNames();
      };
      CSL2.NameOutput.prototype.renderInstitutionNames = function() {
        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
            var institution2;
            var name = this.institutions[v][j];
            var j, jlen, localesets;
            if (this.state.tmp.extension) {
              localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
              localesets = this.state.opt["cite-lang-prefs"].institutions;
            } else {
              localesets = this.state.opt["cite-lang-prefs"].persons;
            }
            var slot = { primary: "locale-orig", secondary: false, tertiary: false };
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 < k) {
                  break;
                }
                if (localesets[k]) {
                  slot[slotnames[k]] = "locale-" + localesets[k];
                }
              }
            } else {
              slot.primary = "locale-translat";
            }
            if (this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            this.setRenderedName(name);
            var institution2 = this._renderInstitutionName(v, name, slot, j);
            this.institutions[v][j] = institution2;
          }
        }
      };
      CSL2.NameOutput.prototype._renderInstitutionName = function(v, name, slot, j) {
        var secondary, tertiary, long_style, short_style, institution2, institution_short, institution_long;
        var res = this.getName(name, slot.primary, true);
        var primary = res.name;
        var usedOrig = res.usedOrig;
        if (primary) {
          primary = this.fixupInstitution(primary, v, j);
        }
        secondary = false;
        if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, usedOrig);
          var secondary = res.name;
          usedOrig = res.usedOrig;
          if (secondary) {
            secondary = this.fixupInstitution(secondary, v, j);
          }
        }
        tertiary = false;
        if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, usedOrig);
          tertiary = res.name;
          if (tertiary) {
            tertiary = this.fixupInstitution(tertiary, v, j);
          }
        }
        var n = {
          l: {
            pri: false,
            sec: false,
            ter: false
          },
          s: {
            pri: false,
            sec: false,
            ter: false
          }
        };
        if (primary) {
          n.l.pri = primary["long"];
          n.s.pri = primary["short"].length ? primary["short"] : primary["long"];
        }
        if (secondary) {
          n.l.sec = secondary["long"];
          n.s.sec = secondary["short"].length ? secondary["short"] : secondary["long"];
        }
        if (tertiary) {
          n.l.ter = tertiary["long"];
          n.s.ter = tertiary["short"].length ? tertiary["short"] : tertiary["long"];
        }
        switch (this.institution.strings["institution-parts"]) {
          case "short":
            if (primary["short"].length) {
              short_style = this._getShortStyle();
              institution2 = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];
            } else {
              long_style = this._getLongStyle(primary, v, j);
              institution2 = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
            }
            break;
          case "short-long":
            long_style = this._getLongStyle(primary, v, j);
            short_style = this._getShortStyle();
            institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
            institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
            institution2 = [institution_short, institution_long];
            break;
          case "long-short":
            long_style = this._getLongStyle(primary, v, j);
            short_style = this._getShortStyle();
            institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
            institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
            institution2 = [institution_long, institution_short];
            break;
          default:
            long_style = this._getLongStyle(primary, v, j);
            institution2 = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
            break;
        }
        var blob = this._join(institution2, " ");
        if (blob) {
          blob.isInstitution = true;
        }
        this.state.tmp.name_node.children.push(blob);
        return blob;
      };
      CSL2.NameOutput.prototype._composeOneInstitutionPart = function(names2, slot, style) {
        var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;
        if (names2[0]) {
          primary_tok = CSL2.Util.cloneToken(style);
          if (this.state.opt.citeAffixes[slot.primary]) {
            if (this.state.opt.citeAffixes.institutions[slot.primary].prefix === "<i>") {
              var hasItalic = false;
              for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                if (style.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                  hasItalic = true;
                }
              }
              if (!hasItalic) {
                primary_tok.decorations.push(["@font-style", "italic"]);
              }
            }
          }
          primary = this._renderOneInstitutionPart(names2[0], primary_tok);
        }
        if (names2[1]) {
          secondary = this._renderOneInstitutionPart(names2[1], style);
        }
        if (names2[2]) {
          tertiary = this._renderOneInstitutionPart(names2[2], style);
        }
        var institutionblob;
        if (secondary || tertiary) {
          this.state.output.openLevel("empty");
          this.state.output.append(primary);
          secondary_tok = CSL2.Util.cloneToken(style);
          if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;
            if (!secondary_tok.strings.prefix) {
              secondary_tok.strings.prefix = " ";
            }
          }
          var secondary_outer = new CSL2.Token();
          secondary_outer.decorations.push(["@font-style", "normal"]);
          secondary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(secondary_outer);
          this.state.output.append(secondary, secondary_tok);
          this.state.output.closeLevel();
          tertiary_tok = CSL2.Util.cloneToken(style);
          if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;
            if (!tertiary_tok.strings.prefix) {
              tertiary_tok.strings.prefix = " ";
            }
          }
          var tertiary_outer = new CSL2.Token();
          tertiary_outer.decorations.push(["@font-style", "normal"]);
          tertiary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(tertiary_outer);
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
          this.state.output.closeLevel();
          institutionblob = this.state.output.pop();
        } else {
          institutionblob = primary;
        }
        return institutionblob;
      };
      CSL2.NameOutput.prototype._renderOneInstitutionPart = function(blobs, style) {
        for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          if (blobs[i]) {
            var str = blobs[i];
            if (this.state.tmp.strip_periods) {
              str = str.replace(/\./g, "");
            } else {
              for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {
                if (style.decorations[j][0] === "@strip-periods" && style.decorations[j][1] === "true") {
                  str = str.replace(/\./g, "");
                  break;
                }
              }
            }
            this.state.tmp.group_context.tip.variable_success = true;
            this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
            if (str === "!here>>>") {
              blobs[i] = false;
            } else {
              this.state.output.append(str, style, true);
              blobs[i] = this.state.output.pop();
            }
          }
        }
        if (typeof this.institution.strings["part-separator"] === "undefined") {
          this.institution.strings["part-separator"] = this.state.tmp.name_delimiter;
        }
        return this._join(blobs, this.institution.strings["part-separator"]);
      };
      CSL2.NameOutput.prototype._renderNames = function(v, values, pos, j) {
        var ret = false;
        if (values.length) {
          var names2 = [];
          for (var i = 0, ilen = values.length; i < ilen; i += 1) {
            var name = values[i];
            var ret, localesets;
            if (this.state.tmp.extension) {
              localesets = ["sort"];
            } else if (name.isInstitution || name.literal) {
              localesets = this.state.opt["cite-lang-prefs"].institutions;
            } else {
              localesets = this.state.opt["cite-lang-prefs"].persons;
            }
            var slot = { primary: "locale-orig", secondary: false, tertiary: false };
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 < k) {
                  break;
                }
                slot[slotnames[k]] = "locale-" + localesets[k];
              }
            } else {
              slot.primary = "locale-translat";
            }
            if (this.state.tmp.sort_key_flag || this.state.tmp.area !== "bibliography" && !(this.state.tmp.area === "citation" && this.state.opt.xclass === "note" && this.item && !this.item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            this.setRenderedName(name);
            if (!name.literal && !name.isInstitution) {
              var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);
              var nameToken = CSL2.Util.cloneToken(this.name);
              this.state.output.append(nameBlob, nameToken, true);
              names2.push(this.state.output.pop());
            } else {
              names2.push(this._renderInstitutionName(v, name, slot, j));
            }
          }
          ret = this.joinPersons(names2, pos, j);
        }
        return ret;
      };
      CSL2.NameOutput.prototype._renderPersonalName = function(v, name, slot, pos, i, j) {
        var res = this.getName(name, slot.primary, true);
        var primary = this._renderOnePersonalName(res.name, pos, i, j);
        var secondary = false;
        if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, res.usedOrig);
          if (res.name) {
            secondary = this._renderOnePersonalName(res.name, pos, i, j);
          }
        }
        var tertiary = false;
        if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, res.usedOrig);
          if (res.name) {
            tertiary = this._renderOnePersonalName(res.name, pos, i, j);
          }
        }
        var personblob;
        if (secondary || tertiary) {
          this.state.output.openLevel("empty");
          this.state.output.append(primary);
          var secondary_tok = new CSL2.Token();
          if (slot.secondary) {
            secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;
            secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;
            if (!secondary_tok.strings.prefix) {
              secondary_tok.strings.prefix = " ";
            }
          }
          this.state.output.append(secondary, secondary_tok);
          var tertiary_tok = new CSL2.Token();
          if (slot.tertiary) {
            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;
            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;
            if (!tertiary_tok.strings.prefix) {
              tertiary_tok.strings.prefix = " ";
            }
          }
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
          personblob = this.state.output.pop();
        } else {
          personblob = primary;
        }
        return personblob;
      };
      CSL2.NameOutput.prototype._isRomanesque = function(name) {
        var ret = 2;
        if (!name.family.replace(/\"/g, "").match(CSL2.ROMANESQUE_REGEXP)) {
          ret = 0;
        }
        if (!ret && name.given && name.given.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP)) {
          ret = 1;
        }
        var top_locale;
        if (ret == 2) {
          if (name.multi && name.multi.main) {
            top_locale = name.multi.main.slice(0, 2);
          } else if (this.Item.language) {
            top_locale = this.Item.language.slice(0, 2);
          }
          if (["ja", "zh"].indexOf(top_locale) > -1) {
            ret = 1;
          }
        }
        return ret;
      };
      CSL2.NameOutput.prototype._renderOnePersonalName = function(value, pos, i, j) {
        var name = value;
        var dropping_particle = this._droppingParticle(name, pos, j);
        var family = this._familyName(name);
        var non_dropping_particle = this._nonDroppingParticle(name);
        var givenInfo = this._givenName(name, pos, i);
        var given = givenInfo.blob;
        var suffix = this._nameSuffix(name);
        if (given === false) {
          dropping_particle = false;
          suffix = false;
        }
        var sort_sep = this.state.inheritOpt(this.name, "sort-separator");
        if (!sort_sep) {
          sort_sep = "";
        }
        var suffix_sep;
        if (name["comma-suffix"]) {
          suffix_sep = ", ";
        } else {
          suffix_sep = " ";
        }
        var romanesque = this._isRomanesque(name);
        function hasJoiningPunctuation(blob2) {
          if (!blob2) {
            return false;
          } else if (typeof blob2.blobs === "string") {
            if (["\u2019", "'", "-", " "].indexOf(blob2.blobs.slice(-1)) > -1) {
              return true;
            } else {
              return false;
            }
          } else {
            return hasJoiningPunctuation(blob2.blobs[blob2.blobs.length - 1]);
          }
        }
        var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);
        var nbspace;
        if (["fr", "ru", "cs"].indexOf(this.state.opt["default-locale"][0].slice(0, 2)) > -1) {
          nbspace = "\xA0";
        } else {
          nbspace = " ";
        }
        var blob, merged, first, second;
        if (romanesque === 0) {
          blob = this._join([non_dropping_particle, family, given], "");
        } else if (romanesque === 1 || name["static-ordering"]) {
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([merged, given], " ");
        } else if (name["reverse-ordering"]) {
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([given, merged], " ");
        } else if (this.state.tmp.sort_key_flag) {
          if (this.state.opt["demote-non-dropping-particle"] === "never") {
            merged = this._join([non_dropping_particle, family], nbspace);
            merged = this._join([merged, dropping_particle], " ");
            merged = this._join([merged, given], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
          } else {
            second = this._join([given, dropping_particle, non_dropping_particle], " ");
            merged = this._join([family, second], this.state.opt.sort_sep);
            blob = this._join([merged, suffix], " ");
          }
        } else if (this.state.inheritOpt(this.name, "name-as-sort-order") === "all" || this.state.inheritOpt(this.name, "name-as-sort-order") === "first" && i === 0 && (j === 0 || typeof j === "undefined")) {
          if (["Lord", "Lady"].indexOf(name.given) > -1) {
            sort_sep = ", ";
          }
          if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1) {
            second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
            second = this._join([second, non_dropping_particle], " ");
            if (second && this.given) {
              second.strings.prefix = this.given.strings.prefix;
              second.strings.suffix = this.given.strings.suffix;
            }
            if (family && this.family) {
              family.strings.prefix = this.family.strings.prefix;
              family.strings.suffix = this.family.strings.suffix;
            }
            merged = this._join([family, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
          } else {
            if (has_hyphenated_non_dropping_particle) {
              first = this._join([non_dropping_particle, family], "");
            } else {
              first = this._join([non_dropping_particle, family], nbspace);
            }
            if (first && this.family) {
              first.strings.prefix = this.family.strings.prefix;
              first.strings.suffix = this.family.strings.suffix;
            }
            second = this._join([given, dropping_particle], name["comma-dropping-particle"] + " ");
            if (second && this.given) {
              second.strings.prefix = this.given.strings.prefix;
              second.strings.suffix = this.given.strings.suffix;
            }
            merged = this._join([first, second], sort_sep);
            blob = this._join([merged, suffix], sort_sep);
          }
          blob.isInverted = true;
        } else {
          if (name["dropping-particle"] && name.family && !name["non-dropping-particle"]) {
            var dp = name["dropping-particle"];
            var apostrophes = ["'", "\u02BC", "\u2019", "-"];
            if (apostrophes.indexOf(dp.slice(-1)) > -1 && dp.slice(0, -1) !== "de") {
              family = this._join([dropping_particle, family], "");
              dropping_particle = false;
            }
          }
          if (has_hyphenated_non_dropping_particle) {
            second = this._join([non_dropping_particle, family], "");
            second = this._join([dropping_particle, second], nbspace);
          } else {
            second = this._join([dropping_particle, non_dropping_particle, family], nbspace);
          }
          second = this._join([second, suffix], suffix_sep);
          if (second && this.family) {
            second.strings.prefix = this.family.strings.prefix;
            second.strings.suffix = this.family.strings.suffix;
          }
          if (given && this.given) {
            given.strings.prefix = this.given.strings.prefix;
            given.strings.suffix = this.given.strings.suffix;
          }
          if (second.strings.prefix) {
            name["comma-dropping-particle"] = "";
          }
          var space;
          if (this.state.inheritOpt(this.name, "initialize-with") && this.state.inheritOpt(this.name, "initialize-with").match(/[\u00a0\ufeff]/) && givenInfo.initializationLevel === 1) {
            space = nbspace;
          } else {
            space = " ";
          }
          blob = this._join([given, second], name["comma-dropping-particle"] + space);
        }
        this.state.tmp.group_context.tip.variable_success = true;
        this.state.tmp.can_substitute.replace(false, CSL2.LITERAL);
        this.state.tmp.term_predecessor = true;
        this.state.tmp.name_node.children.push(blob);
        return blob;
      };
      CSL2.NameOutput.prototype._normalizeNameInput = function(value) {
        var name = {
          literal: value.literal,
          family: value.family,
          isInstitution: value.isInstitution,
          given: value.given,
          suffix: value.suffix,
          "comma-suffix": value["comma-suffix"],
          "non-dropping-particle": value["non-dropping-particle"],
          "dropping-particle": value["dropping-particle"],
          "static-ordering": value["static-ordering"],
          "static-particles": value["static-particles"],
          "reverse-ordering": value["reverse-ordering"],
          "full-form-always": value["full-form-always"],
          "parse-names": value["parse-names"],
          "comma-dropping-particle": "",
          block_initialize: value.block_initialize,
          multi: value.multi
        };
        this._parseName(name);
        return name;
      };
      CSL2.NameOutput.prototype._stripPeriods = function(tokname, str) {
        var decor_tok = this[tokname + "_decor"];
        if (str) {
          if (this.state.tmp.strip_periods) {
            str = str.replace(/\./g, "");
          } else if (decor_tok) {
            for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {
              if (decor_tok.decorations[i][0] === "@strip-periods" && decor_tok.decorations[i][1] === "true") {
                str = str.replace(/\./g, "");
                break;
              }
            }
          }
        }
        return str;
      };
      CSL2.NameOutput.prototype._nonDroppingParticle = function(name) {
        var ndp = name["non-dropping-particle"];
        if (ndp && this.state.tmp.sort_key_flag) {
          ndp = ndp.replace(/[\'\u2019]/, "");
        }
        var str = this._stripPeriods("family", ndp);
        if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL2.NameOutput.prototype._droppingParticle = function(name, pos, j) {
        var dp = name["dropping-particle"];
        if (dp && this.state.tmp.sort_key_flag) {
          dp = dp.replace(/[\'\u2019]/, "");
        }
        var str = this._stripPeriods("given", dp);
        if (name["dropping-particle"] && name["dropping-particle"].match(/^et.?al[^a-z]$/)) {
          if (this.state.inheritOpt(this.name, "et-al-use-last")) {
            if (typeof j === "undefined") {
              this.etal_spec[pos].freeters = 2;
            } else {
              this.etal_spec[pos].persons = 2;
            }
          } else {
            if (typeof j === "undefined") {
              this.etal_spec[pos].freeters = 1;
            } else {
              this.etal_spec[pos].persons = 1;
            }
          }
          name["comma-dropping-particle"] = "";
        } else if (this.state.output.append(str, this.given_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL2.NameOutput.prototype._familyName = function(name) {
        var str = this._stripPeriods("family", name.family);
        if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
        }
        return false;
      };
      CSL2.NameOutput.prototype._givenName = function(name, pos, i) {
        var ret;
        var formIsShort = this.state.inheritOpt(this.name, "form", "name-form", "long") !== "long";
        var initializeIsTurnedOn = this.state.inheritOpt(this.name, "initialize") !== false;
        var hasInitializeWith = typeof this.state.inheritOpt(this.name, "initialize-with") === "string" && !name.block_initialize;
        var defaultLevel;
        var useLevel;
        if (name["full-form-always"]) {
          useLevel = 2;
        } else {
          if (formIsShort) {
            defaultLevel = 0;
          } else if (hasInitializeWith) {
            defaultLevel = 1;
          } else {
            defaultLevel = 2;
          }
          var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];
          if (requestedLevel > defaultLevel) {
            useLevel = requestedLevel;
          } else {
            useLevel = defaultLevel;
          }
        }
        var gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
        if (gdropt && gdropt.slice(-14) === "-with-initials") {
          hasInitializeWith = true;
        }
        if (name.family && useLevel === 1) {
          if (hasInitializeWith) {
            var initialize_with = this.state.inheritOpt(this.name, "initialize-with", false, "");
            name.given = CSL2.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);
          } else {
            name.given = CSL2.Util.Names.unInitialize(this.state, name.given);
          }
        } else if (useLevel === 0) {
          return {
            blob: false
          };
        } else if (useLevel === 2) {
          name.given = CSL2.Util.Names.unInitialize(this.state, name.given);
        }
        var str = this._stripPeriods("given", name.given);
        var rendered = this.state.output.append(str, this.given_decor, true);
        if (rendered) {
          ret = this.state.output.pop();
          return {
            blob: ret,
            initializationLevel: useLevel
          };
        }
        return {
          blob: false
        };
      };
      CSL2.NameOutput.prototype._nameSuffix = function(name) {
        var str = name.suffix, ret;
        if (str && typeof this.state.inheritOpt(this.name, "initialize-with") === "string") {
          str = CSL2.Util.Names.initializeWith(this.state, str, this.state.inheritOpt(this.name, "initialize-with"), true);
        }
        str = this._stripPeriods("family", str);
        var toSuffix = "";
        if (str && str.slice(-1) === ".") {
          str = str.slice(0, -1);
          toSuffix = ".";
        }
        var rendered = this.state.output.append(str, "empty", true);
        if (rendered) {
          ret = this.state.output.pop();
          ret.strings.suffix = toSuffix + ret.strings.suffix;
          return ret;
        }
        return false;
      };
      CSL2.NameOutput.prototype._getLongStyle = function(name) {
        var long_style;
        if (name["short"].length) {
          if (this.institutionpart["long-with-short"]) {
            long_style = this.institutionpart["long-with-short"];
          } else {
            long_style = this.institutionpart["long"];
          }
        } else {
          long_style = this.institutionpart["long"];
        }
        if (!long_style) {
          long_style = new CSL2.Token();
        }
        return long_style;
      };
      CSL2.NameOutput.prototype._getShortStyle = function() {
        var short_style;
        if (this.institutionpart["short"]) {
          short_style = this.institutionpart["short"];
        } else {
          short_style = new CSL2.Token();
        }
        return short_style;
      };
      CSL2.NameOutput.prototype._parseName = function(name) {
        if (!name["parse-names"] && typeof name["parse-names"] !== "undefined") {
          return name;
        }
        if (name.family && !name.given && name.isInstitution) {
          name.literal = name.family;
          name.family = void 0;
          name.isInstitution = void 0;
        }
        var noparse;
        if (name.family && (name.family.slice(0, 1) === '"' && name.family.slice(-1) === '"') || !name["parse-names"] && typeof name["parse-names"] !== "undefined") {
          name.family = name.family.slice(1, -1);
          noparse = true;
          name["parse-names"] = 0;
        } else {
          noparse = false;
        }
        if (this.state.opt.development_extensions.parse_names) {
          if (!name["non-dropping-particle"] && name.family && !noparse && name.given) {
            if (!name["static-particles"]) {
              CSL2.parseParticles(name, true);
            }
          }
        }
      };
      CSL2.NameOutput.prototype.getName = function(name, slotLocaleset, fallback, stopOrig) {
        if (stopOrig && slotLocaleset === "locale-orig") {
          return { name: false, usedOrig: stopOrig };
        }
        if (!name.family) {
          name.family = "";
        }
        if (!name.given) {
          name.given = "";
        }
        var name_params = {};
        name_params["static-ordering"] = this.getStaticOrder(name);
        var foundTag = true;
        var langTag;
        if (slotLocaleset !== "locale-orig") {
          foundTag = false;
          if (name.multi) {
            var langTags = this.state.opt[slotLocaleset];
            for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {
              langTag = langTags[i];
              if (name.multi._key[langTag]) {
                foundTag = true;
                var isInstitution = name.isInstitution;
                name = name.multi._key[langTag];
                name.isInstitution = isInstitution;
                name_params = this.getNameParams(langTag);
                name_params.transliterated = true;
                break;
              }
            }
          }
        }
        if (!foundTag) {
          langTag = false;
          if (name.multi && name.multi.main) {
            langTag = name.multi.main;
          } else if (this.Item.language) {
            langTag = this.Item.language;
          }
          if (langTag) {
            name_params = this.getNameParams(langTag);
          }
        }
        if (!fallback && !foundTag) {
          return { name: false, usedOrig: stopOrig };
        }
        if (!name.family) {
          name.family = "";
        }
        if (!name.given) {
          name.given = "";
        }
        if (name.literal) {
          delete name.family;
          delete name.given;
        }
        name = {
          family: name.family,
          given: name.given,
          "non-dropping-particle": name["non-dropping-particle"],
          "dropping-particle": name["dropping-particle"],
          suffix: name.suffix,
          "static-ordering": name_params["static-ordering"],
          "static-particles": name["static-particles"],
          "reverse-ordering": name_params["reverse-ordering"],
          "full-form-always": name_params["full-form-always"],
          "parse-names": name["parse-names"],
          "comma-suffix": name["comma-suffix"],
          "comma-dropping-particle": name["comma-dropping-particle"],
          transliterated: name_params.transliterated,
          block_initialize: name_params["block-initialize"],
          literal: name.literal,
          isInstitution: name.isInstitution,
          multi: name.multi
        };
        if (!name.literal && (!name.given && name.family && name.isInstitution)) {
          name.literal = name.family;
        }
        if (name.literal) {
          delete name.family;
          delete name.given;
        }
        name = this._normalizeNameInput(name);
        var usedOrig;
        if (stopOrig) {
          usedOrig = stopOrig;
        } else {
          usedOrig = !foundTag;
        }
        return { name, usedOrig };
      };
      CSL2.NameOutput.prototype.getNameParams = function(langTag) {
        var ret = {};
        var langspec = CSL2.localeResolve(this.Item.language, this.state.opt["default-locale"][0]);
        var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt["default-locale"][0];
        var name_as_sort_order = this.state.locale[try_locale].opts["name-as-sort-order"];
        var name_as_reverse_order = this.state.locale[try_locale].opts["name-as-reverse-order"];
        var name_never_short = this.state.locale[try_locale].opts["name-never-short"];
        var field_lang_bare = langTag.split("-")[0];
        if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {
          ret["static-ordering"] = true;
          ret["reverse-ordering"] = false;
        }
        if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {
          ret["reverse-ordering"] = true;
          ret["static-ordering"] = false;
        }
        if (name_never_short && name_never_short[field_lang_bare]) {
          ret["full-form-always"] = true;
        }
        if (ret["static-ordering"]) {
          ret["block-initialize"] = true;
        }
        return ret;
      };
      CSL2.NameOutput.prototype.setRenderedName = function(name) {
        if (this.state.tmp.area === "bibliography") {
          var strname = "";
          for (var j = 0, jlen = CSL2.NAME_PARTS.length; j < jlen; j += 1) {
            if (name[CSL2.NAME_PARTS[j]]) {
              strname += name[CSL2.NAME_PARTS[j]];
            }
          }
          this.state.tmp.rendered_name.push(strname);
        }
      };
      CSL2.NameOutput.prototype.fixupInstitution = function(name, varname, listpos) {
        if (!name.literal && name.family) {
          name.literal = name.family;
          delete name.family;
        }
        var longNameStr = name.literal;
        var shortNameStr = longNameStr;
        var ret = {
          "long": longNameStr.split(/\s*\|\s*/),
          "short": shortNameStr.split(/\s*\|\s*/)
        };
        if (this.state.sys.getAbbreviation) {
          if (this.institution.strings.form === "short") {
            let jurisdiction2 = this.Item.jurisdiction;
            jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-entire", longNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction2]["institution-entire"][longNameStr]) {
              longNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-entire"][longNameStr];
            } else {
              jurisdiction2 = this.Item.jurisdiction;
              jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", longNameStr, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][longNameStr]) {
                longNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-part"][longNameStr];
              }
            }
            longNameStr = this._quashChecks(jurisdiction2, longNameStr);
          }
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            let jurisdiction2 = this.Item.jurisdiction;
            jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", shortNameStr, this.Item.language);
            if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][shortNameStr]) {
              shortNameStr = this.state.transform.abbrevs[jurisdiction2]["institution-part"][shortNameStr];
            }
            shortNameStr = this._quashChecks(jurisdiction2, shortNameStr);
            if (["short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
              if (shortNameStr === longNameStr) {
                shortNameStr = "";
              }
            }
          }
          ret["long"] = longNameStr.split(/\s*\|\s*/);
          ret["short"] = shortNameStr.split(/\s*\|\s*/);
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
            for (var j = ret["short"].length - 1; j > -1; j--) {
              let jurisdiction2 = this.Item.jurisdiction;
              var abbrevKey = ret["short"][j];
              jurisdiction2 = this.state.transform.loadAbbreviation(jurisdiction2, "institution-part", abbrevKey, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction2]["institution-part"][abbrevKey]) {
                ret["short"][j] = this.state.transform.abbrevs[jurisdiction2]["institution-part"][abbrevKey];
              }
              if (ret["short"][j].indexOf("|") > -1) {
                let retShort = ret["short"];
                let splitShort = retShort[j].split(/\s*\|\s*/);
                ret["short"] = retShort.slice(0, j).concat(splitShort).concat(retShort.slice(j + 1));
              }
            }
          }
          if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
            ret["short"].reverse();
          }
          ret["short"] = this._trimInstitution(ret["short"]);
          if (this.institution.strings["reverse-order"]) {
            ret["short"].reverse();
          }
          if (!this.state.tmp.just_looking) {
            if (this.Item.jurisdiction) {
              let jurisdiction2 = this.Item.jurisdiction;
              var trimmer = this.state.tmp.abbrev_trimmer;
              if (trimmer && trimmer[jurisdiction2] && trimmer[jurisdiction2][varname]) {
                for (var i = 0, ilen = ret["short"].length; i < ilen; i++) {
                  var frag = ret["short"][i];
                  ret["short"][i] = frag.replace(trimmer[jurisdiction2][varname], "").trim();
                }
              }
            }
          }
        }
        if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
          ret["long"].reverse();
        }
        ret["long"] = this._trimInstitution(ret["long"]);
        if (this.institution.strings["reverse-order"]) {
          ret["long"].reverse();
        }
        return ret;
      };
      CSL2.NameOutput.prototype.getStaticOrder = function(name, refresh) {
        var static_ordering_val = false;
        if (!refresh && name["static-ordering"]) {
          static_ordering_val = true;
        } else if (this._isRomanesque(name) === 0) {
          static_ordering_val = true;
        } else if ((!name.multi || !name.multi.main) && this.Item.language && ["vi", "hu"].indexOf(this.Item.language) > -1) {
          static_ordering_val = true;
        } else if (name.multi && name.multi.main && ["vi", "hu"].indexOf(name.multi.main.slice(0, 2)) > -1) {
          static_ordering_val = true;
        } else {
          if (this.state.opt["auto-vietnamese-names"] && (CSL2.VIETNAMESE_NAMES.exec(name.family + " " + name.given) && CSL2.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {
            static_ordering_val = true;
          }
        }
        return static_ordering_val;
      };
      CSL2.NameOutput.prototype._quashChecks = function(jurisdiction2, str) {
        var str = this.state.transform.quashCheck(jurisdiction2, str);
        var lst = str.split(/>>[0-9]{4}>>/);
        var m = str.match(/>>([0-9]{4})>>/);
        str = lst.pop();
        var date2 = this.Item["original-date"] ? this.Item["original-date"] : this.Item["issued"];
        if (date2) {
          date2 = parseInt(date2.year, 10);
          date2 = isNaN(date2) ? false : date2;
        }
        if (date2) {
          if (lst.length > 0) {
            for (var k = m.length - 1; k > 0; k--) {
              if (date2 >= parseInt(m[k], 10)) {
                break;
              }
              str = lst.pop();
            }
          }
          str = str.replace(/\s*\|\s*/g, "|");
        }
        return str;
      };
      CSL2.NameOutput.prototype._trimInstitution = function(subunits) {
        var use_first = false;
        var stop_last = false;
        var use_last = false;
        var stop_first = false;
        var s = subunits.slice();
        if (this.institution) {
          if (typeof this.institution.strings["use-first"] !== "undefined") {
            use_first = this.institution.strings["use-first"];
          }
          if (typeof this.institution.strings["use-last"] !== "undefined") {
            use_last = this.institution.strings["use-last"];
          }
          if (typeof this.institution.strings["stop-first"] !== "undefined") {
            stop_first = this.institution.strings["stop-first"];
          }
          if (typeof this.institution.strings["stop-last"] !== "undefined") {
            stop_last = this.institution.strings["stop-last"];
          }
          if (use_first) {
            if (stop_last) {
              s = s.slice(0, stop_last * -1);
            }
            s = s.slice(0, use_first);
          }
          if (use_last) {
            var ss = subunits.slice();
            if (use_first) {
              stop_first = use_first;
            } else {
              s = [];
            }
            if (stop_first) {
              ss = ss.slice(stop_first);
            }
            ss = ss.slice(use_last * -1);
            s = s.concat(ss);
          }
          subunits = s;
        }
        return subunits;
      };
      CSL2.PublisherOutput = function(state, group_tok) {
        this.state = state;
        this.group_tok = group_tok;
        this.varlist = [];
      };
      CSL2.PublisherOutput.prototype.render = function() {
        this.clearVars();
        this.composeAndBlob();
        this.composeElements();
        this.composePublishers();
        this.joinPublishers();
      };
      CSL2.PublisherOutput.prototype.composeAndBlob = function() {
        this.and_blob = {};
        var and_term = false;
        if (this.group_tok.strings.and === "text") {
          and_term = this.state.getTerm("and");
        } else if (this.group_tok.strings.and === "symbol") {
          and_term = "&";
        }
        var tok = new CSL2.Token();
        tok.strings.suffix = " ";
        tok.strings.prefix = " ";
        this.state.output.append(and_term, tok, true);
        var no_delim = this.state.output.pop();
        tok.strings.prefix = this.group_tok.strings["subgroup-delimiter"];
        this.state.output.append(and_term, tok, true);
        var with_delim = this.state.output.pop();
        this.and_blob.single = false;
        this.and_blob.multiple = false;
        if (and_term) {
          if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "always") {
            this.and_blob.single = with_delim;
          } else if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "never") {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = no_delim;
          } else {
            this.and_blob.single = no_delim;
            this.and_blob.multiple = with_delim;
          }
        }
      };
      CSL2.PublisherOutput.prototype.composeElements = function() {
        for (var i = 0, ilen = 2; i < ilen; i += 1) {
          var varname = ["publisher", "publisher-place"][i];
          for (var j = 0, jlen = this["publisher-list"].length; j < jlen; j += 1) {
            var str = this[varname + "-list"][j];
            var tok = this[varname + "-token"];
            this.state.output.append(str, tok, true);
            this[varname + "-list"][j] = this.state.output.pop();
          }
        }
      };
      CSL2.PublisherOutput.prototype.composePublishers = function() {
        var blobs;
        for (var i = 0, ilen = this["publisher-list"].length; i < ilen; i += 1) {
          blobs = [this[this.varlist[0] + "-list"][i], this[this.varlist[1] + "-list"][i]];
          this["publisher-list"][i] = this._join(blobs, this.group_tok.strings.delimiter);
        }
      };
      CSL2.PublisherOutput.prototype.joinPublishers = function() {
        var blobs = this["publisher-list"];
        var publishers = this._join(blobs, this.group_tok.strings["subgroup-delimiter"], this.and_blob.single, this.and_blob.multiple, this.group_tok);
        this.state.output.append(publishers, "literal");
      };
      CSL2.PublisherOutput.prototype._join = CSL2.NameOutput.prototype._join;
      CSL2.PublisherOutput.prototype._getToken = CSL2.NameOutput.prototype._getToken;
      CSL2.PublisherOutput.prototype.clearVars = function() {
        this.state.tmp["publisher-list"] = false;
        this.state.tmp["publisher-place-list"] = false;
        this.state.tmp["publisher-group-token"] = false;
        this.state.tmp["publisher-token"] = false;
        this.state.tmp["publisher-place-token"] = false;
      };
      CSL2.evaluateLabel = function(node, state, Item, item) {
        var myterm;
        if (node.strings.term === "locator") {
          if (item && item.label) {
            if (item.label === "sub verbo") {
              myterm = "sub-verbo";
            } else {
              myterm = item.label;
            }
          }
          if (!myterm) {
            myterm = "page";
          }
        } else {
          myterm = node.strings.term;
        }
        var plural = node.strings.plural;
        if (typeof plural !== "number") {
          var theItem = item && node.strings.term === "locator" ? item : Item;
          if (theItem[node.strings.term]) {
            state.processNumber(false, theItem, node.strings.term, Item.type);
            plural = state.tmp.shadow_numbers[node.strings.term].plural;
            if (!state.tmp.shadow_numbers[node.strings.term].labelForm && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {
              if (node.strings.form) {
                state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;
              } else if (state.tmp.group_context.tip.label_form) {
                state.tmp.shadow_numbers[node.strings.term].labelForm = state.tmp.group_context.tip.label_form;
              }
              state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;
              state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();
            }
            if (["locator", "number", "page"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {
              myterm = state.tmp.shadow_numbers[node.strings.term].label;
            }
            if (node.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
              node.decorations.reverse();
              node.decorations.push(["@showid", "true", node.cslid]);
              node.decorations.reverse();
            }
          }
        }
        return CSL2.castLabel(state, node, myterm, plural, CSL2.TOLERANT);
      };
      CSL2.castLabel = function(state, node, term, plural, mode) {
        var label_form = node.strings.form;
        var label_capitalize_if_first = node.strings.capitalize_if_first;
        if (state.tmp.group_context.tip.label_form) {
          if (label_form === "static") {
            state.tmp.group_context.tip.label_static = true;
          } else {
            label_form = state.tmp.group_context.tip.label_form;
          }
        }
        if (state.tmp.group_context.tip.label_capitalize_if_first) {
          label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
        }
        var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);
        if (label_capitalize_if_first) {
          ret = CSL2.Output.Formatters["capitalize-first"](state, ret);
        }
        if (state.tmp.strip_periods) {
          ret = ret.replace(/\./g, "");
        } else {
          for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {
            if (node.decorations[i][0] === "@strip-periods" && node.decorations[i][1] === "true") {
              ret = ret.replace(/\./g, "");
              break;
            }
          }
        }
        return ret;
      };
      CSL2.Node.name = {
        build: function(state, target) {
          var func;
          if ([CSL2.SINGLETON, CSL2.START].indexOf(this.tokentype) > -1) {
            var oldTmpRoot;
            if (typeof state.tmp.root === "undefined") {
              oldTmpRoot = void 0;
              state.tmp.root = "citation";
            } else {
              oldTmpRoot = state.tmp.root;
            }
            if (state.inheritOpt(this, "et-al-subsequent-min") && state.inheritOpt(this, "et-al-subsequent-min") !== state.inheritOpt(this, "et-al-min")) {
              state.opt.update_mode = CSL2.POSITION;
            }
            if (state.inheritOpt(this, "et-al-subsequent-use-first") && state.inheritOpt(this, "et-al-subsequent-use-first") !== state.inheritOpt(this, "et-al-use-first")) {
              state.opt.update_mode = CSL2.POSITION;
            }
            state.tmp.root = oldTmpRoot;
            func = function(state2) {
              state2.tmp.etal_term = "et-al";
              state2.tmp.name_delimiter = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
              state2.tmp["delimiter-precedes-et-al"] = state2.inheritOpt(this, "delimiter-precedes-et-al");
              if (state2.inheritOpt(this, "and") === "text") {
                this.and_term = state2.getTerm("and", "long", 0);
              } else if (state2.inheritOpt(this, "and") === "symbol") {
                if (state2.opt.development_extensions.expect_and_symbol_form) {
                  this.and_term = state2.getTerm("and", "symbol", 0);
                } else {
                  this.and_term = "&";
                }
              }
              state2.tmp.and_term = this.and_term;
              if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                this.and_prefix_single = " ";
                this.and_prefix_multiple = ", ";
                if (typeof state2.tmp.name_delimiter === "string") {
                  this.and_prefix_multiple = state2.tmp.name_delimiter;
                }
                this.and_suffix = " ";
              } else {
                this.and_prefix_single = "";
                this.and_prefix_multiple = "";
                this.and_suffix = "";
              }
              if (state2.inheritOpt(this, "delimiter-precedes-last") === "always") {
                this.and_prefix_single = state2.tmp.name_delimiter;
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "never") {
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              } else if (state2.inheritOpt(this, "delimiter-precedes-last") === "after-inverted-name") {
                if (this.and_prefix_single) {
                  this.and_prefix_single = state2.tmp.name_delimiter;
                }
                if (this.and_prefix_multiple) {
                  this.and_prefix_multiple = " ";
                }
              }
              this.and = {};
              if (state2.inheritOpt(this, "and")) {
                state2.output.append(this.and_term, "empty", true);
                this.and.single = state2.output.pop();
                this.and.single.strings.prefix = this.and_prefix_single;
                this.and.single.strings.suffix = this.and_suffix;
                state2.output.append(this.and_term, "empty", true);
                this.and.multiple = state2.output.pop();
                this.and.multiple.strings.prefix = this.and_prefix_multiple;
                this.and.multiple.strings.suffix = this.and_suffix;
              } else if (state2.tmp.name_delimiter) {
                this.and.single = new CSL2.Blob(state2.tmp.name_delimiter);
                this.and.single.strings.prefix = "";
                this.and.single.strings.suffix = "";
                this.and.multiple = new CSL2.Blob(state2.tmp.name_delimiter);
                this.and.multiple.strings.prefix = "";
                this.and.multiple.strings.suffix = "";
              }
              this.ellipsis = {};
              if (state2.inheritOpt(this, "et-al-use-last")) {
                this.ellipsis_term = "\u2026";
                this.ellipsis_prefix_single = " ";
                this.ellipsis_prefix_multiple = state2.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                this.ellipsis_suffix = " ";
                this.ellipsis.single = new CSL2.Blob(this.ellipsis_term);
                this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;
                this.ellipsis.single.strings.suffix = this.ellipsis_suffix;
                this.ellipsis.multiple = new CSL2.Blob(this.ellipsis_term);
                this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;
                this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;
              }
              if (typeof state2.tmp["et-al-min"] === "undefined") {
                state2.tmp["et-al-min"] = state2.inheritOpt(this, "et-al-min");
              }
              if (typeof state2.tmp["et-al-use-first"] === "undefined") {
                state2.tmp["et-al-use-first"] = state2.inheritOpt(this, "et-al-use-first");
              }
              if (typeof state2.tmp["et-al-use-last"] === "undefined") {
                state2.tmp["et-al-use-last"] = state2.inheritOpt(this, "et-al-use-last");
              }
              state2.nameOutput.name = this;
            };
            state.build.name_flag = true;
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node["name-part"] = {
        build: function(state) {
          state.build[this.strings.name] = this;
        }
      };
      CSL2.Node.names = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL2.START || this.tokentype === CSL2.SINGLETON) {
            CSL2.Util.substituteStart.call(this, state, target);
            state.build.substitute_level.push(1);
          }
          if (this.tokentype === CSL2.SINGLETON) {
            state.build.names_variables[state.build.names_variables.length - 1].concat(this.variables);
            for (var i in this.variables) {
              var variable = this.variables[i];
              var name_labels = state.build.name_label[state.build.name_label.length - 1];
              if (Object.keys(name_labels).length) {
                name_labels[variable] = name_labels[Object.keys(name_labels)[0]];
              }
            }
            func = function(state2) {
              state2.nameOutput.reinit(this, this.variables_real[0]);
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.START) {
            state.build.names_flag = true;
            state.build.name_flag = false;
            state.build.names_level += 1;
            state.build.names_variables.push(this.variables);
            state.build.name_label.push({});
            func = function(state2) {
              state2.tmp.can_substitute.push(true);
              state2.tmp.name_node = {};
              state2.tmp.name_node.children = [];
              state2.nameOutput.init(this);
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            for (var i = 0, ilen = 3; i < ilen; i += 1) {
              var key = ["family", "given", "et-al"][i];
              this[key] = state.build[key];
              if (state.build.names_level === 1) {
                state.build[key] = void 0;
              }
            }
            this.label = state.build.name_label[state.build.name_label.length - 1];
            state.build.names_level += -1;
            state.build.names_variables.pop();
            state.build.name_label.pop();
            func = function(state2) {
              if (state2.tmp.etal_node) {
                this.etal_style = state2.tmp.etal_node;
              } else {
                this.etal_style = "empty";
              }
              this.etal_term = state2.getTerm(state2.tmp.etal_term, "long", 0);
              this.etal_prefix_single = " ";
              this.etal_prefix_multiple = state2.tmp.name_delimiter;
              if (state2.tmp["delimiter-precedes-et-al"] === "always") {
                this.etal_prefix_single = state2.tmp.name_delimiter;
              } else if (state2.tmp["delimiter-precedes-et-al"] === "never") {
                this.etal_prefix_multiple = " ";
              } else if (state2.tmp["delimiter-precedes-et-al"] === "after-inverted-name") {
                this.etal_prefix_single = state2.tmp.name_delimiter;
                this.etal_prefix_multiple = " ";
              }
              this.etal_suffix = "";
              if (!CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {
                if (this.etal_prefix_single === " ") {
                  this.etal_prefix_single = "";
                }
                if (this.etal_prefix_multiple === " ") {
                  this.etal_prefix_multiple = "";
                }
                if (this.etal_suffix === " ") {
                  this.etal_suffix = "";
                }
              }
              for (var i2 = 0, ilen2 = 3; i2 < ilen2; i2 += 1) {
                var key2 = ["family", "given"][i2];
                state2.nameOutput[key2] = this[key2];
              }
              state2.nameOutput["with"] = this["with"];
              var mywith = "with";
              var with_default_prefix = "";
              var with_suffix = "";
              if (CSL2.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {
                with_default_prefix = " ";
                with_suffix = " ";
              }
              var thewith = {};
              thewith.single = new CSL2.Blob(mywith);
              thewith.single.strings.suffix = with_suffix;
              thewith.multiple = new CSL2.Blob(mywith);
              thewith.multiple.strings.suffix = with_suffix;
              if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "always") {
                thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
                thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "contextual") {
                thewith.single.strings.prefix = with_default_prefix;
                thewith.multiple.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
              } else if (state2.inheritOpt(state2.nameOutput.name, "delimiter-precedes-last") === "after-inverted-name") {
                thewith.single.strings.prefix = state2.inheritOpt(this, "delimiter", "names-delimiter");
                thewith.multiple.strings.prefix = with_default_prefix;
              } else {
                thewith.single.strings.prefix = with_default_prefix;
                thewith.multiple.strings.prefix = with_default_prefix;
              }
              state2.nameOutput["with"] = thewith;
              state2.nameOutput.label = this.label;
              state2.nameOutput.etal_style = this.etal_style;
              state2.nameOutput.etal_term = this.etal_term;
              state2.nameOutput.etal_prefix_single = this.etal_prefix_single;
              state2.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;
              state2.nameOutput.etal_suffix = this.etal_suffix;
              state2.nameOutput.outputNames();
              state2.tmp["et-al-use-first"] = void 0;
              state2.tmp["et-al-min"] = void 0;
              state2.tmp["et-al-use-last"] = void 0;
            };
            this.execs.push(func);
            func = function(state2) {
              if (!state2.tmp.can_substitute.pop()) {
                state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
              }
              if (state2.tmp.can_substitute.mystack.length === 1) {
                state2.tmp.can_block_substitute = false;
              }
            };
            this.execs.push(func);
            state.build.name_flag = false;
          }
          target.push(this);
          if (this.tokentype === CSL2.END || this.tokentype === CSL2.SINGLETON) {
            state.build.substitute_level.pop();
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL2.Node.number = {
        build: function(state, target) {
          var func;
          CSL2.Util.substituteStart.call(this, state, target);
          if (this.strings.form === "roman") {
            this.formatter = state.fun.romanizer;
          } else if (this.strings.form === "ordinal") {
            this.formatter = state.fun.ordinalizer;
          } else if (this.strings.form === "long-ordinal") {
            this.formatter = state.fun.long_ordinalizer;
          }
          if (typeof this.successor_prefix === "undefined") {
            this.successor_prefix = state[state.build.area].opt.layout_delimiter;
          }
          if (typeof this.splice_prefix === "undefined") {
            this.splice_prefix = state[state.build.area].opt.layout_delimiter;
          }
          func = function(state2, Item, item) {
            if (this.variables.length === 0) {
              return;
            }
            var varname;
            varname = this.variables[0];
            if (typeof item === "undefined") {
              var item = {};
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
              if (state2.tmp.just_looking) {
                return;
              }
              if (!item[varname]) {
                return;
              }
            } else {
              if (!Item[varname]) {
                return;
              }
            }
            if (varname === "collection-number" && Item.type === "legal_case") {
              state2.tmp.renders_collection_number = true;
            }
            var node = this;
            if (state2.tmp.group_context.tip.force_suppress) {
              return false;
            }
            if (["locator", "locator-extra"].indexOf(varname) > -1) {
              state2.processNumber.call(state2, node, item, varname, Item.type);
            } else {
              if (!state2.tmp.group_context.tip.condition && Item[varname]) {
                state2.tmp.just_did_number = ("" + Item[varname]).match(/[0-9]$/);
              }
              state2.processNumber.call(state2, node, Item, varname, Item.type);
            }
            if (this.substring) {
              var val = Item[varname].slice(this.substring);
              state2.output.append(val, node);
            } else {
              CSL2.Util.outputNumericField(state2, varname, Item.id);
            }
            if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
              state2.tmp.done_vars.push(this.variables_real[0]);
              state2.tmp.group_context.tip.done_vars.push(this.variables_real[0]);
            }
          };
          this.execs.push(func);
          target.push(this);
          CSL2.Util.substituteEnd.call(this, state, target);
        }
      };
      CSL2.Node.sort = {
        build: function(state, target) {
          target = state[state.build.root + "_sort"].tokens;
          if (this.tokentype === CSL2.START) {
            if (state.build.area === "citation") {
              state.opt.sort_citations = true;
            }
            state.build.area = state.build.root + "_sort";
            state.build.extension = "_sort";
            var func = function(state2, Item) {
              if (state2.opt.has_layout_locale) {
                var langspec = CSL2.localeResolve(Item.language, state2.opt["default-locale"][0]);
                var sort_locales = state2[state2.tmp.area.slice(0, -5)].opt.sort_locales;
                var langForItem;
                for (var i = 0, ilen = sort_locales.length; i < ilen; i += 1) {
                  langForItem = sort_locales[i][langspec.bare];
                  if (!langForItem) {
                    langForItem = sort_locales[i][langspec.best];
                  }
                  if (langForItem) {
                    break;
                  }
                }
                if (!langForItem) {
                  langForItem = state2.opt["default-locale"][0];
                }
                state2.tmp.lang_sort_hold = state2.opt.lang;
                state2.opt.lang = langForItem;
              }
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            state.build.area = state.build.root;
            state.build.extension = "";
            var func = function(state2) {
              if (state2.opt.has_layout_locale) {
                state2.opt.lang = state2.tmp.lang_sort_hold;
                delete state2.tmp.lang_sort_hold;
              }
            };
            this.execs.push(func);
          }
          target.push(this);
        }
      };
      CSL2.Node.substitute = {
        build: function(state, target) {
          var func;
          if (this.tokentype === CSL2.START) {
            var choose_start = new CSL2.Token("choose", CSL2.START);
            CSL2.Node.choose.build.call(choose_start, state, target);
            var if_singleton = new CSL2.Token("if", CSL2.SINGLETON);
            func = function() {
              if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                return true;
              }
              return false;
            };
            if_singleton.tests = [func];
            if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);
            target.push(if_singleton);
            func = function(state2) {
              state2.tmp.can_block_substitute = true;
              if (state2.tmp.value.length && !state2.tmp.common_term_match_fail) {
                state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
              }
              state2.tmp.common_term_match_fail = false;
            };
            this.execs.push(func);
            target.push(this);
          }
          if (this.tokentype === CSL2.END) {
            target.push(this);
            var choose_end = new CSL2.Token("choose", CSL2.END);
            CSL2.Node.choose.build.call(choose_end, state, target);
          }
        }
      };
      CSL2.Node.text = {
        build: function(state, target) {
          var func, form, plural, id, num, number2, formatter, firstoutput, specialdelimiter, label2, suffix, term;
          if (this.postponed_macro) {
            var group_start = CSL2.Util.cloneToken(this);
            group_start.name = "group";
            group_start.tokentype = CSL2.START;
            CSL2.Node.group.build.call(group_start, state, target);
            CSL2.expandMacro.call(state, this, target);
            var group_end = CSL2.Util.cloneToken(this);
            group_end.name = "group";
            group_end.tokentype = CSL2.END;
            if (this.postponed_macro === "juris-locator-label") {
              group_end.isJurisLocatorLabel = true;
            }
            CSL2.Node.group.build.call(group_end, state, target);
          } else {
            CSL2.Util.substituteStart.call(this, state, target);
            if (!this.variables_real) {
              this.variables_real = [];
            }
            if (!this.variables) {
              this.variables = [];
            }
            form = "long";
            plural = 0;
            if (this.strings.form) {
              form = this.strings.form;
            }
            if (this.strings.plural) {
              plural = this.strings.plural;
            }
            if (this.variables_real[0] === "citation-number" || this.variables_real[0] === "year-suffix" || this.variables_real[0] === "citation-label") {
              if (this.variables_real[0] === "citation-number") {
                if (state.build.root === "citation") {
                  state.opt.update_mode = CSL2.NUMERIC;
                }
                if (state.build.root === "bibliography") {
                  state.opt.bib_mode = CSL2.NUMERIC;
                }
                if (state[state.tmp.area].opt.collapse === "citation-number") {
                  this.range_prefix = state.getTerm("citation-range-delimiter");
                }
                this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                func = function(state2, Item, item) {
                  id = "" + Item.id;
                  if (!state2.tmp.just_looking) {
                    if (state2.tmp.area.slice(-5) === "_sort" && this.variables[0] === "citation-number") {
                      if (state2.tmp.area === "bibliography_sort") {
                        state2.tmp.group_context.tip.done_vars.push("citation-number");
                      }
                      if (state2.tmp.area === "citation_sort" && state2.bibliography_sort.tmp.citation_number_map) {
                        var num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[Item.id].seq];
                      } else {
                        var num2 = state2.registry.registry[Item.id].seq;
                      }
                      if (num2) {
                        num2 = CSL2.Util.padding("" + num2);
                      }
                      state2.output.append(num2, this);
                      return;
                    }
                    if (item && item["author-only"]) {
                      state2.tmp.element_trace.replace("suppress-me");
                    }
                    if (state2.tmp.area !== "bibliography_sort" && state2.bibliography_sort.tmp.citation_number_map && state2.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
                      num2 = state2.bibliography_sort.tmp.citation_number_map[state2.registry.registry[id].seq];
                    } else {
                      num2 = state2.registry.registry[id].seq;
                    }
                    if (state2.opt.citation_number_slug) {
                      state2.output.append(state2.opt.citation_number_slug, this);
                    } else {
                      number2 = new CSL2.NumericBlob(state2, false, num2, this, Item.id);
                      if (state2.tmp.in_cite_predecessor) {
                        number2.suppress_splice_prefix = true;
                      }
                      state2.output.append(number2, "literal");
                    }
                  }
                };
                this.execs.push(func);
              } else if (this.variables_real[0] === "year-suffix") {
                state.opt.has_year_suffix = true;
                if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                  this.range_prefix = state.getTerm("citation-range-delimiter");
                }
                this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                  this.successor_prefix = state[state.build.area].opt["year-suffix-delimiter"];
                }
                func = function(state2, Item) {
                  if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false && !state2.tmp.just_looking) {
                    num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                    if (state2[state2.tmp.area].opt.cite_group_delimiter) {
                      this.successor_prefix = state2[state2.tmp.area].opt.cite_group_delimiter;
                    }
                    number2 = new CSL2.NumericBlob(state2, false, num, this, Item.id);
                    formatter = new CSL2.Util.Suffixator(CSL2.SUFFIX_CHARS);
                    number2.setFormatter(formatter);
                    state2.output.append(number2, "literal");
                    firstoutput = false;
                    for (var i = 0, ilen = state2.tmp.group_context.mystack.length; i < ilen; i++) {
                      var flags = state2.tmp.group_context.mystack[i];
                      if (!flags.variable_success && (flags.variable_attempt || !flags.variable_attempt && !flags.term_intended)) {
                        firstoutput = true;
                        break;
                      }
                    }
                    specialdelimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                    if (firstoutput && specialdelimiter && !state2.tmp.sort_key_flag) {
                      state2.tmp.splice_delimiter = state2[state2.tmp.area].opt["year-suffix-delimiter"];
                    }
                  }
                };
                this.execs.push(func);
              } else if (this.variables_real[0] === "citation-label") {
                if (state.build.root === "bibliography") {
                  state.opt.bib_mode = CSL2.TRIGRAPH;
                }
                state.opt.has_year_suffix = true;
                func = function(state2, Item) {
                  label2 = Item["citation-label"];
                  if (!label2) {
                    label2 = state2.getCitationLabel(Item);
                  }
                  if (!state2.tmp.just_looking) {
                    suffix = "";
                    if (state2.registry.registry[Item.id] && state2.registry.registry[Item.id].disambig.year_suffix !== false) {
                      num = parseInt(state2.registry.registry[Item.id].disambig.year_suffix, 10);
                      suffix = state2.fun.suffixator.format(num);
                    }
                    label2 += suffix;
                  }
                  state2.output.append(label2, this);
                };
                this.execs.push(func);
              }
            } else {
              if (this.strings.term) {
                func = function(state2, Item) {
                  var gender = state2.opt.gender[Item.type];
                  var term2 = this.strings.term;
                  term2 = state2.getTerm(term2, form, plural, gender, CSL2.TOLERANT, this.default_locale);
                  var myterm;
                  if (term2 !== "") {
                    state2.tmp.group_context.tip.term_intended = true;
                  }
                  CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, term2, null, this);
                  if (!state2.tmp.term_predecessor && !(state2.opt["class"] === "in-text" && state2.tmp.area === "citation")) {
                    myterm = CSL2.Output.Formatters["capitalize-first"](state2, term2);
                  } else {
                    myterm = term2;
                  }
                  if (state2.tmp.strip_periods) {
                    myterm = myterm.replace(/\./g, "");
                  } else {
                    for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                      if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
                        myterm = myterm.replace(/\./g, "");
                        break;
                      }
                    }
                  }
                  state2.output.append(myterm, this);
                  if (state2.tmp.can_block_substitute) {
                    state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
                  }
                };
                this.execs.push(func);
                state.build.term = false;
                state.build.form = false;
                state.build.plural = false;
              } else if (this.variables_real.length) {
                func = function(state2, Item) {
                  if (this.variables_real[0] !== "locator") {
                    state2.tmp.have_collapsed = false;
                  }
                  if (!state2.tmp.group_context.tip.condition && Item[this.variables[0]]) {
                    state2.tmp.just_did_number = false;
                  }
                  var val = Item[this.variables[0]];
                  if (val && !state2.tmp.group_context.tip.condition) {
                    if (("" + val).slice(-1).match(/[0-9]/)) {
                      state2.tmp.just_did_number = true;
                    } else {
                      state2.tmp.just_did_number = false;
                    }
                  }
                };
                this.execs.push(func);
                if (CSL2.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1 || this.variables_real[0].indexOf("-main") > -1 || this.variables_real[0].indexOf("-sub") > -1 || ["language-name", "language-name-original"].indexOf(this.variables_real[0]) > -1) {
                  var abbrevfam = this.variables[0];
                  var abbrfall = false;
                  var altvar = false;
                  var transfall = false;
                  if (form === "short") {
                    if (this.variables_real[0].slice(-6) !== "-short") {
                      altvar = this.variables_real[0] + "-short";
                    }
                  } else {
                    abbrevfam = false;
                  }
                  if (state.build.extension) {
                    transfall = true;
                  } else {
                    transfall = true;
                    abbrfall = true;
                  }
                  func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                } else {
                  if (CSL2.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item, item) {
                      if (item && item[this.variables[0]]) {
                        state2.processNumber(this, item, this.variables[0], Item.type);
                        CSL2.Util.outputNumericField(state2, this.variables[0], Item.id);
                        if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1 && !state2.tmp.just_looking) {
                          state2.tmp.done_vars.push(this.variables_real[0]);
                        }
                      }
                    };
                  } else if (["page", "page-first", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume"].indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item) {
                      state2.processNumber(this, Item, this.variables[0], Item.type);
                      CSL2.Util.outputNumericField(state2, this.variables[0], Item.id);
                    };
                  } else if (["URL", "DOI"].indexOf(this.variables_real[0]) > -1) {
                    func = function(state2, Item) {
                      var value;
                      if (this.variables[0]) {
                        value = state2.getVariable(Item, this.variables[0], form);
                        if (value) {
                          if (this.variables[0] === "URL" && form === "short") {
                            value = value.replace(/(.*\.[^\/]+)\/.*/, "$1");
                            if (value.match(/\/\/www\./)) {
                              value = value.replace(/https?:\/\//, "");
                            }
                          }
                          if (state2.opt.development_extensions.wrap_url_and_doi) {
                            if (!this.decorations.length || this.decorations[0][0] !== "@" + this.variables[0]) {
                              var clonetoken = CSL2.Util.cloneToken(this);
                              var groupblob = new CSL2.Blob(null, null, "url-wrapper");
                              groupblob.decorations.push(["@DOI", "true"]);
                              if (this.variables_real[0] === "DOI") {
                                var prefix;
                                if (this.strings.prefix && this.strings.prefix.match(/^.*https:\/\/doi\.org\/$/)) {
                                  value = value.replace(/^https?:\/\/doi\.org\//, "");
                                  if (value.match(/^https?:\/\//)) {
                                    prefix = "";
                                  } else {
                                    prefix = "https://doi.org/";
                                  }
                                  clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length - 16);
                                }
                                var prefixblob = new CSL2.Blob(prefix);
                                var valueblob = new CSL2.Blob(value);
                                groupblob.push(prefixblob);
                                groupblob.push(valueblob);
                                state2.output.append(groupblob, clonetoken, false, false, true);
                              } else {
                                var valueblob = new CSL2.Blob(value);
                                groupblob.push(valueblob);
                                state2.output.append(groupblob, clonetoken, false, false, true);
                              }
                            } else {
                              state2.output.append(value, this, false, false, true);
                            }
                          } else {
                            if (this.decorations.length) {
                              for (var i = this.decorations.length - 1; i > -1; i--) {
                                if (this.decorations[i][0] === "@" + this.variables[0]) {
                                  this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i + 1));
                                }
                              }
                            }
                            state2.output.append(value, this, false, false, true);
                          }
                        }
                      }
                    };
                  } else if (this.variables_real[0] === "section") {
                    func = function(state2, Item) {
                      var value;
                      value = state2.getVariable(Item, this.variables[0], form);
                      if (value) {
                        state2.output.append(value, this);
                      }
                    };
                  } else if (this.variables_real[0] === "hereinafter") {
                    func = function(state2, Item) {
                      var value = state2.transform.abbrevs["default"]["hereinafter"][Item.id];
                      if (value) {
                        state2.output.append(value, this);
                        state2.tmp.group_context.tip.variable_success = true;
                      }
                    };
                  } else {
                    func = function(state2, Item) {
                      var value;
                      if (this.variables[0]) {
                        value = state2.getVariable(Item, this.variables[0], form);
                        if (value) {
                          value = "" + value;
                          value = value.split("\\").join("");
                          state2.output.append(value, this);
                        }
                      }
                    };
                  }
                }
                this.execs.push(func);
              } else if (this.strings.value) {
                func = function(state2) {
                  state2.tmp.group_context.tip.term_intended = true;
                  CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, this.strings.value, true, this);
                  state2.output.append(this.strings.value, this);
                  if (state2.tmp.can_block_substitute) {
                    state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
                  }
                };
                this.execs.push(func);
              }
            }
            target.push(this);
            CSL2.Util.substituteEnd.call(this, state, target);
          }
        }
      };
      CSL2.Node.intext = {
        build: function(state, target) {
          if (this.tokentype === CSL2.START) {
            state.build.area = "intext";
            state.build.root = "intext";
            state.build.extension = "";
            var func = function(state2, Item) {
              state2.tmp.area = "intext";
              state2.tmp.root = "intext";
              state2.tmp.extension = "";
            };
            this.execs.push(func);
          }
          if (this.tokentype === CSL2.END) {
            state.intext_sort = {
              opt: {
                sort_directions: state.citation_sort.opt.sort_directions
              }
            };
            state.intext.srt = state.citation.srt;
          }
          target.push(this);
        }
      };
      CSL2.Attributes = {};
      CSL2.Attributes["@disambiguate"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        if (arg === "true") {
          state.opt.has_disambiguate = true;
          var func = function(Item) {
            if (state.tmp.area === "bibliography") {
              if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {
                state.tmp.disambiguate_count += 1;
                return true;
              }
            } else {
              state.tmp.disambiguate_maxMax += 1;
              if (state.tmp.disambig_settings.disambiguate && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {
                state.tmp.disambiguate_count += 1;
                return true;
              }
            }
            return false;
          };
          this.tests.push(func);
        } else if (arg === "check-ambiguity-and-backreference") {
          var func = function(Item) {
            if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id]["citation-count"] > 1) {
              return true;
            }
            return false;
          };
          this.tests.push(func);
        }
      };
      CSL2.Attributes["@is-numeric"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var variables = arg.split(/\s+/);
        var maketest = function(variable) {
          return function(Item, item) {
            var myitem = Item;
            if (item && ["locator", "locator-extra"].indexOf(variable) > -1) {
              myitem = item;
            }
            if (!myitem[variable]) {
              return false;
            }
            if (CSL2.NUMERIC_VARIABLES.indexOf(variable) > -1) {
              if (!state.tmp.shadow_numbers[variable]) {
                state.processNumber(false, myitem, variable, Item.type);
              }
              if (state.tmp.shadow_numbers[variable].numeric) {
                return true;
              }
            } else if (["title", "version"].indexOf(variable) > -1) {
              if (myitem[variable].slice(-1) === "" + parseInt(myitem[variable].slice(-1), 10)) {
                return true;
              }
            }
            return false;
          };
        };
        for (var i = 0; i < variables.length; i += 1) {
          this.tests.push(maketest(variables[i]));
        }
      };
      CSL2.Attributes["@is-uncertain-date"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var variables = arg.split(/\s+/);
        var maketest = function(myvariable) {
          return function(Item) {
            if (Item[myvariable] && Item[myvariable].circa) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = variables.length; i < ilen; i += 1) {
          this.tests.push(maketest(variables[i]));
        }
      };
      CSL2.Attributes["@locator"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.replace("sub verbo", "sub-verbo");
        trylabels = trylabels.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item, item) {
            var label2;
            state.processNumber(false, item, "locator");
            label2 = state.tmp.shadow_numbers.locator.label;
            if (label2 && trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL2.Attributes["@position"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryposition;
        state.opt.update_mode = CSL2.POSITION;
        var trypositions = arg.split(/\s+/);
        var testSubsequentNear = function(Item, item) {
          if (item && CSL2.POSITION_MAP[item.position] >= CSL2.POSITION_MAP[CSL2.POSITION_SUBSEQUENT] && item["near-note"]) {
            return true;
          }
          return false;
        };
        var testSubsequentNotNear = function(Item, item) {
          if (item && CSL2.POSITION_MAP[item.position] == CSL2.POSITION_MAP[CSL2.POSITION_SUBSEQUENT] && !item["near-note"]) {
            return true;
          }
          return false;
        };
        var maketest = function(tryposition2) {
          return function(Item, item) {
            if (state.tmp.area === "bibliography") {
              return false;
            }
            if (item && typeof item.position === "undefined") {
              item.position = 0;
            }
            if (item && typeof item.position === "number") {
              if (item.position === 0 && tryposition2 === 0) {
                return true;
              } else if (tryposition2 > 0 && CSL2.POSITION_MAP[item.position] >= CSL2.POSITION_MAP[tryposition2]) {
                return true;
              }
            } else if (tryposition2 === 0) {
              return true;
            }
            return false;
          };
        };
        for (var i = 0, ilen = trypositions.length; i < ilen; i += 1) {
          var tryposition = trypositions[i];
          if (tryposition === "first") {
            tryposition = CSL2.POSITION_FIRST;
          } else if (tryposition === "container-subsequent") {
            tryposition = CSL2.POSITION_CONTAINER_SUBSEQUENT;
          } else if (tryposition === "subsequent") {
            tryposition = CSL2.POSITION_SUBSEQUENT;
          } else if (tryposition === "ibid") {
            tryposition = CSL2.POSITION_IBID;
          } else if (tryposition === "ibid-with-locator") {
            tryposition = CSL2.POSITION_IBID_WITH_LOCATOR;
          }
          if (tryposition === "near-note") {
            this.tests.push(testSubsequentNear);
          } else if (tryposition === "far-note") {
            this.tests.push(testSubsequentNotNear);
          } else {
            this.tests.push(maketest(tryposition));
          }
        }
      };
      CSL2.Attributes["@type"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var types = arg.split(/\s+/);
        var maketest = function(mytype) {
          return function(Item) {
            var ret = Item.type === mytype;
            if (ret) {
              return true;
            } else {
              return false;
            }
          };
        };
        var tests = [];
        for (var i = 0, ilen = types.length; i < ilen; i += 1) {
          tests.push(maketest(types[i]));
        }
        this.tests.push(state.fun.match.any(this, state, tests));
      };
      CSL2.Attributes["@variable"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func;
        this.variables = arg.split(/\s+/);
        this.variables_real = this.variables.slice();
        if (this.name === "label" && this.variables[0]) {
          this.strings.term = this.variables[0];
        } else if (["names", "date", "text", "number"].indexOf(this.name) > -1) {
          func = function(state2, Item, item) {
            for (var i2 = this.variables.length - 1; i2 > -1; i2 += -1) {
              this.variables.pop();
            }
            for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
              if (state2.tmp.done_vars.indexOf(this.variables_real[i2]) === -1) {
                this.variables.push(this.variables_real[i2]);
              }
              if (state2.tmp.can_block_substitute) {
                state2.tmp.done_vars.push(this.variables_real[i2]);
              }
            }
          };
          this.execs.push(func);
          func = function(state2, Item, item) {
            var output = false;
            for (var i2 = 0, ilen2 = this.variables.length; i2 < ilen2; i2++) {
              var variable = this.variables[i2];
              if (["authority", "committee"].indexOf(variable) > -1 && typeof Item[variable] === "string" && this.name === "names") {
                var isValid = true;
                var rawNames = Item[variable].split(/\s*;\s*/);
                var rawMultiNames = {};
                if (Item.multi && Item.multi._keys[variable]) {
                  for (var langTag in Item.multi._keys[variable]) {
                    rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\s*;\s*/);
                    if (rawMultiNames[langTag].length !== rawNames.length) {
                      isValid = false;
                      break;
                    }
                  }
                }
                if (!isValid) {
                  rawNames = [Item[variable]];
                  rawMultiNames = Item.multi._keys[variable];
                }
                for (var j = 0, jlen = rawNames.length; j < jlen; j++) {
                  var creatorParent = {
                    literal: rawNames[j],
                    multi: {
                      _key: {}
                    }
                  };
                  for (var langTag in rawMultiNames) {
                    var creatorChild = {
                      literal: rawMultiNames[langTag][j]
                    };
                    creatorParent.multi._key[langTag] = creatorChild;
                  }
                  rawNames[j] = creatorParent;
                }
                Item[variable] = rawNames;
              }
              if (this.strings.form === "short" && !Item[variable]) {
                if (variable === "title") {
                  variable = "title-short";
                } else if (variable === "container-title") {
                  variable = "container-title-short";
                }
              }
              if (variable === "year-suffix") {
                output = true;
                break;
              } else if (CSL2.DATE_VARIABLES.indexOf(variable) > -1) {
                if (state2.opt.development_extensions.locator_date_and_revision && variable === "locator-date") {
                  output = true;
                  break;
                }
                if (Item[variable]) {
                  for (var key in Item[variable]) {
                    if (this.dateparts.indexOf(key) === -1 && key !== "literal") {
                      continue;
                    }
                    if (Item[variable][key]) {
                      output = true;
                      break;
                    }
                  }
                  if (output) {
                    break;
                  }
                }
              } else if (variable === "locator") {
                if (item && item.locator) {
                  output = true;
                }
                break;
              } else if (variable === "locator-extra") {
                if (item && item["locator-extra"]) {
                  output = true;
                }
                break;
              } else if (["citation-number", "citation-label"].indexOf(variable) > -1) {
                output = true;
                break;
              } else if (variable === "first-reference-note-number") {
                if (item && item["first-reference-note-number"]) {
                  output = true;
                }
                break;
              } else if (variable === "first-container-reference-note-number") {
                if (item && item["first-container-reference-note-number"]) {
                  output = true;
                }
                break;
              } else if (variable === "hereinafter") {
                if (state2.transform.abbrevs["default"].hereinafter[Item.id] && state2.sys.getAbbreviation && Item.id) {
                  output = true;
                }
                break;
              } else if (typeof Item[variable] === "object") {
                break;
              } else if (typeof Item[variable] === "string" && Item[variable]) {
                output = true;
                break;
              } else if (typeof Item[variable] === "number") {
                output = true;
                break;
              }
              if (output) {
                break;
              }
            }
            if (output) {
              for (var i2 = 0, ilen2 = this.variables_real.length; i2 < ilen2; i2++) {
                var variable = this.variables_real[i2];
                if (variable !== "citation-number" || state2.tmp.area !== "bibliography") {
                  state2.tmp.cite_renders_content = true;
                }
                state2.tmp.group_context.tip.variable_success = true;
                if (state2.tmp.can_substitute.value() && state2.tmp.area === "bibliography" && typeof Item[variable] === "string") {
                  state2.tmp.name_node.top = state2.output.current.value();
                  state2.tmp.rendered_name.push(Item[variable]);
                }
              }
              state2.tmp.can_substitute.replace(false, CSL2.LITERAL);
            } else {
              state2.tmp.group_context.tip.variable_attempt = true;
            }
          };
          this.execs.push(func);
        } else if (["if", "else-if", "condition"].indexOf(this.name) > -1) {
          var maketest = function(variable) {
            return function(Item, item) {
              var myitem = Item;
              if (item && ["locator", "locator-extra", "first-reference-note-number", "first-container-reference-note-number", "locator-date"].indexOf(variable) > -1) {
                myitem = item;
              }
              if (variable === "hereinafter" && state.sys.getAbbreviation && myitem.id) {
                if (state.transform.abbrevs["default"].hereinafter[myitem.id]) {
                  return true;
                }
              } else if (myitem[variable]) {
                if (typeof myitem[variable] === "number" || typeof myitem[variable] === "string") {
                  return true;
                } else if (typeof myitem[variable] === "object") {
                  for (var key in myitem[variable]) {
                    if (myitem[variable][key]) {
                      return true;
                    }
                  }
                }
              }
              return false;
            };
          };
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
            this.tests.push(maketest(this.variables[i]));
          }
        }
      };
      CSL2.Attributes["@page"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.replace("sub verbo", "sub-verbo");
        trylabels = trylabels.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item) {
            var label2;
            state.processNumber(false, Item, "page", Item.type);
            if (!state.tmp.shadow_numbers.page.label) {
              label2 = "page";
            } else if (state.tmp.shadow_numbers.page.label === "sub verbo") {
              label2 = "sub-verbo";
            } else {
              label2 = state.tmp.shadow_numbers.page.label;
            }
            if (state.tmp.shadow_numbers.page.values.length > 0) {
              if (state.tmp.shadow_numbers.page.values[0].gotosleepability) {
                state.tmp.shadow_numbers.page.values[0].labelVisibility = false;
              }
            }
            if (trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL2.Attributes["@number"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trylabels = arg.split(/\s+/);
        var maketest = function(trylabel) {
          return function(Item) {
            var label2;
            state.processNumber(false, Item, "number", Item.type);
            if (!state.tmp.shadow_numbers.number.label) {
              label2 = "number";
            } else {
              label2 = state.tmp.shadow_numbers.number.label;
            }
            if (trylabel === label2) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = trylabels.length; i < ilen; i += 1) {
          this.tests.push(maketest(trylabels[i]));
        }
      };
      CSL2.Attributes["@jurisdiction"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryjurisdictions = arg.split(/\s+/);
        var maketests = function(tryjurisdictions2) {
          return function(Item) {
            if (!Item.jurisdiction) {
              return false;
            }
            var jurisdiction2 = Item.jurisdiction;
            for (var i = 0, ilen = tryjurisdictions2.length; i < ilen; i++) {
              if (jurisdiction2 === tryjurisdictions2[i]) {
                return true;
              }
            }
            return false;
          };
        };
        this.tests.push(maketests(tryjurisdictions));
      };
      CSL2.Attributes["@country"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trycountries = arg.split(/\s+/);
        var maketests = function(trycountries2) {
          return function(Item) {
            if (!Item.country) {
              return false;
            }
            var country2 = Item.country;
            for (var i = 0, ilen = trycountries2.length; i < ilen; i++) {
              if (country2 === trycountries2[i]) {
                return true;
              }
            }
            return false;
          };
        };
        this.tests.push(maketests(trycountries));
      };
      CSL2.Attributes["@context"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function() {
          if (["bibliography", "citation"].indexOf(arg) > -1) {
            var area = state.tmp.area.slice(0, arg.length);
            if (area === arg) {
              return true;
            }
            return false;
          } else if (arg === "alternative") {
            return !!state.tmp.abort_alternative;
          }
        };
        this.tests.push(func);
      };
      CSL2.Attributes["@has-year-only"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || date2.month || date2.season) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL2.Attributes["@has-to-month-or-season"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || !date2.month && !date2.season || date2.day) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL2.Attributes["@has-day"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var trydates = arg.split(/\s+/);
        var maketest = function(trydate) {
          return function(Item) {
            var date2 = Item[trydate];
            if (!date2 || !date2.day) {
              return false;
            } else {
              return true;
            }
          };
        };
        for (var i = 0, ilen = trydates.length; i < ilen; i += 1) {
          this.tests.push(maketest(trydates[i]));
        }
      };
      CSL2.Attributes["@is-plural"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function(Item) {
          var nameList = Item[arg];
          if (nameList && nameList.length) {
            var persons = 0;
            var institutions = 0;
            var last_is_person = false;
            for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {
              if (state.opt.development_extensions.spoof_institutional_affiliations && (nameList[i].literal || nameList[i].isInstitution && nameList[i].family && !nameList[i].given)) {
                institutions += 1;
                last_is_person = false;
              } else {
                persons += 1;
                last_is_person = true;
              }
            }
            if (persons > 1) {
              return true;
            } else if (institutions > 1) {
              return true;
            } else if (institutions && last_is_person) {
              return true;
            }
          }
          return false;
        };
        this.tests.push(func);
      };
      CSL2.Attributes["@is-multiple"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var func = function(Item) {
          var val = "" + Item[arg];
          var lst = val.split(/(?:,\s|\s(?:tot\sen\smet|līdz|oraz|and|bis|έως|και|och|až|do|en|et|in|ir|ja|og|sa|to|un|und|és|și|i|u|y|à|e|a|и|-|–)\s|—|\&)/);
          if (lst.length > 1) {
            return true;
          }
          return false;
        };
        this.tests.push(func);
      };
      CSL2.Attributes["@locale"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var ret, langspec, lang, lst, i, ilen;
        var locale_default = state.opt["default-locale"][0];
        if (this.name === "layout") {
          this.locale_raw = arg;
          if (this.tokentype === CSL2.START) {
            if (!state.opt.multi_layout) {
              state.opt.multi_layout = [];
            }
            var locale_data = [];
            var locales = arg.split(/\s+/);
            var sort_locale = {};
            var localeMaster = CSL2.localeResolve(locales[0], locale_default);
            locale_data.push(localeMaster);
            if (localeMaster.generic) {
              sort_locale[localeMaster.generic] = localeMaster.best;
            } else {
              sort_locale[localeMaster.best] = localeMaster.best;
            }
            for (var i = 1, ilen = locales.length; i < ilen; i += 1) {
              var localeServant = CSL2.localeResolve(locales[i], locale_default);
              locale_data.push(localeServant);
              if (localeServant.generic) {
                sort_locale[localeServant.generic] = localeMaster.best;
              } else {
                sort_locale[localeServant.best] = localeMaster.best;
              }
            }
            state[state.build.area].opt.sort_locales.push(sort_locale);
            state.opt.multi_layout.push(locale_data);
          }
          state.opt.has_layout_locale = true;
        } else {
          lst = arg.split(/\s+/);
          var locale_bares = [];
          for (i = 0, ilen = lst.length; i < ilen; i += 1) {
            lang = lst[i];
            langspec = CSL2.localeResolve(lang, locale_default);
            if (lst[i].length === 2) {
              locale_bares.push(langspec.bare);
            }
            state.localeConfigure(langspec, true);
            lst[i] = langspec;
          }
          var locale_list = lst.slice();
          var maketest = function(locale_list2, locale_default2, locale_bares2) {
            return function(Item) {
              var res;
              ret = [];
              res = false;
              var langspec2 = false;
              var lang2;
              if (!Item.language) {
                lang2 = locale_default2;
              } else {
                lang2 = Item.language;
              }
              langspec2 = CSL2.localeResolve(lang2, locale_default2);
              for (i = 0, ilen = locale_list2.length; i < ilen; i += 1) {
                if (langspec2.best === locale_list2[i].best) {
                  state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                  state.tmp.condition_lang_val_arr.push(state.opt.lang);
                  state.opt.lang = locale_list2[0].best;
                  res = true;
                  break;
                }
              }
              if (!res && locale_bares2.indexOf(langspec2.bare) > -1) {
                state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                state.tmp.condition_lang_val_arr.push(state.opt.lang);
                state.opt.lang = locale_list2[0].best;
                res = true;
              }
              return res;
            };
          };
          this.tests.push(maketest(locale_list, locale_default, locale_bares));
        }
      };
      CSL2.Attributes["@alternative-node-internal"] = function(state) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function() {
          return function() {
            return !state.tmp.abort_alternative;
          };
        };
        var me = this;
        this.tests.push(maketest(me));
      };
      CSL2.Attributes["@locale-internal"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var langspec, lang, lst, i, ilen;
        lst = arg.split(/\s+/);
        this.locale_bares = [];
        for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          lang = lst[i];
          langspec = CSL2.localeResolve(lang, state.opt["default-locale"][0]);
          if (lst[i].length === 2) {
            this.locale_bares.push(langspec.bare);
          }
          state.localeConfigure(langspec);
          lst[i] = langspec;
        }
        this.locale_default = state.opt["default-locale"][0];
        this.locale = lst[0].best;
        this.locale_list = lst.slice();
        var maketest = function(me2) {
          return function(Item) {
            var ret, res;
            ret = [];
            res = false;
            var langspec2 = false;
            if (Item.language) {
              lang = Item.language;
              langspec2 = CSL2.localeResolve(lang, state.opt["default-locale"][0]);
              if (langspec2.best === state.opt["default-locale"][0]) {
                langspec2 = false;
              }
            }
            if (langspec2) {
              for (i = 0, ilen = me2.locale_list.length; i < ilen; i += 1) {
                if (langspec2.best === me2.locale_list[i].best) {
                  state.opt.lang = me2.locale;
                  state.tmp.last_cite_locale = me2.locale;
                  state.output.openLevel("empty");
                  state.output.current.value().new_locale = me2.locale;
                  res = true;
                  break;
                }
              }
              if (!res && me2.locale_bares.indexOf(langspec2.bare) > -1) {
                state.opt.lang = me2.locale;
                state.tmp.last_cite_locale = me2.locale;
                state.output.openLevel("empty");
                state.output.current.value().new_locale = me2.locale;
                res = true;
              }
            }
            return res;
          };
        };
        var me = this;
        this.tests.push(maketest(me));
      };
      CSL2.Attributes["@court-class"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var tryclasses = arg.split(/\s+/);
        var maketest = function(tryclass) {
          return function(Item) {
            var cls = CSL2.GET_COURT_CLASS(state, Item);
            if (cls === tryclass) {
              return true;
            } else {
              return false;
            }
          };
        };
        for (var i = 0, ilen = tryclasses.length; i < ilen; i++) {
          this.tests.push(maketest(tryclasses[i]));
        }
      };
      CSL2.Attributes["@container-multiple"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var retval = arg === "true" ? true : false;
        var maketest = function(retval2) {
          return function(Item) {
            if (!state.tmp.container_item_count[Item.container_id]) {
              return !retval2;
            } else if (state.tmp.container_item_count[Item.container_id] > 1) {
              return retval2;
            }
            return !retval2;
          };
        };
        this.tests.push(maketest(retval));
      };
      CSL2.Attributes["@container-subsequent"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var retval = arg === "true" ? true : false;
        var maketest = function(retval2) {
          return function(Item) {
            if (state.tmp.container_item_pos[Item.container_id] > 1) {
              return retval2;
            }
            return !retval2;
          };
        };
        this.tests.push(maketest(retval));
      };
      CSL2.Attributes["@has-subunit"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function(namevar) {
          return function(Item) {
            var subunit_count = 0;
            for (var i in Item[namevar]) {
              var name = Item[namevar][i];
              if (!name.given) {
                var institution2 = name.literal ? name.literal : name.family;
                var length = institution2.split("|").length;
                if (subunit_count === 0 || length < subunit_count) {
                  subunit_count = length;
                }
              }
            }
            return subunit_count > 1;
          };
        };
        this.tests.push(maketest(arg));
      };
      CSL2.Attributes["@cite-form"] = function(state, arg) {
        if (!this.tests) {
          this.tests = [];
        }
        ;
        var maketest = function(citeForm) {
          return function(Item) {
            if (Item["cite-form"] === citeForm) {
              return true;
            }
            return false;
          };
        };
        this.tests.push(maketest(arg));
      };
      CSL2.Attributes["@disable-duplicate-year-suppression"] = function(state, arg) {
        state.opt.disable_duplicate_year_suppression = arg.split(/\s+/);
      };
      CSL2.Attributes["@consolidate-containers"] = function(state, arg) {
        CSL2.Attributes["@track-containers"](state, arg);
        var args = arg.split(/\s+/);
        state.bibliography.opt.consolidate_containers = args;
      };
      CSL2.Attributes["@track-containers"] = function(state, arg) {
        var args = arg.split(/\s+/);
        if (!state.bibliography.opt.track_container_items) {
          state.bibliography.opt.track_container_items = [];
        }
        if (!state.bibliography.opt.consolidate_containers) {
          state.bibliography.opt.consolidate_containers = [];
        }
        state.bibliography.opt.track_container_items = state.bibliography.opt.track_container_items.concat(args);
      };
      CSL2.Attributes["@parallel-first"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.parallel_first = {};
        for (var i in vars) {
          var v = vars[i];
          this.parallel_first[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL2.Attributes["@parallel-last"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.parallel_last = {};
        for (var i in vars) {
          var v = vars[i];
          this.parallel_last[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL2.Attributes["@parallel-last-to-first"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        this.parallel_last_to_first = {};
        for (var i = 0, ilen = vars.length; i < ilen; i++) {
          this.parallel_last_to_first[vars[i]] = true;
        }
      };
      CSL2.Attributes["@parallel-delimiter-override"] = function(state, arg) {
        state.opt.parallel.enable = true;
        this.strings.set_parallel_delimiter_override = arg;
      };
      CSL2.Attributes["@parallel-delimiter-override-on-suppress"] = function(state, arg) {
        state.opt.parallel.enable = true;
        this.strings.set_parallel_delimiter_override_on_suppress = arg;
      };
      CSL2.Attributes["@no-repeat"] = function(state, arg) {
        state.opt.parallel.enable = true;
        var vars = arg.split(/\s+/);
        if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
        }
        this.non_parallel = {};
        for (var i in vars) {
          var v = vars[i];
          this.non_parallel[v] = true;
          state.opt.track_repeat[v] = true;
        }
      };
      CSL2.Attributes["@require"] = function(state, arg) {
        state.opt.use_context_condition = true;
        this.strings.require = arg;
      };
      CSL2.Attributes["@reject"] = function(state, arg) {
        state.opt.use_context_condition = true;
        this.strings.reject = arg;
      };
      CSL2.Attributes["@require-comma-on-symbol"] = function(state, arg) {
        state.opt.require_comma_on_symbol = arg;
      };
      CSL2.Attributes["@gender"] = function(state, arg) {
        this.gender = arg;
      };
      CSL2.Attributes["@cslid"] = function(state, arg) {
        this.cslid = parseInt(arg, 10);
      };
      CSL2.Attributes["@capitalize-if-first"] = function(state, arg) {
        this.strings.capitalize_if_first_override = arg;
      };
      CSL2.Attributes["@label-capitalize-if-first"] = function(state, arg) {
        this.strings.label_capitalize_if_first_override = arg;
      };
      CSL2.Attributes["@label-form"] = function(state, arg) {
        this.strings.label_form_override = arg;
      };
      CSL2.Attributes["@part-separator"] = function(state, arg) {
        this.strings["part-separator"] = arg;
      };
      CSL2.Attributes["@leading-noise-words"] = function(state, arg) {
        this["leading-noise-words"] = arg;
      };
      CSL2.Attributes["@name-never-short"] = function(state, arg) {
        this["name-never-short"] = arg;
      };
      CSL2.Attributes["@class"] = function(state, arg) {
        state.opt["class"] = arg;
      };
      CSL2.Attributes["@version"] = function(state, arg) {
        state.opt.version = arg;
      };
      CSL2.Attributes["@value"] = function(state, arg) {
        this.strings.value = arg;
      };
      CSL2.Attributes["@name"] = function(state, arg) {
        this.strings.name = arg;
      };
      CSL2.Attributes["@form"] = function(state, arg) {
        this.strings.form = arg;
      };
      CSL2.Attributes["@date-parts"] = function(state, arg) {
        this.strings["date-parts"] = arg;
      };
      CSL2.Attributes["@range-delimiter"] = function(state, arg) {
        this.strings["range-delimiter"] = arg;
      };
      CSL2.Attributes["@macro"] = function(state, arg) {
        this.postponed_macro = arg;
      };
      CSL2.Attributes["@term"] = function(state, arg) {
        if (arg === "sub verbo") {
          this.strings.term = "sub-verbo";
        } else {
          this.strings.term = arg;
        }
      };
      CSL2.Attributes["@xmlns"] = function() {
      };
      CSL2.Attributes["@lang"] = function(state, arg) {
        if (arg) {
          state.build.lang = arg;
        }
      };
      CSL2.Attributes["@lingo"] = function() {
      };
      CSL2.Attributes["@macro-has-date"] = function() {
        this["macro-has-date"] = true;
      };
      CSL2.Attributes["@suffix"] = function(state, arg) {
        this.strings.suffix = arg;
      };
      CSL2.Attributes["@prefix"] = function(state, arg) {
        this.strings.prefix = arg;
      };
      CSL2.Attributes["@delimiter"] = function(state, arg) {
        this.strings.delimiter = arg;
      };
      CSL2.Attributes["@match"] = function(state, arg) {
        this.match = arg;
      };
      CSL2.Attributes["@names-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        this.strings["et-al-min"] = val;
      };
      CSL2.Attributes["@names-use-first"] = function(state, arg) {
        this.strings["et-al-use-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@names-use-last"] = function(state, arg) {
        if (arg === "true") {
          this.strings["et-al-use-last"] = true;
        } else {
          this.strings["et-al-use-last"] = false;
        }
      };
      CSL2.Attributes["@sort"] = function(state, arg) {
        if (arg === "descending") {
          this.strings.sort_direction = CSL2.DESCENDING;
        }
      };
      CSL2.Attributes["@plural"] = function(state, arg) {
        if (arg === "always" || arg === "true") {
          this.strings.plural = 1;
        } else if (arg === "never" || arg === "false") {
          this.strings.plural = 0;
        } else if (arg === "contextual") {
          this.strings.plural = false;
        }
      };
      CSL2.Attributes["@has-publisher-and-publisher-place"] = function() {
        this.strings["has-publisher-and-publisher-place"] = true;
      };
      CSL2.Attributes["@publisher-delimiter-precedes-last"] = function(state, arg) {
        this.strings["publisher-delimiter-precedes-last"] = arg;
      };
      CSL2.Attributes["@publisher-delimiter"] = function(state, arg) {
        this.strings["publisher-delimiter"] = arg;
      };
      CSL2.Attributes["@publisher-and"] = function(state, arg) {
        this.strings["publisher-and"] = arg;
      };
      CSL2.Attributes["@givenname-disambiguation-rule"] = function(state, arg) {
        if (CSL2.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {
          state.citation.opt["givenname-disambiguation-rule"] = arg;
        }
      };
      CSL2.Attributes["@collapse"] = function(state, arg) {
        if (arg) {
          state[this.name].opt.collapse = arg;
        }
      };
      CSL2.Attributes["@cite-group-delimiter"] = function(state, arg) {
        if (arg) {
          state[state.tmp.area].opt.cite_group_delimiter = arg;
        }
      };
      CSL2.Attributes["@names-delimiter"] = function(state, arg) {
        state.setOpt(this, "names-delimiter", arg);
      };
      CSL2.Attributes["@name-form"] = function(state, arg) {
        state.setOpt(this, "name-form", arg);
      };
      CSL2.Attributes["@subgroup-delimiter"] = function(state, arg) {
        this.strings["subgroup-delimiter"] = arg;
      };
      CSL2.Attributes["@subgroup-delimiter-precedes-last"] = function(state, arg) {
        this.strings["subgroup-delimiter-precedes-last"] = arg;
      };
      CSL2.Attributes["@name-delimiter"] = function(state, arg) {
        state.setOpt(this, "name-delimiter", arg);
      };
      CSL2.Attributes["@et-al-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        state.setOpt(this, "et-al-min", val);
      };
      CSL2.Attributes["@et-al-use-first"] = function(state, arg) {
        state.setOpt(this, "et-al-use-first", parseInt(arg, 10));
      };
      CSL2.Attributes["@et-al-use-last"] = function(state, arg) {
        if (arg === "true") {
          state.setOpt(this, "et-al-use-last", true);
        } else {
          state.setOpt(this, "et-al-use-last", false);
        }
      };
      CSL2.Attributes["@et-al-subsequent-min"] = function(state, arg) {
        var val = parseInt(arg, 10);
        if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
        }
        state.setOpt(this, "et-al-subsequent-min", val);
      };
      CSL2.Attributes["@et-al-subsequent-use-first"] = function(state, arg) {
        state.setOpt(this, "et-al-subsequent-use-first", parseInt(arg, 10));
      };
      CSL2.Attributes["@suppress-min"] = function(state, arg) {
        this.strings["suppress-min"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@suppress-max"] = function(state, arg) {
        this.strings["suppress-max"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@and"] = function(state, arg) {
        state.setOpt(this, "and", arg);
      };
      CSL2.Attributes["@delimiter-precedes-last"] = function(state, arg) {
        state.setOpt(this, "delimiter-precedes-last", arg);
      };
      CSL2.Attributes["@delimiter-precedes-et-al"] = function(state, arg) {
        state.setOpt(this, "delimiter-precedes-et-al", arg);
      };
      CSL2.Attributes["@initialize-with"] = function(state, arg) {
        state.setOpt(this, "initialize-with", arg);
      };
      CSL2.Attributes["@initialize"] = function(state, arg) {
        if (arg === "false") {
          state.setOpt(this, "initialize", false);
        }
      };
      CSL2.Attributes["@name-as-reverse-order"] = function(state, arg) {
        this["name-as-reverse-order"] = arg;
      };
      CSL2.Attributes["@name-as-sort-order"] = function(state, arg) {
        if (this.name === "style-options") {
          this["name-as-sort-order"] = arg;
        } else {
          state.setOpt(this, "name-as-sort-order", arg);
        }
      };
      CSL2.Attributes["@sort-separator"] = function(state, arg) {
        state.setOpt(this, "sort-separator", arg);
      };
      CSL2.Attributes["@require-match"] = function(state, arg) {
        if (arg === "true") {
          this.requireMatch = true;
        }
      };
      CSL2.Attributes["@exclude-types"] = function(state, arg) {
        state.bibliography.opt.exclude_types = arg.split(/\s+/);
      };
      CSL2.Attributes["@exclude-with-fields"] = function(state, arg) {
        state.bibliography.opt.exclude_with_fields = arg.split(/\s+/);
      };
      CSL2.Attributes["@year-suffix-delimiter"] = function(state, arg) {
        state[this.name].opt["year-suffix-delimiter"] = arg;
      };
      CSL2.Attributes["@after-collapse-delimiter"] = function(state, arg) {
        state[this.name].opt["after-collapse-delimiter"] = arg;
      };
      CSL2.Attributes["@subsequent-author-substitute"] = function(state, arg) {
        state[this.name].opt["subsequent-author-substitute"] = arg;
      };
      CSL2.Attributes["@subsequent-author-substitute-rule"] = function(state, arg) {
        state[this.name].opt["subsequent-author-substitute-rule"] = arg;
      };
      CSL2.Attributes["@disambiguate-add-names"] = function(state, arg) {
        if (arg === "true") {
          state.opt["disambiguate-add-names"] = true;
        }
      };
      CSL2.Attributes["@disambiguate-add-givenname"] = function(state, arg) {
        if (arg === "true") {
          state.opt["disambiguate-add-givenname"] = true;
        }
      };
      CSL2.Attributes["@disambiguate-add-year-suffix"] = function(state, arg) {
        if (arg === "true" && state.opt.xclass !== "numeric") {
          state.opt["disambiguate-add-year-suffix"] = true;
        }
      };
      CSL2.Attributes["@second-field-align"] = function(state, arg) {
        if (arg === "flush" || arg === "margin") {
          state[this.name].opt["second-field-align"] = arg;
        }
      };
      CSL2.Attributes["@hanging-indent"] = function(state, arg) {
        if (arg === "true") {
          if (state.opt.development_extensions.hanging_indent_legacy_number) {
            state[this.name].opt.hangingindent = 2;
          } else {
            state[this.name].opt.hangingindent = true;
          }
        }
      };
      CSL2.Attributes["@line-spacing"] = function(state, arg) {
        if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["line-spacing"] = parseFloat(arg, 10);
        }
      };
      CSL2.Attributes["@entry-spacing"] = function(state, arg) {
        if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["entry-spacing"] = parseFloat(arg, 10);
        }
      };
      CSL2.Attributes["@near-note-distance"] = function(state, arg) {
        state[this.name].opt["near-note-distance"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@substring"] = function(state, arg) {
        this.substring = parseInt(arg, 10);
      };
      CSL2.Attributes["@text-case"] = function(state, arg) {
        var func = function(state2, Item) {
          if (arg === "normal") {
            this.text_case_normal = true;
          } else {
            this.strings["text-case"] = arg;
            if (arg === "title") {
              if (Item.jurisdiction) {
                this.strings["text-case"] = "passthrough";
              }
            }
          }
        };
        this.execs.push(func);
      };
      CSL2.Attributes["@page-range-format"] = function(state, arg) {
        state.opt["page-range-format"] = arg;
      };
      CSL2.Attributes["@year-range-format"] = function(state, arg) {
        state.opt["year-range-format"] = arg;
      };
      CSL2.Attributes["@default-locale"] = function(state, arg) {
        if (this.name === "style") {
          var lst, len, pos, m, ret;
          var m = arg.match(/-x-(sort|translit|translat)-/g);
          if (m) {
            for (pos = 0, len = m.length; pos < len; pos += 1) {
              m[pos] = m[pos].replace(/^-x-/, "").replace(/-$/, "");
            }
          }
          lst = arg.split(/-x-(?:sort|translit|translat)-/);
          ret = [lst[0]];
          for (pos = 1, len = lst.length; pos < len; pos += 1) {
            ret.push(m[pos - 1]);
            ret.push(lst[pos]);
          }
          lst = ret.slice();
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
            state.opt["locale-" + lst[pos]].push(lst[pos + 1].replace(/^\s*/g, "").replace(/\s*$/g, ""));
          }
          if (lst.length) {
            state.opt["default-locale"] = lst.slice(0, 1);
          } else {
            state.opt["default-locale"] = ["en"];
          }
        } else if (arg === "true") {
          this.default_locale = true;
        }
      };
      CSL2.Attributes["@default-locale-sort"] = function(state, arg) {
        state.opt["default-locale-sort"] = arg;
      };
      CSL2.Attributes["@demote-non-dropping-particle"] = function(state, arg) {
        state.opt["demote-non-dropping-particle"] = arg;
      };
      CSL2.Attributes["@initialize-with-hyphen"] = function(state, arg) {
        if (arg === "false") {
          state.opt["initialize-with-hyphen"] = false;
        }
      };
      CSL2.Attributes["@institution-parts"] = function(state, arg) {
        this.strings["institution-parts"] = arg;
      };
      CSL2.Attributes["@if-short"] = function(state, arg) {
        if (arg === "true") {
          this.strings["if-short"] = true;
        }
      };
      CSL2.Attributes["@substitute-use-first"] = function(state, arg) {
        this.strings["substitute-use-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@use-first"] = function(state, arg) {
        this.strings["use-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@use-last"] = function(state, arg) {
        this.strings["use-last"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@stop-first"] = function(state, arg) {
        this.strings["stop-first"] = parseInt(arg, 10);
      };
      CSL2.Attributes["@stop-last"] = function(state, arg) {
        this.strings["stop-last"] = parseInt(arg, 10) * -1;
      };
      CSL2.Attributes["@reverse-order"] = function(state, arg) {
        if (arg === "true") {
          this.strings["reverse-order"] = true;
        }
      };
      CSL2.Attributes["@display"] = function(state, arg) {
        if (state.bibliography.tokens.length === 2) {
          state.opt.using_display = true;
        }
        this.strings.cls = arg;
      };
      CSL2.Stack = function(val, literal) {
        this.mystack = [];
        if (literal || val) {
          this.mystack.push(val);
        }
        this.tip = this.mystack[0];
      };
      CSL2.Stack.prototype.push = function(val, literal) {
        if (literal || val) {
          this.mystack.push(val);
        } else {
          this.mystack.push("");
        }
        this.tip = this.mystack[this.mystack.length - 1];
      };
      CSL2.Stack.prototype.clear = function() {
        this.mystack = [];
        this.tip = {};
      };
      CSL2.Stack.prototype.replace = function(val, literal) {
        if (this.mystack.length === 0) {
          CSL2.error("Internal CSL processor error: attempt to replace nonexistent stack item with " + val);
        }
        if (literal || val) {
          this.mystack[this.mystack.length - 1] = val;
        } else {
          this.mystack[this.mystack.length - 1] = "";
        }
        this.tip = this.mystack[this.mystack.length - 1];
      };
      CSL2.Stack.prototype.pop = function() {
        var ret = this.mystack.pop();
        if (this.mystack.length) {
          this.tip = this.mystack[this.mystack.length - 1];
        } else {
          this.tip = {};
        }
        return ret;
      };
      CSL2.Stack.prototype.value = function() {
        return this.mystack.slice(-1)[0];
      };
      CSL2.Stack.prototype.length = function() {
        return this.mystack.length;
      };
      CSL2.Parallel = function(state) {
        this.state = state;
      };
      CSL2.Parallel.prototype.StartCitation = function(sortedItems, out) {
        this.state.tmp.suppress_repeats = [];
        if (sortedItems.length < 2)
          return;
        var idxEnd = 0;
        var parallelMatchList = false;
        var siblingRanges = [];
        for (var i = 0, ilen = sortedItems.length - 1; i < ilen; i++) {
          var currItem = sortedItems[i][0];
          var nextItem = sortedItems[i + 1][0];
          var freshMatchList = false;
          var info = {};
          if (sortedItems[i][0].seeAlso && sortedItems[i][0].seeAlso.length > 0 && !parallelMatchList) {
            freshMatchList = true;
            parallelMatchList = [sortedItems[i][0].id].concat(sortedItems[i][0].seeAlso);
            var tempMatchList = parallelMatchList.slice();
            var remainder = sortedItems.slice(i);
            remainder[0][1].parallel = "first";
            for (var j = 0, jlen = remainder.length; j < jlen; j++) {
              var itemID = remainder[j][0].id;
              var ididx = tempMatchList.indexOf(itemID);
              idxEnd = false;
              if (ididx === -1) {
                idxEnd = i + j - 1;
              } else if (i + j === sortedItems.length - 1) {
                idxEnd = i + j;
              }
              if (idxEnd) {
                siblingRanges.push([i, idxEnd]);
                break;
              } else {
                tempMatchList = tempMatchList.slice(0, ididx).concat(tempMatchList.slice(ididx + 1));
              }
            }
          }
          if (i > 0 && freshMatchList) {
            this.state.tmp.suppress_repeats[i - 1].START = true;
            freshMatchList = false;
          }
          for (var varname in this.state.opt.track_repeat) {
            if (!currItem[varname] || !nextItem[varname]) {
              info[varname] = false;
            } else if (typeof nextItem[varname] === "string" || typeof nextItem[varname] === "number") {
              if (varname === "title" && currItem["title-short"] && nextItem["title-short"]) {
                var currVal = currItem["title-short"];
                var nextVal = nextItem["title-short"];
              } else {
                var currVal = currItem[varname];
                var nextVal = nextItem[varname];
              }
              if (currVal == nextVal) {
                info[varname] = true;
              } else {
                info[varname] = false;
              }
            } else if (typeof currItem[varname].length === "undefined") {
              info[varname] = false;
              var currYear = currItem[varname].year;
              var nextYear = nextItem[varname].year;
              if (currYear && nextYear) {
                if (currYear == nextYear) {
                  info[varname] = true;
                }
              }
            } else {
              var currVal = JSON.stringify(currItem[varname]);
              var nextVal = JSON.stringify(nextItem[varname]);
              if (currVal === nextVal) {
                info[varname] = true;
              } else {
                info[varname] = false;
              }
            }
          }
          if (!parallelMatchList) {
            info.ORPHAN = true;
          }
          if (idxEnd === i) {
            info.END = true;
            parallelMatchList = false;
          }
          this.state.tmp.suppress_repeats.push(info);
        }
        for (var j = 0, jlen = siblingRanges.length; j < jlen; j++) {
          var masterID = sortedItems[siblingRanges[j][0]][0].id;
          this.state.registry.registry[masterID].master = true;
          this.state.registry.registry[masterID].siblings = [];
          var start = siblingRanges[j][0];
          var end = siblingRanges[j][1];
          for (var k = start; k < end; k++) {
            this.state.tmp.suppress_repeats[k].SIBLING = true;
            var siblingID = sortedItems[k + 1][0].id;
            sortedItems[k + 1][1].parallel = "other";
            this.state.registry.registry[masterID].siblings.push(siblingID);
          }
        }
      };
      CSL2.Parallel.prototype.checkRepeats = function(params) {
        var idx = this.state.tmp.cite_index;
        if (this.state.tmp.suppress_repeats) {
          if (params.parallel_first && Object.keys(params.parallel_first).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.parallel_first) {
              if (!arr[idx][varname] || arr[idx].START) {
                ret = false;
              }
            }
            return ret;
          }
          if (params.parallel_last && Object.keys(params.parallel_last).length > 0) {
            var arr = this.state.tmp.suppress_repeats.concat([{}]);
            var ret = Object.keys(params.parallel_last).length > 0 ? true : false;
            for (var varname in params.parallel_last) {
              if (!arr[idx][varname] || arr[idx].END) {
                ret = false;
              }
            }
            return ret;
          }
          if (params.non_parallel && Object.keys(params.non_parallel).length > 0) {
            var arr = [{}].concat(this.state.tmp.suppress_repeats);
            var ret = true;
            for (var varname in params.non_parallel) {
              if (!arr[idx][varname]) {
                ret = false;
              }
            }
            return ret;
          }
        }
        return false;
      };
      CSL2.Util = {};
      CSL2.Util.Match = function() {
        this.any = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (result) {
                return true;
              }
            }
            return false;
          };
        };
        this.none = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (result) {
                return false;
              }
            }
            return true;
          };
        };
        this.all = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (!result) {
                return false;
              }
            }
            return true;
          };
        };
        this[void 0] = this.all;
        this.nand = function(token, state, tests) {
          return function(Item, item) {
            for (var i = 0, ilen = tests.length; i < ilen; i += 1) {
              var result = tests[i](Item, item);
              if (!result) {
                return true;
              }
            }
            return false;
          };
        };
      };
      CSL2.Transform = function(state) {
        this.abbrevs = {};
        this.abbrevs["default"] = new state.sys.AbbreviationSegments();
        function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {
          var value = "";
          if (state.sys.getHumanForm) {
            if (variable === "country") {
              value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
              value = value.split("|")[0];
            } else if (variable === "jurisdiction") {
              value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
              if (!quashCountry) {
                value = value.split("|").slice(1).join(", ");
              } else {
                value = "";
              }
            }
          }
          return value;
        }
        function abbreviate(state2, tok, Item, altvar, basevalue, family_var, use_field) {
          var value = "";
          var myabbrev_family = CSL2.FIELD_CATEGORY_REMAP[family_var];
          var preferredJurisdiction;
          if (!myabbrev_family) {
            return basevalue;
          }
          var variable = family_var;
          var normalizedKey = basevalue;
          if (state2.sys.normalizeAbbrevsKey) {
            normalizedKey = state2.sys.normalizeAbbrevsKey(family_var, basevalue);
          }
          var quashCountry = false;
          if (variable === "jurisdiction" && normalizedKey) {
            quashCountry = normalizedKey.indexOf(":") === -1;
          }
          if (["jurisdiction", "country"].indexOf(family_var) > -1 && basevalue === basevalue.toLowerCase()) {
            normalizedKey = basevalue.toUpperCase();
          }
          if (state2.sys.getAbbreviation) {
            if (["jurisdiction", "country", "language-name", "language-name-original"].indexOf(variable) > -1) {
              preferredJurisdiction = "default";
            } else if (Item.jurisdiction) {
              preferredJurisdiction = Item.jurisdiction;
            } else {
              preferredJurisdiction = "default";
            }
            var jurisdiction2 = state2.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.language);
            if (state2.transform.abbrevs[jurisdiction2][myabbrev_family] && normalizedKey) {
              var abbrev = state2.transform.abbrevs[jurisdiction2][myabbrev_family][normalizedKey];
              if (tok.strings.form === "short" && abbrev) {
                if (quashCountry) {
                  value = "";
                } else {
                  value = abbrev;
                }
              } else {
                value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
              }
            }
          }
          if (!value && (!state2.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== "legal_case") && altvar && Item[altvar] && use_field) {
            value = Item[altvar];
          }
          if (!value && !state2.sys.getAbbreviation && state2.sys.getHumanForm) {
            value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
          }
          if (!value && !quashCountry && (!state2.sys.getHumanForm || variable !== "jurisdiction")) {
            value = basevalue;
          }
          if (state2.opt.development_extensions.force_title_abbrev_fallback) {
            if (variable === "title" && value === basevalue && Item["title-short"]) {
              value = Item["title-short"];
            }
          }
          return value;
        }
        function getFieldLocale(Item, field) {
          var ret = state.opt["default-locale"][0].slice(0, 2);
          var localeRex;
          if (state.opt.development_extensions.strict_text_case_locales) {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*| .*)");
          } else {
            localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*|.*)");
          }
          if (Item.language) {
            var m = ("" + Item.language).match(localeRex);
            if (m) {
              ret = m[1];
            } else {
              ret = "tlh";
            }
          }
          if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {
            ret = Item.multi.main[field];
          }
          if (!state.opt.development_extensions.strict_text_case_locales || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {
            ret = ret.toLowerCase();
          }
          return ret;
        }
        function getTextSubField(Item, field, locale_type, use_default, stopOrig, family_var) {
          var opt, o, ret, opts;
          var usedOrig = stopOrig;
          var usingOrig = false;
          if (!Item[field]) {
            return {
              name: "",
              usedOrig: stopOrig,
              token: CSL2.Util.cloneToken(this)
            };
          }
          var stickyLongForm = false;
          if (CSL2.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1 && family_var) {
            field = field + "-short";
            stickyLongForm = true;
          }
          var breakMe = false;
          var firstValue = null;
          var fieldsToTry = [];
          if (field.slice(-6) === "-short") {
            fieldsToTry.push(field);
            fieldsToTry.push(field.slice(0, -6));
          } else {
            fieldsToTry.push(field);
          }
          for (var h = 0, hlen = fieldsToTry.length; h < hlen; h++) {
            var variantMatch = false;
            var field = fieldsToTry[h];
            ret = { name: "", usedOrig: stopOrig, locale: getFieldLocale(Item, field) };
            opts = state.opt[locale_type] ? state.opt[locale_type].slice() : [];
            var hasVal = false;
            if (locale_type === "locale-orig") {
              if (!stopOrig) {
                ret.name = Item[field];
                ret.usedOrig = false;
              }
              hasVal = true;
              usingOrig = true;
            } else if (use_default && (typeof opts === "undefined" || opts.length === 0)) {
              ret.name = Item[field];
              ret.usedOrig = true;
              hasVal = true;
              usingOrig = true;
            }
            if (!hasVal) {
              for (var i = 0, ilen = opts.length; i < ilen; i += 1) {
                opt = opts[i];
                o = opt.split(/[\-_]/)[0];
                if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {
                  ret.name = Item.multi._keys[field][opt];
                  ret.locale = opt;
                  hasVal = true;
                  variantMatch = true;
                  usingOrig = false;
                  break;
                } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {
                  ret.name = Item.multi._keys[field][o];
                  ret.locale = o;
                  hasVal = true;
                  variantMatch = true;
                  usingOrig = false;
                  break;
                }
              }
              if (!ret.name && use_default) {
                ret = { name: Item[field], usedOrig: true, locale: getFieldLocale(Item, field) };
                usingOrig = true;
              }
            }
            ret.token = CSL2.Util.cloneToken(this);
            if (h === 0) {
              if (variantMatch) {
                ret.found_variant_ok = true;
              }
              firstValue = ret;
              if (!stickyLongForm && (typeof opts === "undefined" || opts.length === 0)) {
                breakMe = true;
              }
              if (variantMatch) {
                breakMe = true;
              }
            } else {
              if (!stickyLongForm && !variantMatch && firstValue) {
                ret = firstValue;
                field = fieldsToTry[0];
              } else if (variantMatch) {
                ret.found_variant_ok = true;
              }
            }
            if (["title", "container-title"].indexOf(field) > -1) {
              if (!usedOrig && (!ret.token.strings["text-case"] || ret.token.strings["text-case"] === "sentence" || ret.token.strings["text-case"] === "normal")) {
                var locale = state.opt.lang;
                var lang;
                if (usingOrig) {
                  lang = false;
                } else {
                  lang = ret.locale;
                }
                var seg = field.slice(0, -5);
                var sentenceCase = ret.token.strings["text-case"] === "sentence" ? true : false;
                ret.name = CSL2.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);
                delete ret.token.strings["text-case"];
              }
            }
            if (breakMe) {
              break;
            }
          }
          return ret;
        }
        this.getTextSubField = getTextSubField;
        function loadAbbreviation(jurisdiction2, category, orig, lang) {
          if (!jurisdiction2) {
            jurisdiction2 = "default";
          }
          var country2 = jurisdiction2.split(":")[0];
          var domain = CSL2.getAbbrevsDomain(state, country2, lang);
          if (domain) {
            jurisdiction2 += "@" + domain;
          }
          if (!orig) {
            if (!state.transform.abbrevs[jurisdiction2]) {
              state.transform.abbrevs[jurisdiction2] = new state.sys.AbbreviationSegments();
            }
            if (!state.transform.abbrevs[jurisdiction2][category]) {
              state.transform.abbrevs[jurisdiction2][category] = {};
            }
            return jurisdiction2;
          }
          if (state.sys.getAbbreviation) {
            jurisdiction2 = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction2, category, orig);
            if (!jurisdiction2) {
              jurisdiction2 = "default";
              if (domain) {
                jurisdiction2 += "@" + domain;
              }
            }
          }
          return jurisdiction2;
        }
        this.loadAbbreviation = loadAbbreviation;
        function publisherCheck(tok, Item, primary, family_var) {
          var varname = tok.variables[0];
          if (state.publisherOutput && primary) {
            if (["publisher", "publisher-place"].indexOf(varname) === -1) {
              return false;
            } else {
              state.publisherOutput[varname + "-token"] = tok;
              state.publisherOutput.varlist.push(varname);
              var lst = primary.split(/;\s*/);
              if (lst.length === state.publisherOutput[varname + "-list"].length) {
                state.publisherOutput[varname + "-list"] = lst;
              }
              for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);
              }
              state.tmp[varname + "-token"] = tok;
              return true;
            }
          }
          return false;
        }
        function citeFormCheck(Item, value) {
          var m = value.match(/^#([0-9]+).*>>>/);
          if (m && m[1]) {
            Item["cite-form"] = m[1];
          }
        }
        function quashCheck(jurisdiction2, value) {
          var m = value.match(/^(?:#[0-9]+)*(?:!((?:[-_a-z]+(?:(?:.*)))(?:,(?:[-_a-z]+(?:(?:.*))))*))*>>>/);
          if (m) {
            value = value.slice(m[0].length);
            if (m[1]) {
              var fields = m[1].split(",");
              for (var i = 0, ilen = fields.length; i < ilen; i += 1) {
                var rawField = fields[i];
                var mm = rawField.match(/^([-_a-z]+)(?:\:(.*))*$/);
                var field = mm[1];
                var trimmer = state.tmp.abbrev_trimmer;
                if (mm[2]) {
                  if (trimmer && jurisdiction2) {
                    if (!trimmer[jurisdiction2]) {
                      trimmer[jurisdiction2] = {};
                    }
                    trimmer[jurisdiction2][field] = mm[2];
                  }
                } else if (state.tmp.done_vars.indexOf(field) === -1) {
                  if (trimmer && jurisdiction2) {
                    if (!trimmer.QUASHES[jurisdiction2]) {
                      trimmer.QUASHES[jurisdiction2] = {};
                    }
                    trimmer.QUASHES[jurisdiction2][field] = true;
                  }
                  state.tmp.done_vars.push(field);
                }
              }
            }
          }
          return value;
        }
        this.quashCheck = quashCheck;
        function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {
          var localesets;
          var langPrefs = CSL2.LangPrefsMap[variables[0]];
          if (!langPrefs) {
            localesets = false;
          } else {
            localesets = state.opt["cite-lang-prefs"][langPrefs];
          }
          return function(state2, Item, item) {
            var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;
            if (!variables[0] || !Item[variables[0]] && !Item[alternative_varname]) {
              return null;
            }
            if (!state2.tmp.just_looking && item && item["suppress-author"]) {
              if (!state2.tmp.probably_rendered_something && state2.tmp.can_substitute.length() > 1) {
                return null;
              }
            }
            var slot = { primary: false, secondary: false, tertiary: false };
            if (state2.tmp.area.slice(-5) === "_sort") {
              slot.primary = "locale-sort";
            } else {
              if (localesets && localesets.length === 1 && localesets[0] === "locale-orig") {
                slot.primary = "locale-orig";
                localesets = false;
              } else if (localesets && !state2.tmp.multi_layout) {
                var slotnames = ["primary", "secondary", "tertiary"];
                for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {
                  if (localesets.length - 1 < i) {
                    break;
                  }
                  if (localesets[i]) {
                    slot[slotnames[i]] = "locale-" + localesets[i];
                  }
                }
              } else {
                slot.primary = "locale-orig";
              }
            }
            if (variables[0] === "title-short" || state2.tmp.area !== "bibliography" && !(state2.tmp.area === "citation" && state2.opt.xclass === "note" && item && !item.position)) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            if (state2.tmp.multi_layout) {
              slot.secondary = false;
              slot.tertiary = false;
            }
            if (state2.tmp["publisher-list"]) {
              if (variables[0] === "publisher") {
                state2.tmp["publisher-token"] = this;
              } else if (variables[0] === "publisher-place") {
                state2.tmp["publisher-place-token"] = this;
              }
              return null;
            }
            var oldLangArray = state2.tmp.lang_array.slice();
            var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);
            primary = res.name;
            primary_locale = res.locale;
            var primary_tok = res.token;
            var primaryUsedOrig = res.usedOrig;
            if (family_var && !res.found_variant_ok) {
              primary = abbreviate(state2, primary_tok, Item, alternative_varname, primary, family_var, true);
              if (primary) {
                citeFormCheck(Item, primary);
                if (!state2.tmp.just_looking) {
                  primary = quashCheck(Item.jurisdiction, primary);
                }
              }
            }
            if (publisherCheck(this, Item, primary, family_var)) {
              state2.tmp.lang_array = oldLangArray;
              return null;
            }
            secondary = false;
            tertiary = false;
            var secondary_tok;
            var tertiary_tok;
            if (slot.secondary) {
              res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);
              secondary = res.name;
              secondary_locale = res.locale;
              secondary_tok = res.token;
              if (family_var && !res.found_variant_ok) {
                if (secondary) {
                  secondary = abbreviate(state2, secondary_tok, Item, false, secondary, family_var, true);
                }
              }
            }
            if (slot.tertiary) {
              res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);
              tertiary = res.name;
              tertiary_locale = res.locale;
              tertiary_tok = res.token;
              if (family_var && !res.found_variant_ok) {
                if (tertiary) {
                  tertiary = abbreviate(state2, tertiary_tok, Item, false, tertiary, family_var, true);
                }
              }
            }
            var primaryPrefix;
            if (slot.primary === "locale-translit") {
              primaryPrefix = state2.opt.citeAffixes[langPrefs][slot.primary].prefix;
            }
            if (primaryPrefix === "<i>" && variables[0] === "title" && !primaryUsedOrig) {
              var hasItalic = false;
              for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                if (primary_tok.decorations[i][0] === "@font-style" && primary_tok.decorations[i][1] === "italic") {
                  hasItalic = true;
                }
              }
              if (!hasItalic) {
                primary_tok.decorations.push(["@font-style", "italic"]);
              }
            }
            if (primary_locale !== "en" && primary_tok.strings["text-case"] === "title") {
              primary_tok.strings["text-case"] = "passthrough";
            }
            if (variables[0] === "title") {
              primary = CSL2.demoteNoiseWords(state2, primary, this["leading-noise-words"]);
            }
            if (secondary || tertiary) {
              state2.output.openLevel("empty");
              primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/, "");
              if (primary_locale) {
                state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
              }
              CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
              state2.output.append(primary, primary_tok);
              state2.tmp.probably_rendered_something = true;
              if (primary === secondary) {
                secondary = false;
              }
              if (secondary) {
                secondary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.secondary].prefix;
                secondary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.secondary].suffix;
                if (!secondary_tok.strings.prefix) {
                  secondary_tok.strings.prefix = " ";
                }
                for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {
                  if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(secondary_tok.decorations[i].join("/")) > -1) {
                    secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));
                  }
                }
                if (secondary_locale !== "en" && secondary_tok.strings["text-case"] === "title") {
                  secondary_tok.strings["text-case"] = "passthrough";
                }
                if (secondary_locale) {
                  state2.tmp.lang_array = [secondary_locale].concat(oldLangArray);
                }
                var secondary_outer = new CSL2.Token();
                secondary_outer.decorations.push(["@font-style", "normal"]);
                secondary_outer.decorations.push(["@font-weight", "normal"]);
                state2.output.openLevel(secondary_outer);
                state2.output.append(secondary, secondary_tok);
                state2.output.closeLevel();
                var blob_obj = state2.output.current.value();
                var blobs_pos = state2.output.current.value().blobs.length - 1;
              }
              if (primary === tertiary) {
                tertiary = false;
              }
              if (tertiary) {
                tertiary_tok.strings.prefix = state2.opt.citeAffixes[langPrefs][slot.tertiary].prefix;
                tertiary_tok.strings.suffix = state2.opt.citeAffixes[langPrefs][slot.tertiary].suffix;
                if (!tertiary_tok.strings.prefix) {
                  tertiary_tok.strings.prefix = " ";
                }
                for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {
                  if (["@quotes/true", "@font-style/italic", "@font-style/oblique", "@font-weight/bold"].indexOf(tertiary_tok.decorations[i].join("/")) > -1) {
                    tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));
                  }
                }
                if (tertiary_locale !== "en" && tertiary_tok.strings["text-case"] === "title") {
                  tertiary_tok.strings["text-case"] = "passthrough";
                }
                if (tertiary_locale) {
                  state2.tmp.lang_array = [tertiary_locale].concat(oldLangArray);
                }
                var tertiary_outer = new CSL2.Token();
                tertiary_outer.decorations.push(["@font-style", "normal"]);
                tertiary_outer.decorations.push(["@font-weight", "normal"]);
                state2.output.openLevel(tertiary_outer);
                state2.output.append(tertiary, tertiary_tok);
                state2.output.closeLevel();
                var blob_obj = state2.output.current.value();
                var blobs_pos = state2.output.current.value().blobs.length - 1;
              }
              state2.output.closeLevel();
            } else {
              if (primary_locale) {
                state2.tmp.lang_array = [primary_locale].concat(oldLangArray);
              }
              CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state2, null, null, primary_tok, primary_tok.strings.prefix + primary);
              state2.output.append(primary, primary_tok);
              state2.tmp.probably_rendered_something = true;
            }
            state2.tmp.lang_array = oldLangArray;
            if (state2.tmp.can_block_substitute) {
              state2.tmp.name_node.children.push(state2.output.current.value());
            }
            return null;
          };
        }
        this.getOutputFunction = getOutputFunction;
      };
      CSL2.Token = function(name, tokentype, conditional) {
        this.name = name;
        this.strings = {};
        this.strings.delimiter = void 0;
        this.strings.prefix = "";
        this.strings.suffix = "";
        this.decorations = [];
        this.variables = [];
        this.execs = [];
        this.tokentype = tokentype;
      };
      CSL2.Util.cloneToken = function(token) {
        var newtok, key, pos, len;
        if (typeof token === "string") {
          return token;
        }
        newtok = new CSL2.Token(token.name, token.tokentype);
        for (var key in token.strings) {
          if (token.strings.hasOwnProperty(key)) {
            newtok.strings[key] = token.strings[key];
          }
        }
        if (token.decorations) {
          newtok.decorations = [];
          for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {
            newtok.decorations.push(token.decorations[pos].slice());
          }
        }
        if (token.variables) {
          newtok.variables = token.variables.slice();
        }
        if (token.execs) {
          newtok.execs = token.execs.slice();
          if (token.tests) {
            newtok.tests = token.tests.slice();
          }
        }
        return newtok;
      };
      CSL2.AmbigConfig = function() {
        this.maxvals = [];
        this.minval = 1;
        this.names = [];
        this.givens = [];
        this.year_suffix = false;
        this.disambiguate = 0;
      };
      CSL2.Blob = function(str, token, levelname) {
        var len, pos, key;
        this.levelname = levelname;
        if (token) {
          this.strings = { "prefix": "", "suffix": "" };
          for (var key in token.strings) {
            if (token.strings.hasOwnProperty(key)) {
              this.strings[key] = token.strings[key];
            }
          }
          this.decorations = [];
          if (token.decorations === void 0) {
            len = 0;
          } else {
            len = token.decorations.length;
          }
          for (pos = 0; pos < len; pos += 1) {
            this.decorations.push(token.decorations[pos].slice());
          }
        } else {
          this.strings = {};
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.strings.delimiter = "";
          this.decorations = [];
        }
        if (typeof str === "string") {
          this.blobs = str;
        } else if (str) {
          this.blobs = [str];
        } else {
          this.blobs = [];
        }
        this.alldecor = [this.decorations];
      };
      CSL2.Blob.prototype.push = function(blob) {
        if (typeof this.blobs === "string") {
          CSL2.error("Attempt to push blob onto string object");
        } else if (blob !== false) {
          blob.alldecor = blob.alldecor.concat(this.alldecor);
          this.blobs.push(blob);
        }
      };
      CSL2.NumericBlob = function(state, particle, num, mother_token, id) {
        this.id = id;
        this.alldecor = [];
        this.num = num;
        this.particle = particle;
        this.blobs = num.toString();
        this.status = CSL2.START;
        this.strings = {};
        if (mother_token) {
          if (mother_token.strings["text-case"]) {
            var textCase = mother_token.strings["text-case"];
            this.particle = CSL2.Output.Formatters[textCase](state, this.particle);
            this.blobs = CSL2.Output.Formatters[textCase](state, this.blobs);
          }
          this.gender = mother_token.gender;
          this.decorations = mother_token.decorations;
          this.strings.prefix = mother_token.strings.prefix;
          this.strings.suffix = mother_token.strings.suffix;
          this.strings["text-case"] = mother_token.strings["text-case"];
          this.successor_prefix = mother_token.successor_prefix;
          this.range_prefix = mother_token.range_prefix;
          this.splice_prefix = mother_token.splice_prefix;
          this.formatter = mother_token.formatter;
          if (!this.formatter) {
            this.formatter = new CSL2.Output.DefaultFormatter();
          }
          if (this.formatter) {
            this.type = this.formatter.format(1);
          }
        } else {
          this.decorations = [];
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.successor_prefix = "";
          this.range_prefix = "";
          this.splice_prefix = "";
          this.formatter = new CSL2.Output.DefaultFormatter();
        }
      };
      CSL2.NumericBlob.prototype.setFormatter = function(formatter) {
        this.formatter = formatter;
        this.type = this.formatter.format(1);
      };
      CSL2.Output.DefaultFormatter = function() {
      };
      CSL2.Output.DefaultFormatter.prototype.format = function(num) {
        return num.toString();
      };
      CSL2.NumericBlob.prototype.checkNext = function(next, start) {
        if (start) {
          this.status = CSL2.START;
          if (typeof next === "object") {
            if (next.num === this.num + 1) {
              next.status = CSL2.SUCCESSOR;
            } else {
              next.status = CSL2.SEEN;
            }
          }
        } else if (!next || !next.num || this.type !== next.type || next.num !== this.num + 1) {
          if (this.status === CSL2.SUCCESSOR_OF_SUCCESSOR) {
            this.status = CSL2.END;
          }
          if (typeof next === "object") {
            next.status = CSL2.SEEN;
          }
        } else {
          if (this.status === CSL2.START || this.status === CSL2.SEEN) {
            next.status = CSL2.SUCCESSOR;
          } else if (this.status === CSL2.SUCCESSOR || this.status === CSL2.SUCCESSOR_OF_SUCCESSOR) {
            if (this.range_prefix) {
              next.status = CSL2.SUCCESSOR_OF_SUCCESSOR;
              this.status = CSL2.SUPPRESS;
            } else {
              next.status = CSL2.SUCCESSOR;
            }
          }
        }
      };
      CSL2.NumericBlob.prototype.checkLast = function(last) {
        if (this.status === CSL2.SEEN || last.num !== this.num - 1 && this.status === CSL2.SUCCESSOR) {
          this.status = CSL2.SUCCESSOR;
          return true;
        }
        return false;
      };
      CSL2.Util.fixDateNode = function(parent, pos, node) {
        var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children, subchildren, display, cslid;
        var lingo = this.cslXml.getAttributeValue(node, "lingo");
        var default_locale = this.cslXml.getAttributeValue(node, "default-locale");
        this.build.date_key = true;
        form = this.cslXml.getAttributeValue(node, "form");
        var lingo;
        if (default_locale) {
          lingo = this.opt["default-locale"][0];
        } else {
          lingo = this.cslXml.getAttributeValue(node, "lingo");
        }
        if (!this.getDate(form, default_locale)) {
          return parent;
        }
        var dateparts = this.cslXml.getAttributeValue(node, "date-parts");
        variable = this.cslXml.getAttributeValue(node, "variable");
        prefix = this.cslXml.getAttributeValue(node, "prefix");
        suffix = this.cslXml.getAttributeValue(node, "suffix");
        display = this.cslXml.getAttributeValue(node, "display");
        cslid = this.cslXml.getAttributeValue(node, "cslid");
        datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));
        this.cslXml.setAttribute(datexml, "lingo", this.opt.lang);
        this.cslXml.setAttribute(datexml, "form", form);
        this.cslXml.setAttribute(datexml, "date-parts", dateparts);
        this.cslXml.setAttribute(datexml, "cslid", cslid);
        this.cslXml.setAttribute(datexml, "variable", variable);
        this.cslXml.setAttribute(datexml, "default-locale", default_locale);
        if (prefix) {
          this.cslXml.setAttribute(datexml, "prefix", prefix);
        }
        if (suffix) {
          this.cslXml.setAttribute(datexml, "suffix", suffix);
        }
        if (display) {
          this.cslXml.setAttribute(datexml, "display", display);
        }
        children = this.cslXml.children(datexml);
        for (var key in children) {
          subnode = children[key];
          if (this.cslXml.nodename(subnode) === "date-part") {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            if (default_locale) {
              this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, "@default-locale", "true");
            }
          }
        }
        children = this.cslXml.children(node);
        for (var key in children) {
          subnode = children[key];
          if (this.cslXml.nodename(subnode) === "date-part") {
            partname = this.cslXml.getAttributeValue(subnode, "name");
            subchildren = this.cslXml.attributes(subnode);
            for (attr in subchildren) {
              if (attr === "@name") {
                continue;
              }
              if (lingo && lingo !== this.opt.lang) {
                if (["@suffix", "@prefix", "@form"].indexOf(attr) > -1) {
                  continue;
                }
              }
              val = subchildren[attr];
              this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, attr, val);
            }
          }
        }
        if (this.cslXml.getAttributeValue(node, "date-parts") === "year") {
          this.cslXml.deleteNodeByNameAttribute(datexml, "month");
          this.cslXml.deleteNodeByNameAttribute(datexml, "day");
        } else if (this.cslXml.getAttributeValue(node, "date-parts") === "year-month") {
          this.cslXml.deleteNodeByNameAttribute(datexml, "day");
        } else if (this.cslXml.getAttributeValue(node, "date-parts") === "month-day") {
          var childNodes = this.cslXml.children(datexml);
          for (var i = 1, ilen = this.cslXml.numberofnodes(childNodes); i < ilen; i++) {
            if (this.cslXml.getAttributeValue(childNodes[i], "name") === "year") {
              this.cslXml.setAttribute(childNodes[i - 1], "suffix", "");
              break;
            }
          }
          this.cslXml.deleteNodeByNameAttribute(datexml, "year");
        }
        return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);
      };
      CSL2.dateMacroAsSortKey = function(state, Item) {
        CSL2.dateAsSortKey.call(this, state, Item, true);
      };
      CSL2.dateAsSortKey = function(state, Item, isMacro) {
        var dp, elem, value, e, yr, prefix, i, ilen;
        var variable = this.variables[0];
        var macroFlag = "empty";
        if (isMacro && state.tmp.extension) {
          macroFlag = "macro-with-date";
        }
        dp = Item[variable];
        if (typeof dp === "undefined") {
          dp = { "date-parts": [[0]] };
        }
        if (typeof this.dateparts === "undefined") {
          this.dateparts = ["year", "month", "day"];
        }
        if (dp.raw) {
          dp = state.fun.dateparser.parseDateToArray(dp.raw);
        } else if (dp["date-parts"]) {
          dp = state.dateParseArray(dp);
        }
        if (typeof dp === "undefined") {
          dp = {};
        }
        if (dp.year) {
          for (i = 0, ilen = CSL2.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {
            elem = CSL2.DATE_PARTS_INTERNAL[i];
            value = 0;
            e = elem;
            if (e.slice(-4) === "_end") {
              e = e.slice(0, -4);
            }
            if (dp[elem] && this.dateparts.indexOf(e) > -1) {
              value = dp[elem];
            }
            if (elem.slice(0, 4) === "year") {
              yr = CSL2.Util.Dates[e].numeric(state, value);
              var prefix = "1";
              if (yr[0] === "-") {
                prefix = "0";
                yr = yr.slice(1);
                yr = 9999 - parseInt(yr, 10);
              }
              state.output.append(CSL2.Util.Dates[elem.slice(0, 4)].numeric(state, prefix + yr), macroFlag);
            } else {
              value = CSL2.Util.Dates[e]["numeric-leading-zeros"](state, value);
              if (!value) {
                value = "00";
              }
              state.output.append(value, macroFlag);
            }
          }
        }
      };
      CSL2.Engine.prototype.dateParseArray = function(date_obj) {
        var ret, field, dp, exts;
        ret = {};
        for (field in date_obj) {
          if (field === "date-parts") {
            dp = date_obj["date-parts"];
            if (dp.length > 1) {
              if (dp[0].length !== dp[1].length) {
                CSL2.error("CSL data error: element mismatch in date range input.");
              }
            }
            exts = ["", "_end"];
            for (var i = 0, ilen = dp.length; i < ilen; i += 1) {
              for (var j = 0, jlen = CSL2.DATE_PARTS.length; j < jlen; j += 1) {
                if (isNaN(parseInt(dp[i][j], 10))) {
                  ret[CSL2.DATE_PARTS[j] + exts[i]] = void 0;
                } else {
                  ret[CSL2.DATE_PARTS[j] + exts[i]] = parseInt(dp[i][j], 10);
                }
              }
            }
          } else if (date_obj.hasOwnProperty(field)) {
            if (field === "literal" && typeof date_obj.literal === "object" && typeof date_obj.literal.part === "string") {
              CSL2.debug("Warning: fixing up weird literal date value");
              ret.literal = date_obj.literal.part;
            } else {
              ret[field] = date_obj[field];
            }
          }
        }
        return ret;
      };
      CSL2.Util.Names = {};
      CSL2.Util.Names.compareNamesets = CSL2.NameOutput.prototype._compareNamesets;
      CSL2.Util.Names.unInitialize = function(state, name) {
        var i, ilen, namelist, punctlist, ret;
        if (!name) {
          return "";
        }
        namelist = name.split(/(?:\-|\s+)/);
        punctlist = name.match(/(\-|\s+)/g);
        ret = "";
        for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          ret += namelist[i];
          if (i < ilen - 1) {
            ret += punctlist[i];
          }
        }
        return ret;
      };
      CSL2.Util.Names.initializeWith = function(state, name, terminator, normalizeOnly) {
        var i, ilen, mm, lst, ret;
        if (!name) {
          return "";
        }
        if (!terminator) {
          terminator = "";
        }
        if (["Lord", "Lady"].indexOf(name) > -1 || !name.replace(/^(?:<[^>]+>)*/, "").match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) && !terminator.match("%s")) {
          return name;
        }
        if (state.opt["initialize-with-hyphen"] === false) {
          name = name.replace(/\-/g, " ");
        }
        name = name.replace(/\s*\-\s*/g, "-").replace(/\s+/g, " ");
        name = name.replace(/-([a-z])/g, "\u2013$1");
        for (var i = name.length - 2; i > -1; i += -1) {
          if (name.slice(i, i + 1) === "." && name.slice(i + 1, i + 2) !== " ") {
            name = name.slice(0, i) + ". " + name.slice(i + 1);
          }
        }
        var nameSplits = CSL2.Output.Formatters.nameDoppel.split(name);
        var namelist = [];
        namelist = [nameSplits.strings[0]];
        if (nameSplits.tags.length === 0) {
          var mmm = namelist[0].match(/[^\.]+$/);
          if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {
            namelist[0] += ".";
          }
        }
        for (i = 1, ilen = nameSplits.strings.length; i < ilen; i += 1) {
          namelist.push(nameSplits.tags[i - 1]);
          namelist.push(nameSplits.strings[i]);
        }
        if (normalizeOnly) {
          ret = this.doNormalize(state, namelist, terminator);
        } else {
          ret = this.doInitialize(state, namelist, terminator);
        }
        ret = ret.replace(/\u2013([a-z])/g, "-$1");
        return ret;
      };
      CSL2.Util.Names.notag = function(str) {
        return str.replace(/^(?:<[^>]+>)*/, "");
      };
      CSL2.Util.Names.mergetag = function(state, tagstr, newstr) {
        var m = tagstr.match(/(?:-*<[^>]+>-*)/g);
        if (!m) {
          return newstr;
        } else {
          tagstr = m.join("");
        }
        m = newstr.match(/^(.*[^\s])*(\s+)$/);
        if (m) {
          m[1] = m[1] ? m[1] : "";
          newstr = m[1] + tagstr + m[2];
        } else {
          newstr = newstr + tagstr;
        }
        return newstr;
      };
      CSL2.Util.Names.tagonly = function(state, str) {
        var m = str.match(/(?:<[^>]+>)+/);
        if (!m) {
          return str;
        } else {
          return m.join("");
        }
      };
      CSL2.Util.Names.doNormalize = function(state, namelist, terminator) {
        var i, ilen;
        terminator = terminator ? terminator : "";
        var isAbbrev = [];
        for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          if (this.notag(namelist[i]).length > 1 && this.notag(namelist[i]).slice(-1) === ".") {
            namelist[i] = namelist[i].replace(/^(.*)\.(.*)$/, "$1$2");
            isAbbrev.push(true);
          } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {
            isAbbrev.push(true);
          } else {
            isAbbrev.push(false);
          }
        }
        for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          if (isAbbrev[i]) {
            if (i < namelist.length - 2) {
              namelist[i + 1] = this.tagonly(state, namelist[i + 1]);
              if (!isAbbrev[i + 2]) {
                namelist[i + 1] = this.tagonly(state, namelist[i + 1]) + " ";
              }
              if (namelist[i + 2].length > 1) {
                namelist[i + 1] = terminator.replace(/\ufeff$/, "") + namelist[i + 1];
              } else {
                namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
              }
            }
            if (i === namelist.length - 1) {
              namelist[i] = namelist[i] + terminator;
            }
          }
        }
        return namelist.join("").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
      };
      CSL2.Util.Names.doInitialize = function(state, namelist, terminator) {
        var i, ilen, m, j, jlen, lst, n;
        for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          n = namelist[i];
          if (!n) {
            continue;
          }
          m = n.match(CSL2.NAME_INITIAL_REGEXP);
          if (!m && (!n.match(CSL2.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match("%s"))) {
            m = n.match(/(.)(.*)/);
          }
          if (m && m[2] && m[3]) {
            m[1] = m[1] + m[2];
            m[2] = "";
          }
          if (m && m[1].slice(0, 1) === m[1].slice(0, 1).toUpperCase()) {
            var extra = "";
            if (m[2]) {
              var s = "";
              lst = m[2].split("");
              for (j = 0, jlen = lst.length; j < jlen; j += 1) {
                var c = lst[j];
                if (c === c.toUpperCase()) {
                  s += c;
                } else {
                  break;
                }
              }
              if (s.length < m[2].length) {
                extra = CSL2.toLocaleLowerCase.call(state, s);
              }
            }
            namelist[i] = m[1] + extra;
            if (i < ilen - 1) {
              if (terminator.match("%s")) {
                namelist[i] = terminator.replace("%s", namelist[i]);
              } else {
                if (namelist[i + 1].indexOf("-") > -1) {
                  namelist[i + 1] = this.mergetag(state, namelist[i + 1].replace("-", ""), terminator) + "-";
                } else {
                  namelist[i + 1] = this.mergetag(state, namelist[i + 1], terminator);
                }
              }
            } else {
              if (terminator.match("%s")) {
                namelist[i] = terminator.replace("%s", namelist[i]);
              } else {
                namelist.push(terminator);
              }
            }
          } else if (n.match(CSL2.ROMANESQUE_REGEXP) && (!m || !m[3])) {
            namelist[i] = " " + n;
          }
        }
        var ret = namelist.join("");
        ret = ret.replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/, "").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
        return ret;
      };
      CSL2.Util.Names.getRawName = function(name) {
        var ret = [];
        if (name.literal) {
          ret.push(name.literal);
        } else {
          if (name.given) {
            ret.push(name.given);
          }
          if (name.family) {
            ret.push(name.family);
          }
        }
        return ret.join(" ");
      };
      CSL2.Util.Dates = {};
      CSL2.Util.Dates.year = {};
      CSL2.Util.Dates.year["long"] = function(state, num) {
        if (!num) {
          if (typeof num === "boolean") {
            num = "";
          } else {
            num = 0;
          }
        }
        return num.toString();
      };
      CSL2.Util.Dates.year.imperial = function(state, num, end) {
        var year = "";
        if (!num) {
          if (typeof num === "boolean") {
            num = "";
          } else {
            num = 0;
          }
        }
        end = end ? "_end" : "";
        var month = state.tmp.date_object["month" + end];
        month = month ? "" + month : "1";
        while (month.length < 2) {
          month = "0" + month;
        }
        var day = state.tmp.date_object["day" + end];
        day = day ? "" + day : "1";
        while (day.length < 2) {
          day = "0" + day;
        }
        var date2 = parseInt(num + month + day, 10);
        var label2;
        var offset;
        if (date2 >= 18680908 && date2 < 19120730) {
          label2 = "\u660E\u6CBB";
          offset = 1867;
        } else if (date2 >= 19120730 && date2 < 19261225) {
          label2 = "\u5927\u6B63";
          offset = 1911;
        } else if (date2 >= 19261225 && date2 < 19890108) {
          label2 = "\u662D\u548C";
          offset = 1925;
        } else if (date2 >= 19890108) {
          label2 = "\u5E73\u6210";
          offset = 1988;
        }
        if (label2 && offset) {
          var normalizedKey = label2;
          if (state.sys.normalizeAbbrevsKey) {
            normalizedKey = state.sys.normalizeAbbrevsKey("number", label2);
          }
          if (!state.transform.abbrevs["default"]["number"][normalizedKey]) {
            state.transform.loadAbbreviation("default", "number", normalizedKey, null);
          }
          if (state.transform.abbrevs["default"]["number"][normalizedKey]) {
            label2 = state.transform.abbrevs["default"]["number"][normalizedKey];
          }
          year = label2 + (num - offset);
        }
        return year;
      };
      CSL2.Util.Dates.year["short"] = function(state, num) {
        num = num.toString();
        if (num && num.length === 4) {
          return num.substr(2);
        }
      };
      CSL2.Util.Dates.year.numeric = function(state, num) {
        var m, pre;
        num = "" + num;
        var m = num.match(/([0-9]*)$/);
        if (m) {
          pre = num.slice(0, m[1].length * -1);
          num = m[1];
        } else {
          pre = num;
          num = "";
        }
        while (num.length < 4) {
          num = "0" + num;
        }
        return pre + num;
      };
      CSL2.Util.Dates.normalizeMonth = function(num, useSeason) {
        var ret;
        if (!num) {
          num = 0;
        }
        num = "" + num;
        if (!num.match(/^[0-9]+$/)) {
          num = 0;
        }
        num = parseInt(num, 10);
        if (useSeason) {
          var res = { stub: "month-", num };
          if (res.num < 1 || res.num > 24) {
            res.num = 0;
          } else {
            while (res.num > 16) {
              res.num = res.num - 4;
            }
            if (res.num > 12) {
              res.stub = "season-";
              res.num = res.num - 12;
            }
          }
          ret = res;
        } else {
          if (num < 1 || num > 12) {
            num = 0;
          }
          ret = num;
        }
        return ret;
      };
      CSL2.Util.Dates.month = {};
      CSL2.Util.Dates.month.numeric = function(state, num) {
        var num = CSL2.Util.Dates.normalizeMonth(num);
        if (!num) {
          num = "";
        }
        return num;
      };
      CSL2.Util.Dates.month["numeric-leading-zeros"] = function(state, num) {
        var num = CSL2.Util.Dates.normalizeMonth(num);
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
        }
        return num;
      };
      CSL2.Util.Dates.month["long"] = function(state, num, gender, forceDefaultLocale) {
        var res = CSL2.Util.Dates.normalizeMonth(num, true);
        var num = res.num;
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "long", 0, 0, false, forceDefaultLocale);
        }
        return num;
      };
      CSL2.Util.Dates.month["short"] = function(state, num, gender, forceDefaultLocale) {
        var res = CSL2.Util.Dates.normalizeMonth(num, true);
        var num = res.num;
        if (!num) {
          num = "";
        } else {
          num = "" + num;
          while (num.length < 2) {
            num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "short", 0, 0, false, forceDefaultLocale);
        }
        return num;
      };
      CSL2.Util.Dates.day = {};
      CSL2.Util.Dates.day.numeric = function(state, num) {
        return num.toString();
      };
      CSL2.Util.Dates.day["long"] = CSL2.Util.Dates.day.numeric;
      CSL2.Util.Dates.day["numeric-leading-zeros"] = function(state, num) {
        if (!num) {
          num = 0;
        }
        num = num.toString();
        while (num.length < 2) {
          num = "0" + num;
        }
        return num.toString();
      };
      CSL2.Util.Dates.day.ordinal = function(state, num, gender) {
        return state.fun.ordinalizer.format(num, gender);
      };
      CSL2.Util.Sort = {};
      CSL2.Util.Sort.strip_prepositions = function(str) {
        var m;
        if (typeof str === "string") {
          m = str.match(/^(([aA]|[aA][nN]|[tT][hH][eE])\s+)/);
        }
        if (m) {
          str = str.substr(m[1].length);
        }
        return str;
      };
      CSL2.Util.substituteStart = function(state, target) {
        var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;
        func = function(state2, Item, item) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
              state2.tmp.strip_periods += 1;
              break;
            }
          }
        };
        this.execs.push(func);
        if (this.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
          this.decorations.reverse();
          this.decorations.push(["@showid", "true", this.cslid]);
          this.decorations.reverse();
        }
        nodetypes = ["number", "date", "names"];
        if (this.name === "text" && !this.postponed_macro || nodetypes.indexOf(this.name) > -1) {
          element_trace = function(state2, Item, item) {
            if (state2.tmp.element_trace.value() === "author" || this.name === "names") {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (!state2.tmp.probably_rendered_something) {
                } else {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
              if (!state2.tmp.just_looking && item && item["suppress-author"]) {
                if (!state2.tmp.probably_rendered_something) {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
            } else if (this.name === "date") {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (state2.tmp.probably_rendered_something) {
                  state2.tmp.element_trace.push("suppress-me");
                }
              }
            } else {
              if (!state2.tmp.just_looking && item && item["author-only"] && state2.tmp.area !== "intext") {
                if (!state2.tmp.probably_rendered_something && state2.tmp.can_block_substitute) {
                } else {
                  state2.tmp.element_trace.push("suppress-me");
                }
              } else if (item && item["suppress-author"]) {
                state2.tmp.element_trace.push("do-not-suppress-me");
              }
            }
          };
          this.execs.push(element_trace);
        }
        display = this.strings.cls;
        this.strings.cls = false;
        if (state.build.render_nesting_level === 0) {
          if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first = new CSL2.Token("group", CSL2.START);
            bib_first.decorations = [["@display", "left-margin"]];
            func = function(state2, Item) {
              if (!state2.tmp.render_seen) {
                bib_first.strings.first_blob = Item.id;
                state2.output.startTag("bib_first", bib_first);
              }
            };
            bib_first.execs.push(func);
            target.push(bib_first);
          } else if (CSL2.DISPLAY_CLASSES.indexOf(display) > -1) {
            bib_first = new CSL2.Token("group", CSL2.START);
            bib_first.decorations = [["@display", display]];
            func = function(state2, Item) {
              bib_first.strings.first_blob = Item.id;
              state2.output.startTag("bib_first", bib_first);
            };
            bib_first.execs.push(func);
            target.push(bib_first);
          }
          state.build.cls = display;
        }
        state.build.render_nesting_level += 1;
        if (state.build.substitute_level.value() === 1) {
          choose_start = new CSL2.Token("choose", CSL2.START);
          CSL2.Node.choose.build.call(choose_start, state, target);
          if_start = new CSL2.Token("if", CSL2.START);
          func = function() {
            if (state.tmp.can_substitute.value()) {
              return true;
            }
            return false;
          };
          if_start.tests ? {} : if_start.tests = [];
          if_start.tests.push(func);
          if_start.test = state.fun.match.any(this, state, if_start.tests);
          target.push(if_start);
        }
        if (state.sys.variableWrapper && this.variables_real && this.variables_real.length) {
          func = function(state2, Item, item) {
            if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
              var variable_entry = new CSL2.Token("text", CSL2.START);
              variable_entry.decorations = [["@showid", "true"]];
              state2.output.startTag("variable_entry", variable_entry);
              var position = null;
              if (item) {
                position = item.position;
              }
              if (!position) {
                position = 0;
              }
              var positionMap = [
                "first",
                "container-subsequent",
                "subsequent",
                "ibid",
                "ibid-with-locator"
              ];
              var noteNumber = 0;
              if (item && item.noteIndex) {
                noteNumber = item.noteIndex;
              }
              var firstReferenceNoteNumber = 0;
              if (item && item["first-reference-note-number"]) {
                firstReferenceNoteNumber = item["first-reference-note-number"];
              }
              var firstContainerReferenceNoteNumber = 0;
              if (item && item["first-container-reference-note-number"]) {
                firstContainerReferenceNoteNumber = item["first-container-reference-note-number"];
              }
              var citationNumber = 0;
              if (item && item["citation-number"]) {
                citationNumber = item["citation-number"];
              }
              var index = 0;
              if (item && item.index) {
                index = item.index;
              }
              var params = {
                itemData: Item,
                variableNames: this.variables,
                context: state2.tmp.area,
                xclass: state2.opt.xclass,
                position: positionMap[position],
                "note-number": noteNumber,
                "first-reference-note-number": firstReferenceNoteNumber,
                "first-container-reference-note-number": firstContainerReferenceNoteNumber,
                "citation-number": citationNumber,
                "index": index,
                "mode": state2.opt.mode
              };
              state2.output.current.value().params = params;
            }
          };
          this.execs.push(func);
        }
      };
      CSL2.Util.substituteEnd = function(state, target) {
        var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;
        if (state.sys.variableWrapper && (this.hasVariable || this.variables_real && this.variables_real.length)) {
          func = function(state2) {
            if (!state2.tmp.just_looking && !state2.tmp.suppress_decorations) {
              state2.output.endTag("variable_entry");
            }
          };
          this.execs.push(func);
        }
        func = function(state2) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
            if (this.decorations[i][0] === "@strip-periods" && this.decorations[i][1] === "true") {
              state2.tmp.strip_periods += -1;
              break;
            }
          }
        };
        this.execs.push(func);
        state.build.render_nesting_level += -1;
        if (state.build.render_nesting_level === 0) {
          if (state.build.cls) {
            func = function(state2) {
              state2.output.endTag("bib_first");
            };
            this.execs.push(func);
            state.build.cls = false;
          } else if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
            bib_first_end = new CSL2.Token("group", CSL2.END);
            func = function(state2) {
              if (!state2.tmp.render_seen) {
                state2.output.endTag("bib_first");
              }
            };
            bib_first_end.execs.push(func);
            target.push(bib_first_end);
            bib_other = new CSL2.Token("group", CSL2.START);
            bib_other.decorations = [["@display", "right-inline"]];
            func = function(state2) {
              if (!state2.tmp.render_seen) {
                state2.tmp.render_seen = true;
                state2.output.startTag("bib_other", bib_other);
              }
            };
            bib_other.execs.push(func);
            target.push(bib_other);
          }
        }
        if (state.build.substitute_level.value() === 1) {
          if_end = new CSL2.Token("if", CSL2.END);
          target.push(if_end);
          choose_end = new CSL2.Token("choose", CSL2.END);
          CSL2.Node.choose.build.call(choose_end, state, target);
        }
        if (this.name === "names" || this.name === "text" && this.variables_real !== "title") {
          author_substitute = new CSL2.Token("text", CSL2.SINGLETON);
          var substitution_name = this.name;
          func = function(state2, Item) {
            if (state2.tmp.area !== "bibliography") {
              return;
            }
            if (typeof state2.bibliography.opt["subsequent-author-substitute"] !== "string") {
              return;
            }
            if (this.variables_real && !Item[this.variables_real]) {
              return;
            }
            if (this.variables_real && substitution_name === "names") {
              return;
            }
            var subrule = state2.bibliography.opt["subsequent-author-substitute-rule"];
            var i, ilen;
            var printing = !state2.tmp.suppress_decorations;
            if (printing && state2.tmp.subsequent_author_substitute_ok) {
              if (state2.tmp.rendered_name) {
                if (subrule === "partial-each" || subrule === "partial-first") {
                  var dosub = true;
                  var rendered_name = [];
                  for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                    var name = state2.tmp.rendered_name[i];
                    if (dosub && state2.tmp.last_rendered_name && state2.tmp.last_rendered_name.length > i - 1 && name && !name.localeCompare(state2.tmp.last_rendered_name[i])) {
                      str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      state2.tmp.name_node.children[i].blobs = [str];
                      if (subrule === "partial-first") {
                        dosub = false;
                      }
                    } else {
                      dosub = false;
                    }
                    rendered_name.push(name);
                  }
                  state2.tmp.last_rendered_name = rendered_name;
                } else if (subrule === "complete-each") {
                  var rendered_name = state2.tmp.rendered_name.join(",");
                  if (rendered_name) {
                    if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                      for (i = 0, ilen = state2.tmp.name_node.children.length; i < ilen; i += 1) {
                        str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                        state2.tmp.name_node.children[i].blobs = [str];
                      }
                    }
                    state2.tmp.last_rendered_name = rendered_name;
                  }
                } else {
                  var rendered_name = state2.tmp.rendered_name.join(",");
                  if (rendered_name) {
                    if (state2.tmp.last_rendered_name && !rendered_name.localeCompare(state2.tmp.last_rendered_name)) {
                      str = new CSL2.Blob(state2[state2.tmp.area].opt["subsequent-author-substitute"]);
                      if (state2.tmp.label_blob) {
                        state2.tmp.name_node.top.blobs = [str, state2.tmp.label_blob];
                      } else if (state2.tmp.name_node.top.blobs.length) {
                        state2.tmp.name_node.top.blobs[0].blobs = [str];
                      } else {
                        state2.tmp.name_node.top.blobs = [str];
                      }
                      state2.tmp.substituted_variable = substitution_name;
                    }
                    state2.tmp.last_rendered_name = rendered_name;
                  }
                }
                state2.tmp.subsequent_author_substitute_ok = false;
              }
            }
          };
          this.execs.push(func);
        }
        if (this.name === "text" && !this.postponed_macro || ["number", "date", "names"].indexOf(this.name) > -1) {
          func = function(state2, Item) {
            if (state2.tmp.element_trace.mystack.length > 1) {
              state2.tmp.element_trace.pop();
            }
          };
          this.execs.push(func);
        }
      };
      CSL2.Util.padding = function(num) {
        var m = num.match(/\s*(-{0,1}[0-9]+)/);
        if (m) {
          num = parseInt(m[1], 10);
          if (num < 0) {
            num = 1e20 + num;
          }
          num = "" + num;
          while (num.length < 20) {
            num = "0" + num;
          }
        }
        return num;
      };
      CSL2.Util.LongOrdinalizer = function() {
      };
      CSL2.Util.LongOrdinalizer.prototype.init = function(state) {
        this.state = state;
      };
      CSL2.Util.LongOrdinalizer.prototype.format = function(num, gender) {
        if (num < 10) {
          num = "0" + num;
        }
        var ret = CSL2.Engine.getField(CSL2.LOOSE, this.state.locale[this.state.opt.lang].terms, "long-ordinal-" + num, "long", 0, gender);
        if (!ret) {
          ret = this.state.fun.ordinalizer.format(num, gender);
        }
        this.state.tmp.cite_renders_content = true;
        return ret;
      };
      CSL2.Util.Ordinalizer = function(state) {
        this.state = state;
        this.suffixes = {};
      };
      CSL2.Util.Ordinalizer.prototype.init = function() {
        if (!this.suffixes[this.state.opt.lang]) {
          this.suffixes[this.state.opt.lang] = {};
          for (var i = 0, ilen = 3; i < ilen; i += 1) {
            var gender = [void 0, "masculine", "feminine"][i];
            this.suffixes[this.state.opt.lang][gender] = [];
            for (var j = 1; j < 5; j += 1) {
              var ordinal = this.state.getTerm("ordinal-0" + j, "long", false, gender);
              if (typeof ordinal === "undefined") {
                delete this.suffixes[this.state.opt.lang][gender];
                break;
              }
              this.suffixes[this.state.opt.lang][gender].push(ordinal);
            }
          }
        }
      };
      CSL2.Util.Ordinalizer.prototype.format = function(num, gender) {
        var str;
        num = parseInt(num, 10);
        str = "" + num;
        var suffix = "";
        var trygenders = [];
        if (gender) {
          trygenders.push(gender);
        }
        trygenders.push("neuter");
        if (this.state.locale[this.state.opt.lang].ord["1.0.1"]) {
          suffix = this.state.getTerm("ordinal", false, 0, gender);
          var trygender;
          for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {
            trygender = trygenders[i];
            var ordinfo = this.state.locale[this.state.opt.lang].ord["1.0.1"];
            if (ordinfo["whole-number"][str] && ordinfo["whole-number"][str][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["whole-number"][str][trygender], false, 0, gender);
            } else if (ordinfo["last-two-digits"][str.slice(str.length - 2)] && ordinfo["last-two-digits"][str.slice(str.length - 2)][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-two-digits"][str.slice(str.length - 2)][trygender], false, 0, gender);
            } else if (ordinfo["last-digit"][str.slice(str.length - 1)] && ordinfo["last-digit"][str.slice(str.length - 1)][trygender]) {
              suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-digit"][str.slice(str.length - 1)][trygender], false, 0, gender);
            }
            if (suffix) {
              break;
            }
          }
        } else {
          if (!gender) {
            gender = void 0;
          }
          this.state.fun.ordinalizer.init();
          if (num / 10 % 10 === 1 || num > 10 && num < 20) {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
          } else if (num % 10 === 1 && num % 100 !== 11) {
            suffix = this.suffixes[this.state.opt.lang][gender][0];
          } else if (num % 10 === 2 && num % 100 !== 12) {
            suffix = this.suffixes[this.state.opt.lang][gender][1];
          } else if (num % 10 === 3 && num % 100 !== 13) {
            suffix = this.suffixes[this.state.opt.lang][gender][2];
          } else {
            suffix = this.suffixes[this.state.opt.lang][gender][3];
          }
        }
        str = str += suffix;
        return str;
      };
      CSL2.Util.Romanizer = function() {
      };
      CSL2.Util.Romanizer.prototype.format = function(num) {
        var ret, pos, n, numstr, len;
        ret = "";
        if (num < 6e3) {
          numstr = num.toString().split("");
          numstr.reverse();
          pos = 0;
          n = 0;
          len = numstr.length;
          for (pos = 0; pos < len; pos += 1) {
            n = parseInt(numstr[pos], 10);
            ret = CSL2.ROMAN_NUMERALS[pos][n] + ret;
          }
        }
        return ret;
      };
      CSL2.Util.Suffixator = function(slist) {
        if (!slist) {
          slist = CSL2.SUFFIX_CHARS;
        }
        this.slist = slist.split(",");
      };
      CSL2.Util.Suffixator.prototype.format = function(N) {
        var X;
        N += 1;
        var key = "";
        do {
          X = N % 26 === 0 ? 26 : N % 26;
          var key = this.slist[X - 1] + key;
          N = (N - X) / 26;
        } while (N !== 0);
        return key;
      };
      CSL2.Engine.prototype.processNumber = function(node, ItemObject, variable) {
        var val;
        var me = this;
        var realVariable = variable;
        variable = variable === "page-first" ? "page" : variable;
        var fullformAnd = ",\\s+and\\s+|\\s+and\\s+";
        if (this.opt.lang.slice(0, 2) !== "en") {
          fullformAnd += "|,\\s+" + this.getTerm("and") + "\\s+|\\s+" + this.getTerm("and") + "\\s+";
        }
        var symbolAnd = "\\s*&\\s*";
        var andRex = new RegExp("^" + symbolAnd + "$");
        var joinerMatchRex = new RegExp("(" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)", "g");
        var joinerSplitRex = new RegExp("(?:" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)");
        var localeAnd = this.getTerm("and");
        var localeAmpersand = this.getTerm("and", "symbol");
        if (localeAnd === localeAmpersand) {
          localeAmpersand = "&";
        }
        function normalizeFieldValue(str) {
          str = str.trim();
          var m = str.match(/^([^ ]+)/);
          if (m && !CSL2.STATUTE_SUBDIV_STRINGS[m[1]]) {
            var embeddedLabel = null;
            if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
              if (ItemObject.label) {
                embeddedLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];
              } else {
                embeddedLabel = "p.";
              }
            } else {
              embeddedLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
            }
            if (embeddedLabel) {
              str = embeddedLabel + " " + str;
            }
          }
          return str;
        }
        function composeNumberInfo(origLabel, label2, val2, joiningSuffix, parsePosition) {
          joiningSuffix = joiningSuffix ? joiningSuffix : "";
          var info2 = {};
          if (!label2 && !CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {
            label2 = "var:" + variable;
          }
          if (label2) {
            var m = label2.match(/(\s*)([^\s]+)(\s*)/);
            if (realVariable === "page" && parsePosition === 0 && ["p.", "pp."].indexOf(m[2]) === -1) {
              info2.gotosleepability = true;
              info2.labelVisibility = true;
            } else {
              info2.labelVisibility = false;
            }
            info2.label = m[2];
            info2.origLabel = origLabel;
            info2.labelSuffix = m[3] ? m[3] : "";
            info2.plural = 0;
          }
          var m = val2.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
          if (m) {
            info2.particle = m[1] ? m[1] : "";
            info2.value = m[2];
          } else {
            info2.particle = "";
            info2.value = val2;
          }
          info2.joiningSuffix = joiningSuffix.replace(/\s*-\s*/, "-");
          return info2;
        }
        function fixupSubsections(elems) {
          for (var i = elems.length - 2; i > -1; i -= 2) {
            if (elems[i] === "-" && elems[i - 1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\.  *)*[0-9]+[,a-zA-Z]+$/) && elems[i + 1].match(/^[,a-zA-Z]+$/)) {
              elems[i - 1] = elems.slice(i - 1, i + 2).join("");
              elems = elems.slice(0, i).concat(elems.slice(i + 2));
            }
          }
          return elems;
        }
        function parseString(str, defaultLabel2) {
          defaultLabel2 = defaultLabel2 ? defaultLabel2 : "";
          str = normalizeFieldValue(str, defaultLabel2);
          var jmrex, jsrex, mystr;
          if (variable === "page") {
            if (str.indexOf("\u2013") > -1) {
              str = str.replace(/\u2013/g, "-");
            }
          }
          if (str.indexOf("\\-") > -1) {
            jmrex = new RegExp(joinerMatchRex.source.replace("\\-", ""));
            jsrex = new RegExp(joinerSplitRex.source.replace("\\-", ""));
            var lst = str.split("\\-");
            for (var i = 0, ilen = lst.length; i < ilen; i++) {
              lst[i] = lst[i].replace(/\-/g, "\u2013");
            }
            mystr = lst.join("\\-");
            mystr = mystr.replace(/\\/g, "");
          } else {
            jmrex = joinerMatchRex;
            jsrex = joinerSplitRex;
            mystr = str;
          }
          var elems = [];
          var m = mystr.match(jmrex);
          if (m) {
            var lst = mystr.split(jsrex);
            for (var i = 0, ilen = m.length; i < ilen; i++) {
              if (m[i].match(andRex)) {
                if (lst[i].match(/[a-zA-Z]$/) && lst[i].match(/^[a-zA-Z]/)) {
                  m[i] = localeAmpersand;
                } else {
                  m[i] = " " + localeAmpersand + " ";
                }
              }
            }
            var recombine = false;
            for (var i in lst) {
              if (("" + lst[i]).replace(/^[a-z]\.\s+/, "").match(/[^\s0-9ivxlcmIVXLCM]/)) {
                break;
              }
            }
            if (recombine) {
              elems = [mystr];
            } else {
              for (var i = 0, ilen = lst.length - 1; i < ilen; i++) {
                elems.push(lst[i]);
                elems.push(m[i]);
              }
              elems.push(lst[lst.length - 1]);
              elems = fixupSubsections(elems);
            }
          } else {
            var elems = [mystr];
          }
          var values2 = [];
          var label2 = defaultLabel2;
          var origLabel = "";
          for (var i = 0, ilen = elems.length; i < ilen; i += 2) {
            var m = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/g);
            if (m) {
              var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/);
              for (var j = lst.length - 1; j > 0; j--) {
                if (lst[j - 1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j - 1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {
                  lst[j - 1] = lst[j - 1] + m[j - 1] + lst[j];
                  lst = lst.slice(0, j).concat(lst.slice(j + 1));
                  m = m.slice(0, j - 1).concat(m.slice(j));
                }
              }
              if (m.length > 0) {
                var slug = m[0].trim();
                var notAlabel = !CSL2.STATUTE_SUBDIV_STRINGS[slug] || typeof me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[slug]) === "undefined" || ["locator", "number", "locator-extra", "page"].indexOf(variable) === -1 && CSL2.STATUTE_SUBDIV_STRINGS[slug] !== variable;
                if (notAlabel) {
                  if (i === 0) {
                    m = m.slice(1);
                    lst[0] = lst[0] + " " + slug + " " + lst[1];
                    lst = lst.slice(0, 1).concat(lst.slice(2));
                  }
                } else {
                  origLabel = slug;
                }
              }
              for (var j = 0, jlen = lst.length; j < jlen; j++) {
                if (lst[j] || j === lst.length - 1) {
                  var filteredOrigLabel;
                  label2 = m[j - 1] ? m[j - 1] : label2;
                  if (origLabel === label2.trim()) {
                    filteredOrigLabel = "";
                  } else {
                    filteredOrigLabel = origLabel;
                  }
                  mystr = lst[j] ? lst[j].trim() : "";
                  if (j === lst.length - 1) {
                    values2.push(composeNumberInfo(filteredOrigLabel, label2, mystr, elems[i + 1], i));
                  } else {
                    values2.push(composeNumberInfo(filteredOrigLabel, label2, mystr, null, i));
                  }
                }
              }
            } else {
              var filteredOrigLabel;
              if (origLabel === label2.trim()) {
                filteredOrigLabel = "";
              } else {
                filteredOrigLabel = origLabel;
              }
              values2.push(composeNumberInfo(filteredOrigLabel, label2, elems[i], elems[i + 1]));
            }
          }
          return values2;
        }
        function setSpaces(values2) {
          for (var i = 0, ilen = values2.length - 1; i < ilen; i++) {
            if (!values2[i].joiningSuffix && values2[i + 1].label) {
              values2[i].joiningSuffix = " ";
            }
          }
        }
        function fixNumericAndCount(values2, i, currentLabelInfo) {
          var master = values2[currentLabelInfo.pos];
          var val2 = values2[i].value;
          var isEscapedHyphen = master.joiningSuffix === "\\-";
          if (val2.particle && val2.particle !== master.particle) {
            currentLabelInfo.collapsible = false;
          }
          var mVal = val2.match(/^[0-9]+([-,:a-zA-Z]*)$/);
          var mCurrentLabel = master.value.match(/^(?:[0-9]+|[ixv]+)([-,:a-zA-Z]*|\-[\-0-9]+)$/);
          if (!val2 || !mVal || !mCurrentLabel || isEscapedHyphen) {
            currentLabelInfo.collapsible = false;
            if (!val2 || !mCurrentLabel) {
              currentLabelInfo.numeric = false;
            }
            if (isEscapedHyphen) {
              currentLabelInfo.count--;
            }
          }
          if (mVal && mVal[1] || mCurrentLabel && mCurrentLabel[1]) {
            currentLabelInfo.collapsible = false;
          }
          if (values2[i].collapsible === void 0) {
            for (var j = i, jlen = i + currentLabelInfo.count; j < jlen; j++) {
              if (isNaN(parseInt(values2[j].value)) && !values2[j].value.match(/^[ivxlcmIVXLCM]+$/)) {
                values2[j].collapsible = false;
              } else {
                values2[j].collapsible = true;
              }
            }
            currentLabelInfo.collapsible = values2[i].collapsible;
          }
          var isCollapsible = currentLabelInfo.collapsible;
          for (var j = currentLabelInfo.pos, jlen = currentLabelInfo.pos + currentLabelInfo.count; j < jlen; j++) {
            if (currentLabelInfo.count > 1 && isCollapsible) {
              values2[j].plural = 1;
            }
            values2[j].numeric = currentLabelInfo.numeric;
            values2[j].collapsible = currentLabelInfo.collapsible;
          }
        }
        function fixLabelVisibility(values2, groupStartPos, currentLabelInfo) {
          if (currentLabelInfo.label.slice(0, 4) !== "var:") {
            if (currentLabelInfo.pos === 0) {
              if (["locator", "number", "locator-extra", "page"].indexOf(variable) > -1) {
                if (typeof me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label]) === "undefined") {
                  values2[currentLabelInfo.pos].labelVisibility = true;
                }
              }
              if (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1) {
                if (CSL2.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {
                  values2[0].labelVisibility = true;
                }
              }
            } else {
              values2[currentLabelInfo.pos].labelVisibility = true;
            }
          }
        }
        function setPluralsAndNumerics(values2) {
          if (values2.length === 0) {
            return;
          }
          var groupStartPos = 0;
          var groupCount = 1;
          for (var i = 1, ilen = values2.length; i < ilen; i++) {
            var lastVal = values2[i - 1];
            var thisVal = values2[i];
            if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {
              groupCount++;
            } else {
              var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
              currentLabelInfo.pos = groupStartPos;
              currentLabelInfo.count = groupCount;
              currentLabelInfo.numeric = true;
              fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
              if (lastVal.label !== thisVal.label) {
                fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
              }
              groupStartPos = i;
              groupCount = 1;
            }
          }
          var currentLabelInfo = JSON.parse(JSON.stringify(values2[groupStartPos]));
          currentLabelInfo.pos = groupStartPos;
          currentLabelInfo.count = groupCount;
          currentLabelInfo.numeric = true;
          fixNumericAndCount(values2, groupStartPos, currentLabelInfo);
          fixLabelVisibility(values2, groupStartPos, currentLabelInfo);
          if (values2.length && values2[0].numeric && variable.slice(0, 10) === "number-of-") {
            if (parseInt(ItemObject[realVariable], 10) > 1) {
              values2[0].plural = 1;
            }
          }
        }
        function stripHyphenBackslash(joiningSuffix) {
          return joiningSuffix.replace("\\-", "-");
        }
        function setStyling(values2) {
          var masterNode = CSL2.Util.cloneToken(node);
          var masterStyling = new CSL2.Token();
          if (!me.tmp.just_looking) {
            masterStyling.decorations = masterNode.decorations;
            masterNode.decorations = [];
            masterStyling.strings.prefix = masterNode.strings.prefix;
            masterNode.strings.prefix = "";
            masterStyling.strings.suffix = masterNode.strings.suffix;
            masterNode.strings.suffix = "";
          }
          var masterLabel = values2.length ? values2[0].label : null;
          if (values2.length) {
            for (var i = 0, ilen = values2.length; i < ilen; i++) {
              var val2 = values2[i];
              var newnode = CSL2.Util.cloneToken(masterNode);
              newnode.gender = node.gender;
              if (masterLabel === val2.label) {
                newnode.formatter = node.formatter;
              }
              if (val2.numeric) {
                newnode.successor_prefix = val2.successor_prefix;
              }
              newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val2.joiningSuffix);
              val2.styling = newnode;
            }
            if (!me.tmp.just_looking) {
              if (values2[0].value.slice(0, 1) === '"' && values2[values2.length - 1].value.slice(-1) === '"') {
                values2[0].value = values2[0].value.slice(1);
                values2[values2.length - 1].value = values2[values2.length - 1].value.slice(0, -1);
                masterStyling.decorations.push(["@quotes", true]);
              }
            }
          }
          return masterStyling;
        }
        function checkTerm(variable2, val2) {
          var ret = true;
          if (["locator", "locator-extra", "page"].indexOf(variable2) > -1) {
            var label2;
            if (val2.origLabel) {
              label2 = val2.origLabel;
            } else {
              label2 = val2.label;
            }
            ret = !!me.getTerm(CSL2.STATUTE_SUBDIV_STRINGS[label2]);
          }
          return ret;
        }
        function checkPage(variable2, val2) {
          return variable2 === "page" || ["locator", "locator-extra"].indexOf(variable2) > -1 && (["p."].indexOf(val2.label) > -1 || ["p."].indexOf(val2.origLabel) > -1);
        }
        function fixupRangeDelimiter(variable2, val2, rangeDelimiter, isNumeric) {
          var isPage = checkPage(variable2, val2);
          var hasTerm = checkTerm(variable2, val2);
          if (hasTerm && rangeDelimiter === "-") {
            if (isNumeric) {
              if (isPage || ["locator", "locator-extra", "issue", "volume", "edition", "number"].indexOf(variable2) > -1) {
                rangeDelimiter = me.getTerm("page-range-delimiter");
                if (!rangeDelimiter) {
                  rangeDelimiter = "\u2013";
                }
              }
              if (variable2 === "collection-number") {
                rangeDelimiter = me.getTerm("year-range-delimiter");
                if (!rangeDelimiter) {
                  rangeDelimiter = "\u2013";
                }
              }
            }
          }
          return rangeDelimiter;
        }
        function manglePageNumbers(values2, i, currentInfo) {
          if (i < 1) {
            return;
          }
          if (currentInfo.count !== 2) {
            return;
          }
          if (values2[i - 1].particle !== values2[i].particle) {
            return;
          }
          if (values2[i - 1].joiningSuffix !== "-") {
            currentInfo.count = 1;
            return;
          }
          if (!me.opt["page-range-format"] && parseInt(values2[i - 1].value, 10) > parseInt(values2[i].value, 10)) {
            values2[i - 1].joiningSuffix = fixupRangeDelimiter(variable, values2[i], values2[i - 1].joiningSuffix, true);
            return;
          }
          var val2 = values2[i];
          var isPage = checkPage(variable, val2);
          var str;
          if (isPage && !isNaN(parseInt(values2[i - 1].value)) && !isNaN(parseInt(values2[i].value))) {
            str = values2[i - 1].particle + values2[i - 1].value + " - " + values2[i].particle + values2[i].value;
            str = me.fun.page_mangler(str);
          } else {
            if (("" + values2[i - 1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && ("" + values2[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {
              values2[i - 1].joiningSuffix = me.getTerm("page-range-delimiter");
            }
            str = values2[i - 1].value + stripHyphenBackslash(values2[i - 1].joiningSuffix) + values2[i].value;
          }
          var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
          if (m) {
            var rangeDelimiter = m[3];
            rangeDelimiter = fixupRangeDelimiter(variable, val2, rangeDelimiter, values2[i].numeric);
            values2[i - 1].particle = m[1];
            values2[i - 1].value = m[2];
            values2[i - 1].joiningSuffix = rangeDelimiter;
            values2[i].particle = m[4];
            values2[i].value = m[5];
          }
          currentInfo.count = 0;
        }
        function fixRanges(values2) {
          if (!node) {
            return;
          }
          if (["page", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume", "locator", "locator-extra"].indexOf(variable) === -1) {
            return;
          }
          var currentInfo = {
            count: 0,
            label: null,
            lastHadRangeDelimiter: false
          };
          for (var i = 0, ilen = values2.length; i < ilen; i++) {
            var val2 = values2[i];
            if (!val2.collapsible) {
              currentInfo.count = 0;
              currentInfo.label = null;
              var isNumeric = val2.numeric;
              val2.joiningSuffix = fixupRangeDelimiter(variable, val2, val2.joiningSuffix, isNumeric);
            } else if (currentInfo.label === val2.label && val2.joiningSuffix === "-") {
              currentInfo.count = 1;
            } else if (currentInfo.label === val2.label && val2.joiningSuffix !== "-") {
              currentInfo.count++;
              if (currentInfo.count === 2) {
                manglePageNumbers(values2, i, currentInfo);
              }
            } else if (currentInfo.label !== val2.label) {
              currentInfo.label = val2.label;
              currentInfo.count = 1;
            } else {
              currentInfo.count = 1;
              currentInfo.label = val2.label;
            }
          }
          if (currentInfo.count === 2) {
            manglePageNumbers(values2, values2.length - 1, currentInfo);
          }
        }
        function setVariableParams(shadow_numbers, realVariable2, values2) {
          var obj2 = shadow_numbers[realVariable2];
          if (values2.length) {
            obj2.numeric = values2[0].numeric;
            obj2.collapsible = values2[0].collapsible;
            obj2.plural = values2[0].plural;
            obj2.label = CSL2.STATUTE_SUBDIV_STRINGS[values2[0].label];
            if (variable === "number" && obj2.label === "issue" && me.getTerm("number")) {
              obj2.label = "number";
            }
          }
        }
        if (node && this.tmp.shadow_numbers[realVariable] && this.tmp.shadow_numbers[realVariable].values.length) {
          var values = this.tmp.shadow_numbers[realVariable].values;
          fixRanges(values);
          this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
          return;
        }
        if (!this.tmp.shadow_numbers[realVariable]) {
          this.tmp.shadow_numbers[realVariable] = {
            values: []
          };
        }
        if (!ItemObject) {
          return;
        }
        var languageRole = CSL2.LangPrefsMap[variable];
        if (languageRole) {
          var localeType = this.opt["cite-lang-prefs"][languageRole][0];
          val = this.transform.getTextSubField(ItemObject, realVariable, "locale-" + localeType, true);
          val = val.name;
        } else {
          val = ItemObject[realVariable];
        }
        if (val && realVariable === "number" && ItemObject.type === "legal_case") {
          val = val.replace(/[\\]*-/g, "\\-");
        }
        if (val && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
            var normval = this.sys.normalizeAbbrevsKey(realVariable, val);
          } else {
            var normval = val;
          }
          var jurisdiction2 = this.transform.loadAbbreviation(ItemObject.jurisdiction, "number", normval, ItemObject.language);
          if (this.transform.abbrevs[jurisdiction2].number) {
            if (this.transform.abbrevs[jurisdiction2].number[normval]) {
              val = this.transform.abbrevs[jurisdiction2].number[normval];
            } else {
              if (typeof this.transform.abbrevs[jurisdiction2].number[normval] !== "undefined") {
                delete this.transform.abbrevs[jurisdiction2].number[normval];
              }
            }
          }
        }
        if (typeof val !== "undefined" && (typeof val === "string" || typeof val === "number")) {
          if (typeof val === "number") {
            val = "" + val;
          }
          var defaultLabel = CSL2.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
          if (this.tmp.shadow_numbers[realVariable].values.length === 0) {
            var values = parseString(val, defaultLabel);
            setSpaces(values);
            setPluralsAndNumerics(values);
            for (var obj of values) {
              if (!obj.numeric)
                obj.plural = 0;
            }
            this.tmp.shadow_numbers[realVariable].values = values;
            if (node) {
              fixRanges(values);
              this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
            }
            setVariableParams(this.tmp.shadow_numbers, realVariable, values);
          }
          var info = this.tmp.shadow_numbers[realVariable];
          if (variable === "number") {
            if (info.values.length === 1 && info.values[0].value.indexOf("|") > -1) {
              info.values[0].value = info.values[0].value.replace(/\|/g, ", ");
              info.values[0].numeric = true;
              info.values[0].plural = 1;
              info.values[0].collapsible = false;
              info.numeric = true;
              info.plural = 1;
              info.collapsible = false;
            }
          }
          if (info.values.length === 1) {
            if (info.values[0].value.match(/^[0-9]+(?:\/[0-9]+)+$/)) {
              info.values[0].numeric = true;
              info.values[0].plural = 0;
              info.values[0].collapsible = false;
              info.numeric = true;
              info.plural = 0;
              info.collapsible = false;
            }
          }
          if (variable === "page") {
            if (info.values.length > 0) {
              if (info.values[0].gotosleepability) {
                info.labelForm = "short";
              }
            }
          }
        }
      };
      CSL2.Util.outputNumericField = function(state, varname, itemID) {
        state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);
        var masterStyling = state.tmp.shadow_numbers[varname].masterStyling;
        var nums = state.tmp.shadow_numbers[varname].values;
        var masterLabel = nums.length ? nums[0].label : null;
        var labelForm = state.tmp.shadow_numbers[varname].labelForm;
        var tryStatic = state.tmp.group_context.tip.label_static;
        var embeddedLabelForm;
        if (labelForm) {
          embeddedLabelForm = labelForm;
        } else {
          embeddedLabelForm = "short";
        }
        var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;
        var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;
        var lastLabelName = null;
        for (var i = 0, ilen = nums.length; i < ilen; i++) {
          var num = nums[i];
          var label2 = "";
          var labelName;
          if (num.label) {
            if (num.label.slice(0, 4) === "var:") {
              labelName = num.label.slice(4);
            } else {
              labelName = CSL2.STATUTE_SUBDIV_STRINGS[num.label];
            }
            if (labelName) {
              if (num.label === masterLabel) {
                if (tryStatic) {
                  label2 = state.getTerm(labelName, "static", num.plural);
                  if (label2.indexOf("%s") === -1) {
                    label2 = "";
                  }
                }
                if (!label2) {
                  label2 = state.getTerm(labelName, labelForm, num.plural);
                }
              } else {
                if (tryStatic) {
                  label2 = state.getTerm(labelName, "static", num.plural);
                  if (label2.indexOf("%s") === -1) {
                    label2 = "";
                  }
                }
                if (!label2) {
                  label2 = state.getTerm(labelName, embeddedLabelForm, num.plural);
                }
              }
              if (labelCapitalizeIfFirst) {
                label2 = CSL2.Output.Formatters["capitalize-first"](state, label2);
              }
            }
          }
          var labelPlaceholderPos = -1;
          if (label2) {
            labelPlaceholderPos = label2.indexOf("%s");
          }
          var numStyling = CSL2.Util.cloneToken(num.styling);
          numStyling.formatter = num.styling.formatter;
          numStyling.type = num.styling.type;
          numStyling.num = num.styling.num;
          numStyling.gender = num.styling.gender;
          if (labelPlaceholderPos > 0 && labelPlaceholderPos < label2.length - 2) {
            numStyling.strings.prefix += label2.slice(0, labelPlaceholderPos);
            numStyling.strings.suffix = label2.slice(labelPlaceholderPos + 2) + numStyling.strings.suffix;
          } else if (num.labelVisibility) {
            if (!label2) {
              label2 = num.label;
              labelName = num.label;
            }
            if (labelPlaceholderPos > 0) {
              var prefixLabelStyling = new CSL2.Token();
              prefixLabelStyling.decorations = labelDecorations;
              state.output.append(label2.slice(0, labelPlaceholderPos), prefixLabelStyling);
            } else if (labelPlaceholderPos === label2.length - 2 || labelPlaceholderPos === -1) {
              state.output.append(label2 + num.labelSuffix, "empty");
            }
          }
          CSL2.UPDATE_GROUP_CONTEXT_CONDITION(state, masterStyling.strings.prefix, null, masterStyling, `${num.particle}${num.value}`);
          if (num.collapsible) {
            var blob;
            if (num.value.match(/^[1-9][0-9]*$/)) {
              blob = new CSL2.NumericBlob(state, num.particle, parseInt(num.value, 10), numStyling, itemID);
            } else {
              blob = new CSL2.NumericBlob(state, num.particle, num.value, numStyling, itemID);
            }
            if (typeof blob.gender === "undefined") {
              blob.gender = state.locale[state.opt.lang]["noun-genders"][varname];
            }
            state.output.append(blob, "literal");
          } else {
            state.output.append(num.particle + num.value, numStyling);
          }
          if (labelPlaceholderPos === 0 && labelPlaceholderPos < label2.length - 2) {
            if (lastLabelName === null) {
              lastLabelName = labelName;
            }
            if (labelName !== lastLabelName || i === nums.length - 1) {
              var suffixLabelStyling = new CSL2.Token();
              suffixLabelStyling.decorations = labelDecorations;
              state.output.append(label2.slice(labelPlaceholderPos + 2), suffixLabelStyling);
            }
          }
          lastLabelName = labelName;
          state.tmp.term_predecessor = true;
        }
        state.output.closeLevel();
      };
      CSL2.Util.PageRangeMangler = {};
      CSL2.Util.PageRangeMangler.getFunction = function(state, rangeType) {
        var rangerex, pos, len, stringify, listify, expand, minimize, minimize_internal, chicago, lst, m, b, e, ret, begin, end, ret_func;
        var range_delimiter = state.getTerm(rangeType + "-range-delimiter");
        rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\s*(?:\u2013|-)\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;
        stringify = function(lst2) {
          len = lst2.length;
          for (pos = 1; pos < len; pos += 2) {
            if (typeof lst2[pos] === "object") {
              lst2[pos] = lst2[pos].join("");
            }
          }
          var ret2 = lst2.join("");
          ret2 = ret2.replace(/([^\\])\-/g, "$1" + state.getTerm(rangeType + "-range-delimiter"));
          return ret2;
        };
        listify = function(str) {
          var m2, lst2, ret2;
          var hyphens = "\\s+\\-\\s+";
          var this_range_delimiter = range_delimiter === "-" ? "" : range_delimiter;
          var delimRex = new RegExp("([^\\\\])[-" + this_range_delimiter + "\\u2013]", "g");
          str = str.replace(delimRex, "$1 - ").replace(/\s+-\s+/g, " - ");
          var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)", "g");
          var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*");
          m2 = str.match(rexm);
          lst2 = str.split(rexlst);
          if (lst2.length === 0) {
            ret2 = m2;
          } else {
            ret2 = [lst2[0]];
            for (pos = 1, len = lst2.length; pos < len; pos += 1) {
              ret2.push(m2[pos - 1].replace(/\s*\-\s*/g, "-"));
              ret2.push(lst2[pos]);
            }
          }
          return ret2;
        };
        expand = function(str) {
          str = "" + str;
          lst = listify(str);
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
            m = lst[pos].match(rangerex);
            if (m) {
              if (!m[3] || m[1] === m[3]) {
                if (m[4].length < m[2].length) {
                  m[4] = m[2].slice(0, m[2].length - m[4].length) + m[4];
                }
                if (parseInt(m[2], 10) < parseInt(m[4], 10)) {
                  m[3] = range_delimiter + (m[1] ? m[1] : "");
                  lst[pos] = m.slice(1);
                }
              }
            }
            if (typeof lst[pos] === "string") {
              lst[pos] = lst[pos].replace(/\-/g, range_delimiter);
            }
          }
          return lst;
        };
        minimize = function(lst2, minchars, isyear) {
          len = lst2.length;
          for (var i = 1, ilen = lst2.length; i < ilen; i += 2) {
            if (typeof lst2[i] === "object") {
              lst2[i][3] = minimize_internal(lst2[i][1], lst2[i][3], minchars, isyear);
              if (lst2[i][2].slice(1) === lst2[i][0]) {
                lst2[i][2] = range_delimiter;
              }
            }
          }
          return stringify(lst2);
        };
        minimize_internal = function(begin2, end2, minchars, isyear) {
          if (!minchars) {
            minchars = 0;
          }
          b = ("" + begin2).split("");
          e = ("" + end2).split("");
          ret = e.slice();
          ret.reverse();
          if (b.length === e.length) {
            for (var i = 0, ilen = b.length; i < ilen; i += 1) {
              if (b[i] === e[i] && ret.length > minchars) {
                ret.pop();
              } else {
                if (minchars && isyear && ret.length === 3) {
                  var front = b.slice(0, i);
                  front.reverse();
                  ret = ret.concat(front);
                }
                break;
              }
            }
          }
          ret.reverse();
          return ret.join("");
        };
        chicago = function(lst2) {
          len = lst2.length;
          for (pos = 1; pos < len; pos += 2) {
            if (typeof lst2[pos] === "object") {
              m = lst2[pos];
              begin = parseInt(m[1], 10);
              end = parseInt(m[3], 10);
              if (begin > 100 && begin % 100 && parseInt(begin / 100, 10) === parseInt(end / 100, 10)) {
                m[3] = "" + end % 100;
              } else if (begin >= 1e4) {
                m[3] = "" + end % 1e3;
              }
            }
            if (m[2].slice(1) === m[0]) {
              m[2] = range_delimiter;
            }
          }
          return stringify(lst2);
        };
        var sniff = function(str, func, minchars, isyear) {
          var ret2;
          str = "" + str;
          var lst2 = expand(str);
          var ret2 = func(lst2, minchars, isyear);
          return ret2;
        };
        if (!state.opt[rangeType + "-range-format"]) {
          ret_func = function(str) {
            return sniff(str, stringify);
          };
        } else if (state.opt[rangeType + "-range-format"] === "expanded") {
          ret_func = function(str) {
            return sniff(str, stringify);
          };
        } else if (state.opt[rangeType + "-range-format"] === "minimal") {
          ret_func = function(str) {
            return sniff(str, minimize);
          };
        } else if (state.opt[rangeType + "-range-format"] === "minimal-two") {
          ret_func = function(str, isyear) {
            return sniff(str, minimize, 2, isyear);
          };
        } else if (state.opt[rangeType + "-range-format"] === "chicago") {
          ret_func = function(str) {
            return sniff(str, chicago);
          };
        }
        return ret_func;
      };
      CSL2.Util.FlipFlopper = function(state) {
        var _nestingState = [];
        var _nestingData = {
          '<span class="nocase">': {
            type: "nocase",
            opener: '<span class="nocase">',
            closer: "</span>",
            attr: null,
            outer: null,
            flipflop: null
          },
          '<span class="nodecor">': {
            type: "nodecor",
            opener: '<span class="nodecor">',
            closer: "</span>",
            attr: "@class",
            outer: "nodecor",
            flipflop: {
              "nodecor": "nodecor"
            }
          },
          '<span style="font-variant:small-caps;">': {
            type: "tag",
            opener: '<span style="font-variant:small-caps;">',
            closer: "</span>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
              "small-caps": "normal",
              "normal": "small-caps"
            }
          },
          "<sc>": {
            type: "tag",
            opener: "<sc>",
            closer: "</sc>",
            attr: "@font-variant",
            outer: "small-caps",
            flipflop: {
              "small-caps": "normal",
              "normal": "small-caps"
            }
          },
          "<i>": {
            type: "tag",
            opener: "<i>",
            closer: "</i>",
            attr: "@font-style",
            outer: "italic",
            flipflop: {
              "italic": "normal",
              "normal": "italic"
            }
          },
          "<b>": {
            type: "tag",
            opener: "<b>",
            closer: "</b>",
            attr: "@font-weight",
            outer: "bold",
            flipflop: {
              "bold": "normal",
              "normal": "bold"
            }
          },
          "<sup>": {
            type: "tag",
            opener: "<sup>",
            closer: "</sup>",
            attr: "@vertical-align",
            outer: "sup",
            flipflop: {
              "sub": "sup",
              "sup": "sup"
            }
          },
          "<sub>": {
            type: "tag",
            opener: "<sub>",
            closer: "</sub>",
            attr: "@vertical-align",
            outer: "sub",
            flipflop: {
              "sup": "sub",
              "sub": "sub"
            }
          },
          ' "': {
            type: "quote",
            opener: ' "',
            closer: '"',
            attr: "@quotes",
            outer: "true",
            flipflop: {
              "true": "inner",
              "inner": "true",
              "false": "true"
            }
          },
          " '": {
            type: "quote",
            opener: " '",
            closer: "'",
            attr: "@quotes",
            outer: "inner",
            flipflop: {
              "true": "inner",
              "inner": "true",
              "false": "true"
            }
          }
        };
        _nestingData['("'] = _nestingData[' "'];
        _nestingData["('"] = _nestingData[" '"];
        var localeOpenQuote = state.getTerm("open-quote");
        var localeCloseQuote = state.getTerm("close-quote");
        var localeOpenInnerQuote = state.getTerm("open-inner-quote");
        var localeCloseInnerQuote = state.getTerm("close-inner-quote");
        if (localeOpenQuote && localeCloseQuote && [' "', " '", '"', "'"].indexOf(localeOpenQuote) === -1) {
          _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[' "']));
          _nestingData[localeOpenQuote].opener = localeOpenQuote;
          _nestingData[localeOpenQuote].closer = localeCloseQuote;
        }
        if (localeOpenInnerQuote && localeCloseInnerQuote && [' "', " '", '"', "'"].indexOf(localeOpenInnerQuote) === -1) {
          _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[" '"]));
          _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;
          _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;
        }
        function _setOuterQuoteForm(quot) {
          var flip = {
            " '": ' "',
            ' "': " '",
            '("': "('",
            "('": '("'
          };
          _nestingData[quot].outer = "true";
          _nestingData[flip[quot]].outer = "inner";
        }
        function _getNestingOpenerParams(opener) {
          var openers = [];
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            if (_nestingData[opener].type !== "quote" || !_nestingData[opener]) {
              openers.push(key);
            }
          }
          var ret = _nestingData[opener];
          ret.opener = new RegExp("^(?:" + openers.map(function(str) {
            return str.replace("(", "\\(");
          }).join("|") + ")");
          return ret;
        }
        var _nestingParams = function() {
          var ret = {};
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
            var key = keys[i];
            ret[key] = _getNestingOpenerParams(key);
          }
          return ret;
        }();
        var _tagRex = function() {
          var openers = [];
          var closers = [];
          var vals = {};
          for (var opener in _nestingParams) {
            openers.push(opener);
            vals[_nestingParams[opener].closer] = true;
          }
          var keys = Object.keys(vals);
          for (var i = 0, l = keys.length; i < l; i++) {
            var closer = keys[i];
            closers.push(closer);
          }
          var all = openers.concat(closers).map(function(str) {
            return str.replace("(", "\\(");
          }).join("|");
          return {
            matchAll: new RegExp("((?:" + all + "))", "g"),
            splitAll: new RegExp("(?:" + all + ")", "g"),
            open: new RegExp("(^(?:" + openers.map(function(str) {
              return str.replace("(", "\\(");
            }).join("|") + ")$)"),
            close: new RegExp("(^(?:" + closers.join("|") + ")$)")
          };
        }();
        function _tryOpen(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (!params || tag.match(params.opener)) {
            _nestingState.push({
              type: _nestingParams[tag].type,
              opener: _nestingParams[tag].opener,
              closer: _nestingParams[tag].closer,
              pos
            });
            return false;
          } else {
            _nestingState.pop();
            _nestingState.push({
              type: _nestingParams[tag].type,
              opener: _nestingParams[tag].opener,
              closer: _nestingParams[tag].closer,
              pos
            });
            return {
              fixtag: params.pos
            };
          }
        }
        function _tryClose(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (params && tag === params.closer) {
            _nestingState.pop();
            if (params.type === "nocase") {
              return {
                nocase: {
                  open: params.pos,
                  close: pos
                }
              };
            } else {
              return false;
            }
          } else {
            if (params) {
              return {
                fixtag: params.pos
              };
            } else {
              return {
                fixtag: pos
              };
            }
          }
        }
        function _pushNestingState(tag, pos) {
          if (tag.match(_tagRex.open)) {
            return _tryOpen(tag, pos);
          } else {
            return _tryClose(tag, pos);
          }
        }
        function _doppelString(str) {
          var forcedSpaces = [];
          str = str.replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?\"[^>]*(>)/g, '$1 $2$3;"$4');
          str = str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3");
          var match = str.match(_tagRex.matchAll);
          if (!match) {
            return {
              tags: [],
              strings: [str],
              forcedSpaces: []
            };
          }
          var split = str.split(_tagRex.splitAll);
          for (var i = 0, ilen = match.length - 1; i < ilen; i++) {
            if (_nestingData[match[i]]) {
              if (split[i + 1] === "" && ['"', "'"].indexOf(match[i + 1]) > -1) {
                match[i + 1] = " " + match[i + 1];
                forcedSpaces.push(true);
              } else {
                forcedSpaces.push(false);
              }
            }
          }
          return {
            tags: match,
            strings: split,
            forcedSpaces
          };
        }
        var TagReg = function(blob) {
          var _stack = [];
          this.set = function(tag) {
            var attr = _nestingData[tag].attr;
            var decor = null;
            for (var i = _stack.length - 1; i > -1; i--) {
              var _decor = _stack[i];
              if (_decor[0] === attr) {
                decor = _decor;
                break;
              }
            }
            if (!decor) {
              var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);
              outer:
                for (var i = allTheDecor.length - 1; i > -1; i--) {
                  var decorset = allTheDecor[i];
                  if (!decorset) {
                    continue;
                  }
                  for (var j = decorset.length - 1; j > -1; j--) {
                    var _decor = decorset[j];
                    if (_decor[0] === attr) {
                      decor = _decor;
                      break outer;
                    }
                  }
                }
            }
            if (!decor) {
              decor = [attr, _nestingData[tag].outer];
            } else {
              decor = [attr, _nestingData[tag].flipflop[decor[1]]];
            }
            _stack.push(decor);
          };
          this.pair = function() {
            return _stack[_stack.length - 1];
          };
          this.pop = function() {
            _stack.pop();
          };
        };
        function _apostropheForce(tag, str) {
          if (tag === "'") {
            if (str && str.match(/^[^\,\.\?\:\;\ ]/)) {
              return "\u2019";
            }
          } else if (tag === " '" && str && str.match(/^[\ ]/)) {
            return " \u2019";
          }
          return false;
        }
        function _undoppelToQueue(blob, doppel, leadingSpace) {
          var firstString = true;
          var tagReg = new TagReg(blob);
          blob.blobs = [];
          function Stack(blob2) {
            this.stack = [blob2];
            this.latest = blob2;
            this.addStyling = function(str2, decor) {
              if (firstString) {
                if (str2.slice(0, 1) === " ") {
                  str2 = str2.slice(1);
                }
                if (str2.slice(0, 1) === " ") {
                  str2 = str2.slice(1);
                }
                firstString = false;
              }
              this.latest = this.stack[this.stack.length - 1];
              if (decor) {
                if (typeof this.latest.blobs === "string") {
                  var child = new CSL2.Blob();
                  child.blobs = this.latest.blobs;
                  child.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs = [child];
                }
                var tok = new CSL2.Token();
                var newblob = new CSL2.Blob(null, tok);
                newblob.alldecor = this.latest.alldecor.slice();
                if (decor[0] === "@class" && decor[1] === "nodecor") {
                  var newdecorset = [];
                  var seen = {};
                  var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);
                  for (var i2 = allTheDecor.length - 1; i2 > -1; i2--) {
                    var _decorset = allTheDecor[i2];
                    if (!_decorset) {
                      continue;
                    }
                    for (var j = _decorset.length - 1; j > -1; j--) {
                      var _olddecor = _decorset[j];
                      if (["@font-weight", "@font-style", "@font-variant"].indexOf(_olddecor[0]) > -1 && !seen[_olddecor[0]]) {
                        if (decor[1] !== "normal") {
                          newblob.decorations.push([_olddecor[0], "normal"]);
                          newdecorset.push([_olddecor[0], "normal"]);
                        }
                        seen[_olddecor[0]] = true;
                      }
                    }
                  }
                  newblob.alldecor.push(newdecorset);
                } else {
                  newblob.decorations.push(decor);
                  newblob.alldecor.push([decor]);
                }
                this.latest.blobs.push(newblob);
                this.stack.push(newblob);
                this.latest = newblob;
                if (str2) {
                  var tok = new CSL2.Token();
                  var newblob = new CSL2.Blob(null, tok);
                  newblob.blobs = str2;
                  newblob.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs.push(newblob);
                }
              } else {
                if (str2) {
                  var child = new CSL2.Blob();
                  child.blobs = str2;
                  child.alldecor = this.latest.alldecor.slice();
                  this.latest.blobs.push(child);
                }
              }
            };
            this.popStyling = function() {
              this.stack.pop();
            };
          }
          var stack = new Stack(blob);
          if (doppel.strings.length) {
            var str = doppel.strings[0];
            if (leadingSpace) {
              str = " " + str;
            }
            stack.addStyling(str);
          }
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i + 1];
            if (tag.match(_tagRex.open)) {
              tagReg.set(tag);
              stack.addStyling(str, tagReg.pair());
            } else {
              tagReg.pop();
              stack.popStyling();
              stack.addStyling(str);
            }
          }
        }
        this.processTags = function(blob) {
          var str = blob.blobs;
          var leadingSpace = false;
          if (str.slice(0, 1) === " " && !str.match(/^\s+[\'\"]/)) {
            leadingSpace = true;
          }
          var rex = new RegExp("(" + CSL2.ROMANESQUE_REGEXP.source + ")\u2019(" + CSL2.ROMANESQUE_REGEXP.source + ")", "g");
          var str = " " + str.replace(rex, "$1'$2");
          var doppel = _doppelString(str);
          if (doppel.tags.length === 0) {
            return;
          }
          var quoteFormSeen = false;
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var str = doppel.strings[i + 1];
            var apostrophe = _apostropheForce(tag, str);
            if (apostrophe) {
              doppel.strings[i + 1] = apostrophe + doppel.strings[i + 1];
              doppel.tags[i] = "";
            } else {
              var tagInfo;
              while (true) {
                tagInfo = _pushNestingState(tag, i);
                if (tagInfo) {
                  if (Object.keys(tagInfo).indexOf("fixtag") > -1) {
                    if (tag.match(_tagRex.close) && tag === "'") {
                      doppel.strings[i + 1] = "\u2019" + doppel.strings[i + 1];
                      doppel.tags[i] = "";
                    } else {
                      var failedTag = doppel.tags[tagInfo.fixtag];
                      if (doppel.forcedSpaces[tagInfo.fixtag - 1]) {
                        failedTag = failedTag.slice(1);
                      }
                      doppel.strings[tagInfo.fixtag + 1] = failedTag + doppel.strings[tagInfo.fixtag + 1];
                      doppel.tags[tagInfo.fixtag] = "";
                    }
                    if (_nestingState.length > 0) {
                      if (tag !== "'") {
                        _nestingState.pop();
                      } else {
                        break;
                      }
                    } else {
                      break;
                    }
                  } else if (tagInfo.nocase) {
                    doppel.tags[tagInfo.nocase.open] = "";
                    doppel.tags[tagInfo.nocase.close] = "";
                    break;
                  } else {
                    break;
                  }
                } else {
                  break;
                }
              }
              if (tagInfo && (tagInfo.fixtag || tagInfo.fixtag === 0)) {
                doppel.strings[i + 1] = doppel.tags[i] + doppel.strings[i + 1];
                doppel.tags[i] = "";
              }
            }
          }
          for (var i = _nestingState.length - 1; i > -1; i--) {
            var tagPos = _nestingState[i].pos;
            var tag = doppel.tags[tagPos];
            if (tag === " '" || tag === "'") {
              doppel.strings[tagPos + 1] = " \u2019" + doppel.strings[tagPos + 1];
            } else {
              doppel.strings[tagPos + 1] = doppel.tags[tagPos] + doppel.strings[tagPos + 1];
            }
            doppel.tags[tagPos] = "";
            _nestingState.pop();
          }
          for (var i = doppel.tags.length - 1; i > -1; i--) {
            if (!doppel.tags[i]) {
              doppel.tags = doppel.tags.slice(0, i).concat(doppel.tags.slice(i + 1));
              doppel.strings[i] = doppel.strings[i] + doppel.strings[i + 1];
              doppel.strings = doppel.strings.slice(0, i + 1).concat(doppel.strings.slice(i + 2));
            }
          }
          for (var i = 0, ilen = doppel.tags.length; i < ilen; i++) {
            var tag = doppel.tags[i];
            var forcedSpace = doppel.forcedSpaces[i - 1];
            if ([' "', " '", '("', "('"].indexOf(tag) > -1) {
              if (!quoteFormSeen) {
                _setOuterQuoteForm(tag);
                quoteFormSeen = true;
              }
              if (!forcedSpace) {
                doppel.strings[i] += tag.slice(0, 1);
              }
            }
          }
          _undoppelToQueue(blob, doppel, leadingSpace);
        };
      };
      CSL2.Output.Formatters = function() {
        var rexStr = `(?:\u2018|\u2019|\u201C|\u201D| "| '|"|'|[-\u2013\u2014/.,;?!:]|\\[|\\]|\\(|\\)|<span style="font-variant: small-caps;">|<span class="no(?:case|decor)">|</span>|</?(?:i|sc|b|sub|sup)>)`;
        var tagDoppel = new CSL2.Doppeler(rexStr, function(str) {
          return str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3").replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?(\")[^>]*(>)/g, "$1 $2 $3;$4$5");
        });
        var rexNameStr = '(?:[-\\s]*<\\/*(?:spans+class="no(?:case|decor)"|i|sc|b|sub|sup)>[-\\s]*|[-\\s]+)';
        var nameDoppel = new CSL2.Doppeler(rexNameStr);
        var wordDoppel = new CSL2.Doppeler("(?:[\xA0 \xA0\u2000-\u200B\u205F\u3000]+)");
        var _tagParams = {
          '<span style="font-variant: small-caps;">': "</span>",
          '<span class="nocase">': "</span>",
          '<span class="nodecor">': "</span>",
          "<sc>": "</sc>",
          "<sub>": "</sub>",
          "<sup>": "</sup>"
        };
        function _capitalise(word) {
          var m = word.match(/(^\s*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(.*)/);
          if (m && !(m[2].match(/^[\u0370-\u03FF]$/) && !m[3])) {
            return m[1] + CSL2.toLocaleUpperCase.call(this, m[2]) + m[3];
          }
          return word;
        }
        function _textcaseEngine(config, string) {
          if (!string) {
            return "";
          }
          config.doppel = tagDoppel.split(string);
          var quoteParams = {
            ' "': {
              opener: " '",
              closer: '"'
            },
            " '": {
              opener: ' "',
              closer: "'"
            },
            "\u2018": {
              opener: "\u2018",
              closer: "\u2019"
            },
            "\u201C": {
              opener: "\u201C",
              closer: "\u201D"
            }
          };
          function tryOpen(tag2, pos) {
            if (config.quoteState.length === 0 || tag2 === config.quoteState[config.quoteState.length - 1].opener) {
              config.quoteState.push({
                opener: quoteParams[tag2].opener,
                closer: quoteParams[tag2].closer,
                pos
              });
              return false;
            } else {
              var prevPos = config.quoteState[config.quoteState.length - 1].pos;
              config.quoteState.pop();
              config.quoteState.push({
                opener: quoteParams[tag2].opener,
                closer: quoteParams[tag2].closer,
                positions: pos
              });
              return prevPos;
            }
          }
          function tryClose(tag2, pos) {
            if (config.quoteState.length > 0 && tag2 === config.quoteState[config.quoteState.length - 1].closer) {
              config.quoteState.pop();
            } else {
              return pos;
            }
          }
          function pushQuoteState(tag2, pos) {
            var isOpener = ["\u201C", "\u2018", ' "', " '"].indexOf(tag2) > -1 ? true : false;
            if (isOpener) {
              return tryOpen(tag2, pos);
            } else {
              return tryClose(tag2, pos);
            }
          }
          function quoteFix(tag2, positions) {
            var m = tag2.match(/(^(?:\u2018|\u2019|\u201C|\u201D|\"|\')|(?: \"| \')$)/);
            if (m) {
              return pushQuoteState(m[1], positions);
            }
          }
          if (config.doppel.strings.length && config.doppel.strings[0].trim()) {
            config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);
          }
          for (var i = 0, ilen = config.doppel.tags.length; i < ilen; i++) {
            var tag = config.doppel.tags[i];
            var str = config.doppel.strings[i + 1];
            if (config.tagState !== null) {
              if (_tagParams[tag]) {
                config.tagState.push(_tagParams[tag]);
              } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {
                config.tagState.pop();
              }
            }
            if (config.afterPunct !== null) {
              if (tag.match(/[\!\?\:]$/)) {
                config.afterPunct = true;
              }
            }
            if (config.tagState.length === 0) {
              config.doppel.strings[i + 1] = config.capitaliseWords(str, i + 1, config.doppel, config.doppel.tags[i + 1]);
            } else if (config.doppel.strings[i + 1].trim()) {
              config.lastWordPos = null;
            }
            if (config.quoteState !== null) {
              var quotePos = quoteFix(tag, i);
              if (quotePos || quotePos === 0) {
                var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
                config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
                config.lastWordPos = null;
              }
            }
            if (config.isFirst) {
              if (str.trim()) {
                config.isFirst = false;
              }
            }
            if (config.afterPunct) {
              if (str.trim()) {
                config.afterPunct = false;
              }
            }
          }
          if (config.quoteState) {
            for (var i = 0, ilen = config.quoteState.length; i < ilen; i++) {
              var quotePos = config.quoteState[i].pos;
              if (typeof quotePos !== "undefined") {
                var origChar = config.doppel.origStrings[quotePos + 1].slice(0, 1);
                config.doppel.strings[quotePos + 1] = origChar + config.doppel.strings[quotePos + 1].slice(1);
              }
            }
          }
          if (config.lastWordPos) {
            var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);
            var lastWord = lastWords.strings[config.lastWordPos.words];
            if (lastWord.length > 1 && CSL2.toLocaleLowerCase.call(this, lastWord).match(config.skipWordsRex)) {
              lastWord = _capitalise.call(this, lastWord);
              lastWords.strings[config.lastWordPos.words] = lastWord;
            }
            config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);
          }
          return tagDoppel.join(config.doppel);
        }
        function passthrough(state, str) {
          return str;
        }
        function lowercase(state, string) {
          var config = {
            quoteState: null,
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = CSL2.toLocaleLowerCase.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        function uppercase(state, string) {
          var config = {
            quoteState: null,
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  words[i] = CSL2.toLocaleUpperCase.call(state, word);
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        function sentence(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var words = str.split(" ");
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (config.isFirst) {
                    words[i] = _capitalise.call(state, word);
                    config.isFirst = false;
                  } else {
                    words[i] = CSL2.toLocaleLowerCase.call(state, word);
                  }
                }
              }
              return words.join(" ");
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function title2(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str, i, followingTag) {
              if (str.trim()) {
                var wordle = wordDoppel.split(str);
                var words = wordle.strings;
                for (var j = 0, jlen = words.length; j < jlen; j++) {
                  var word = words[j];
                  if (!word) {
                    continue;
                  }
                  let lcase = CSL2.toLocaleLowerCase.call(state, word);
                  let capitalize = false;
                  if (word.length > 1 && !lcase.match(config.skipWordsRex)) {
                    capitalize = true;
                  } else if (j === words.length - 1 && followingTag === "-") {
                    capitalize = true;
                  } else if (config.isFirst) {
                    capitalize = true;
                  } else if (config.afterPunct) {
                    capitalize = true;
                  }
                  if (capitalize && word === lcase) {
                    words[j] = _capitalise.call(state, word);
                  }
                  config.afterPunct = false;
                  config.isFirst = false;
                  config.lastWordPos = {
                    strings: i,
                    words: j
                  };
                }
                str = wordDoppel.join(wordle);
              }
              return str;
            },
            skipWordsRex: state.locale[state.opt.lang].opts["skip-words-regexp"],
            tagState: [],
            afterPunct: false,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function capitalizeFirst(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var wordle = wordDoppel.split(str);
              var words = wordle.strings;
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (config.isFirst) {
                    if (word === CSL2.toLocaleLowerCase.call(state, word)) {
                      words[i] = _capitalise.call(state, word);
                    }
                    config.isFirst = false;
                    break;
                  }
                }
              }
              return wordDoppel.join(wordle);
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
        }
        function capitalizeAll(state, string) {
          var config = {
            quoteState: [],
            capitaliseWords: function(str) {
              var wordle = wordDoppel.split(str);
              var words = wordle.strings;
              for (var i = 0, ilen = words.length; i < ilen; i++) {
                var word = words[i];
                if (word) {
                  if (word === CSL2.toLocaleLowerCase.call(state, word)) {
                    words[i] = _capitalise.call(state, word);
                  }
                }
              }
              return wordDoppel.join(wordle);
            },
            skipWordsRex: null,
            tagState: [],
            afterPunct: null,
            isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
        }
        return {
          nameDoppel,
          passthrough,
          lowercase,
          uppercase,
          sentence,
          title: title2,
          "capitalize-first": capitalizeFirst,
          "capitalize-all": capitalizeAll
        };
      }();
      CSL2.Output.Formats = function() {
      };
      CSL2.Output.Formats.prototype.html = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\s\s/g, "\xA0 ").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "<sup>" + CSL2.SUPERSCRIPTS[aChar] + "</sup>";
          });
        },
        "bibstart": '<div class="csl-bib-body">\n',
        "bibend": "</div>",
        "@font-style/italic": "<i>%%STRING%%</i>",
        "@font-style/oblique": "<em>%%STRING%%</em>",
        "@font-style/normal": '<span style="font-style:normal;">%%STRING%%</span>',
        "@font-variant/small-caps": '<span style="font-variant:small-caps;">%%STRING%%</span>',
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-variant/normal": '<span style="font-variant:normal;">%%STRING%%</span>',
        "@font-weight/bold": "<b>%%STRING%%</b>",
        "@font-weight/normal": '<span style="font-weight:normal;">%%STRING%%</span>',
        "@font-weight/light": false,
        "@text-decoration/none": '<span style="text-decoration:none;">%%STRING%%</span>',
        "@text-decoration/underline": '<span style="text-decoration:underline;">%%STRING%%</span>',
        "@vertical-align/sup": "<sup>%%STRING%%</sup>",
        "@vertical-align/sub": "<sub>%%STRING%%</sub>",
        "@vertical-align/baseline": '<span style="baseline">%%STRING%%</span>',
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return '  <div class="csl-entry">' + str + "</div>\n" + insert;
        },
        "@display/block": function(state, str) {
          return '\n\n    <div class="csl-block">' + str + "</div>\n";
        },
        "@display/left-margin": function(state, str) {
          return '\n    <div class="csl-left-margin">' + str + "</div>";
        },
        "@display/right-inline": function(state, str) {
          return '<div class="csl-right-inline">' + str + "</div>\n  ";
        },
        "@display/indent": function(state, str) {
          return '<div class="csl-indent">' + str + "</div>\n  ";
        },
        "@showid/true": function(state, str, cslid) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
            if (cslid) {
              return '<span class="' + state.opt.nodenames[cslid] + '" cslid="' + cslid + '">' + str + "</span>";
            } else if (this.params && typeof str === "string") {
              var prePunct = "";
              if (str) {
                var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
                prePunct = m[1];
                str = m[2];
              }
              var postPunct = "";
              if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                postPunct = str.slice(-1);
                str = str.slice(0, -1);
              }
              return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
            } else {
              return str;
            }
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return '<a href="' + str + '">' + str + "</a>";
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return '<a href="' + doiurl + '">' + str + "</a>";
        }
      };
      CSL2.Output.Formats.prototype.text = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text;
        },
        "bibstart": "",
        "bibend": "",
        "@font-style/italic": false,
        "@font-style/oblique": false,
        "@font-style/normal": false,
        "@font-variant/small-caps": false,
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-variant/normal": false,
        "@font-weight/bold": false,
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": false,
        "@vertical-align/baseline": false,
        "@vertical-align/sup": false,
        "@vertical-align/sub": false,
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str + "\n";
        },
        "@display/block": function(state, str) {
          return "\n" + str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return str;
        },
        "@display/indent": function(state, str) {
          return "\n    " + str;
        },
        "@showid/true": function(state, str) {
          return str;
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL2.Output.Formats.prototype.rtf = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/([\\{}])/g, "\\$1").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "\\super " + CSL2.SUPERSCRIPTS[aChar] + "\\nosupersub{}";
          }).replace(/[\u007F-\uFFFF]/g, function(aChar) {
            return "\\uc0\\u" + aChar.charCodeAt(0).toString() + "{}";
          }).split("	").join("\\tab{}");
        },
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-style/italic": "{\\i{}%%STRING%%}",
        "@font-style/normal": "{\\i0{}%%STRING%%}",
        "@font-style/oblique": "{\\i{}%%STRING%%}",
        "@font-variant/small-caps": "{\\scaps %%STRING%%}",
        "@font-variant/normal": "{\\scaps0{}%%STRING%%}",
        "@font-weight/bold": "{\\b{}%%STRING%%}",
        "@font-weight/normal": "{\\b0{}%%STRING%%}",
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": "{\\ul{}%%STRING%%}",
        "@vertical-align/baseline": false,
        "@vertical-align/sup": "\\super %%STRING%%\\nosupersub{}",
        "@vertical-align/sub": "\\sub %%STRING%%\\nosupersub{}",
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-quote"));
          }
          return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-quote")) + str + CSL2.Output.Formats.rtf.text_escape(state.getTerm("close-quote"));
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return CSL2.Output.Formats.rtf.text_escape("\u2019");
          }
          return CSL2.Output.Formats.rtf.text_escape(state.getTerm("open-inner-quote")) + str + CSL2.Output.Formats.rtf.text_escape(state.getTerm("close-inner-quote"));
        },
        "@quotes/false": false,
        "bibstart": "{\\rtf ",
        "bibend": "}",
        "@display/block": "\\line{}%%STRING%%\\line\r\n",
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str;
        },
        "@display/left-margin": function(state, str) {
          return str + "\\tab ";
        },
        "@display/right-inline": function(state, str) {
          return str + "\r\n";
        },
        "@display/indent": function(state, str) {
          return "\n\\tab " + str + "\\line\r\n";
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL2.Output.Formats.prototype.asciidoc = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace("*", "pass:[*]", "g").replace("_", "pass:[_]", "g").replace("#", "pass:[#]", "g").replace("^", "pass:[^]", "g").replace("~", "pass:[~]", "g").replace("[[", "pass:[[[]", "g").replace("  ", "&#160; ", "g").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return "^" + CSL2.SUPERSCRIPTS[aChar] + "^";
          });
        },
        "bibstart": "",
        "bibend": "",
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-style/italic": "__%%STRING%%__",
        "@font-style/oblique": "__%%STRING%%__",
        "@font-style/normal": false,
        "@font-variant/small-caps": "[small-caps]#%%STRING%%#",
        "@font-variant/normal": false,
        "@font-weight/bold": "**%%STRING%%**",
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": "[underline]##%%STRING%%##",
        "@vertical-align/sup": "^^%%STRING%%^^",
        "@vertical-align/sub": "~~%%STRING%%~~",
        "@vertical-align/baseline": false,
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return "``";
          }
          return "``" + str + "''";
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "`";
          }
          return "`" + str + "'";
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return str + "\n";
        },
        "@display/block": function(state, str) {
          return str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return " " + str;
        },
        "@display/indent": function(state, str) {
          return " " + str;
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return doiurl + "[" + str + "]";
        }
      };
      CSL2.Output.Formats.prototype.fo = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace("  ", "&#160; ", "g").replace(CSL2.SUPERSCRIPTS_REGEXP, function(aChar) {
            return '<fo:inline vertical-align="super">' + CSL2.SUPERSCRIPTS[aChar] + "</fo:inline>";
          });
        },
        "bibstart": "",
        "bibend": "",
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-style/italic": '<fo:inline font-style="italic">%%STRING%%</fo:inline>',
        "@font-style/oblique": '<fo:inline font-style="oblique">%%STRING%%</fo:inline>',
        "@font-style/normal": '<fo:inline font-style="normal">%%STRING%%</fo:inline>',
        "@font-variant/small-caps": '<fo:inline font-variant="small-caps">%%STRING%%</fo:inline>',
        "@font-variant/normal": '<fo:inline font-variant="normal">%%STRING%%</fo:inline>',
        "@font-weight/bold": '<fo:inline font-weight="bold">%%STRING%%</fo:inline>',
        "@font-weight/normal": '<fo:inline font-weight="normal">%%STRING%%</fo:inline>',
        "@font-weight/light": '<fo:inline font-weight="lighter">%%STRING%%</fo:inline>',
        "@text-decoration/none": '<fo:inline text-decoration="none">%%STRING%%</fo:inline>',
        "@text-decoration/underline": '<fo:inline text-decoration="underline">%%STRING%%</fo:inline>',
        "@vertical-align/sup": '<fo:inline vertical-align="super">%%STRING%%</fo:inline>',
        "@vertical-align/sub": '<fo:inline vertical-align="sub">%%STRING%%</fo:inline>',
        "@vertical-align/baseline": '<fo:inline vertical-align="baseline">%%STRING%%</fo:inline>',
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          var indent = "";
          if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {
            var hi = state.bibliography.opt.hangingindent;
            indent = ' start-indent="' + hi + 'em" text-indent="-' + hi + 'em"';
          }
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
            insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return '<fo:block id="' + this.system_id + '"' + indent + ">" + str + "</fo:block>\n" + insert;
        },
        "@display/block": function(state, str) {
          return "\n  <fo:block>" + str + "</fo:block>\n";
        },
        "@display/left-margin": function(state, str) {
          return '\n  <fo:table table-layout="fixed" width="100%">\n    <fo:table-column column-number="1" column-width="$$$__COLUMN_WIDTH_1__$$$"/>\n    <fo:table-column column-number="2" column-width="proportional-column-width(1)"/>\n    <fo:table-body>\n      <fo:table-row>\n        <fo:table-cell>\n          <fo:block>' + str + "</fo:block>\n        </fo:table-cell>\n        ";
        },
        "@display/right-inline": function(state, str) {
          return "<fo:table-cell>\n          <fo:block>" + str + "</fo:block>\n        </fo:table-cell>\n      </fo:table-row>\n    </fo:table-body>\n  </fo:table>\n";
        },
        "@display/indent": function(state, str) {
          return '<fo:block margin-left="2em">' + str + "</fo:block>\n";
        },
        "@showid/true": function(state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && typeof str === "string") {
            var prePunct = "";
            if (str) {
              var m = str.match(CSL2.VARIABLE_WRAPPER_PREPUNCT_REX);
              prePunct = m[1];
              str = m[2];
            }
            var postPunct = "";
            if (str && CSL2.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
              postPunct = str.slice(-1);
              str = str.slice(0, -1);
            }
            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
            return str;
          }
        },
        "@URL/true": function(state, str) {
          return `<fo:basic-link external-destination="url('` + str + `')">` + str + "</fo:basic-link>";
        },
        "@DOI/true": function(state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
            doiurl = "https://doi.org/" + str;
          }
          return `<fo:basic-link external-destination="url('` + doiurl + `')">` + str + "</fo:basic-link>";
        }
      };
      CSL2.Output.Formats.prototype.latex = {
        "text_escape": function(text) {
          if (!text) {
            text = "";
          }
          return text;
        },
        "bibstart": "\\begin{thebibliography}{4}",
        "bibend": "end{thebibliography}",
        "@font-style/italic": "{\\em %%STRING%%}",
        "@font-style/oblique": false,
        "@font-style/normal": false,
        "@font-variant/small-caps": false,
        "@passthrough/true": CSL2.Output.Formatters.passthrough,
        "@font-variant/normal": false,
        "@font-weight/bold": "{\\bf %%STRING%%}",
        "@font-weight/normal": false,
        "@font-weight/light": false,
        "@text-decoration/none": false,
        "@text-decoration/underline": false,
        "@vertical-align/baseline": false,
        "@vertical-align/sup": false,
        "@vertical-align/sub": false,
        "@strip-periods/true": CSL2.Output.Formatters.passthrough,
        "@strip-periods/false": CSL2.Output.Formatters.passthrough,
        "@quotes/true": function(state, str) {
          if (typeof str === "undefined") {
            return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
        },
        "@quotes/inner": function(state, str) {
          if (typeof str === "undefined") {
            return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
        },
        "@quotes/false": false,
        "@cite/entry": function(state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
        },
        "@bibliography/entry": function(state, str) {
          return "\\bibitem{" + state.sys.embedBibliographyEntry(this.item_id) + "}\n";
        },
        "@display/block": function(state, str) {
          return "\n" + str;
        },
        "@display/left-margin": function(state, str) {
          return str;
        },
        "@display/right-inline": function(state, str) {
          return str;
        },
        "@display/indent": function(state, str) {
          return "\n    " + str;
        },
        "@showid/true": function(state, str, cslid) {
          return str;
        },
        "@URL/true": function(state, str) {
          return str;
        },
        "@DOI/true": function(state, str) {
          return str;
        }
      };
      CSL2.Output.Formats = new CSL2.Output.Formats();
      CSL2.Registry = function(state) {
        this.debug = false;
        this.state = state;
        this.registry = {};
        this.reflist = [];
        this.refhash = {};
        this.namereg = new CSL2.Registry.NameReg(state);
        this.citationreg = new CSL2.Registry.CitationReg(state);
        this.authorstrings = {};
        this.masterMap = {};
        this.mylist = [];
        this.myhash = {};
        this.deletes = [];
        this.inserts = [];
        this.uncited = {};
        this.refreshes = {};
        this.akeys = {};
        this.oldseq = {};
        this.return_data = {};
        this.ambigcites = {};
        this.ambigresets = {};
        this.sorter = new CSL2.Registry.Comparifier(state, "bibliography_sort");
        this.getSortedIds = function() {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push("" + this.reflist[i].id);
          }
          return ret;
        };
        this.getSortedRegistryItems = function() {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
            ret.push(this.reflist[i]);
          }
          return ret;
        };
      };
      CSL2.Registry.prototype.init = function(itemIDs, uncited_flag) {
        var i, ilen;
        this.oldseq = {};
        if (uncited_flag) {
          this.uncited = {};
          for (var i = 0, ilen = itemIDs.length; i < ilen; i += 1) {
            if (!this.myhash[itemIDs[i]]) {
              this.mylist.push("" + itemIDs[i]);
            }
            this.uncited[itemIDs[i]] = true;
            this.myhash[itemIDs[i]] = true;
          }
        } else {
          for (var key in this.uncited) {
            itemIDs.push(key);
          }
          var myhash = {};
          for (i = itemIDs.length - 1; i > -1; i += -1) {
            if (myhash[itemIDs[i]]) {
              itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));
            } else {
              myhash[itemIDs[i]] = true;
            }
          }
          this.mylist = itemIDs;
          this.myhash = myhash;
        }
        this.refreshes = {};
        this.touched = {};
        this.ambigsTouched = {};
        this.ambigresets = {};
      };
      CSL2.Registry.prototype.dopurge = function(myhash) {
        for (var i = this.mylist.length - 1; i > -1; i += -1) {
          if (this.citationreg.citationsByItemId) {
            if ((!this.citationreg.citationsByItemId || !this.citationreg.citationsByItemId[this.mylist[i]]) && !myhash[this.mylist[i]]) {
              delete this.myhash[this.mylist[i]];
              delete this.uncited[this.mylist[i]];
              this.mylist = this.mylist.slice(0, i).concat(this.mylist.slice(i + 1));
            }
          }
        }
        this.dodeletes(this.myhash);
      };
      CSL2.Registry.prototype.dodeletes = function(myhash) {
        var otheritems, key, ambig, pos, len, items, kkey, mypos, id;
        if (typeof myhash === "string") {
          var key = myhash;
          myhash = {};
          myhash[key] = true;
        }
        for (var key in this.registry) {
          if (!myhash[key]) {
            if (this.uncited[key]) {
              continue;
            }
            otheritems = this.namereg.delitems(key);
            for (kkey in otheritems) {
              this.refreshes[kkey] = true;
            }
            ambig = this.registry[key].ambig;
            mypos = this.ambigcites[ambig].indexOf(key);
            if (mypos > -1) {
              items = this.ambigcites[ambig].slice();
              this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos + 1, items.length));
              this.ambigresets[ambig] = this.ambigcites[ambig].length;
            }
            len = this.ambigcites[ambig].length;
            for (pos = 0; pos < len; pos += 1) {
              id = "" + this.ambigcites[ambig][pos];
              this.refreshes[id] = true;
            }
            if (this.registry[key].siblings) {
              if (this.registry[key].siblings.length == 1) {
                var loneSiblingID = this.registry[key].siblings[0];
                if (this.registry[loneSiblingID].siblings) {
                  this.registry[loneSiblingID].siblings.pop();
                  this.registry[loneSiblingID].master = true;
                }
              } else if (this.registry[key].siblings.length > 1) {
                var removeIDs = [key];
                if (this.registry[key].master) {
                  var newmasterID = this.registry[key].siblings[0];
                  var newmaster = this.registry[newmasterID];
                  newmaster.master = true;
                  removeIDs.push(newmasterID);
                }
                var buffer = [];
                for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {
                  var siblingID = this.registry[key].siblings.pop();
                  if (removeIDs.indexOf(siblingID) === -1) {
                    buffer.push(siblingID);
                  }
                }
                for (var k = buffer.length - 1; k > -1; k += -1) {
                  this.registry[key].siblings.push(buffer[k]);
                }
              }
            }
            for (var i = this.reflist.length - 1; i > -1; i--) {
              if (this.reflist[i].id === key) {
                this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
              }
            }
            delete this.registry[key];
            delete this.refhash[key];
            this.return_data.bibchange = true;
          }
        }
      };
      CSL2.Registry.prototype.doinserts = function(mylist) {
        var item, Item, akey, newitem, abase, i, ilen;
        if (typeof mylist === "string") {
          mylist = [mylist];
        }
        for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {
          item = mylist[i];
          if (!this.registry[item]) {
            Item = this.state.retrieveItem(item);
            akey = CSL2.getAmbiguousCite.call(this.state, Item);
            this.ambigsTouched[akey] = true;
            if (!Item.legislation_id) {
              this.akeys[akey] = true;
            }
            newitem = {
              "id": "" + item,
              "seq": 0,
              "offset": 0,
              "sortkeys": false,
              "ambig": false,
              "rendered": false,
              "disambig": false,
              "ref": Item,
              "newItem": true
            };
            this.registry[item] = newitem;
            if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {
              this.registry[item]["first-reference-note-number"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;
            }
            abase = CSL2.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, item, abase);
            this.touched[item] = true;
            this.return_data.bibchange = true;
          }
        }
      };
      CSL2.Registry.prototype.rebuildlist = function(nosort) {
        var len, pos, item, Item;
        if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
              this.reflist_inserts.push(Item);
            }
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = pos + 1;
          }
        } else {
          this.reflist = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.reflist.push(Item);
            this.oldseq[item] = this.registry[item].seq;
            this.registry[item].seq = pos + 1;
          }
        }
      };
      CSL2.Registry.prototype.dorefreshes = function() {
        var key, regtoken, Item, akey, abase;
        for (var key in this.refreshes) {
          regtoken = this.registry[key];
          if (!regtoken) {
            continue;
          }
          regtoken.sortkeys = void 0;
          Item = this.state.refetchItem(key);
          var akey = regtoken.ambig;
          if (typeof akey === "undefined") {
            this.state.tmp.disambig_settings = false;
            akey = CSL2.getAmbiguousCite.call(this.state, Item);
            abase = CSL2.getAmbigConfig.call(this.state);
            this.registerAmbigToken(akey, key, abase);
          }
          for (var akkey in this.ambigresets) {
            if (this.ambigresets[akkey] === 1) {
              var loneKey = this.ambigcites[akey][0];
              var Item = this.state.refetchItem(loneKey);
              this.registry[loneKey].disambig = new CSL2.AmbigConfig();
              this.state.tmp.disambig_settings = false;
              var akey = CSL2.getAmbiguousCite.call(this.state, Item);
              var abase = CSL2.getAmbigConfig.call(this.state);
              this.registerAmbigToken(akey, loneKey, abase);
            }
          }
          this.state.tmp.taintedItemIDs[key] = true;
          this.ambigsTouched[akey] = true;
          if (!Item.legislation_id) {
            this.akeys[akey] = true;
          }
          this.touched[key] = true;
        }
      };
      CSL2.Registry.prototype.setdisambigs = function() {
        for (var akey in this.ambigsTouched) {
          this.state.disambiguate.run(akey);
        }
        this.ambigsTouched = {};
        this.akeys = {};
      };
      CSL2.Registry.prototype.renumber = function() {
        var len, pos, item;
        if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
          this.state.bibliography_sort.tmp.citation_number_map = {};
        }
        len = this.reflist.length;
        for (pos = 0; pos < len; pos += 1) {
          item = this.reflist[pos];
          item.seq = pos + 1;
          if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL2.DESCENDING) {
            this.state.bibliography_sort.tmp.citation_number_map[item.seq] = this.reflist.length - item.seq + 1;
          }
          if (this.state.opt.update_mode === CSL2.NUMERIC && item.seq != this.oldseq[item.id]) {
            this.state.tmp.taintedItemIDs[item.id] = true;
          }
          if (item.seq != this.oldseq[item.id]) {
            this.return_data.bibchange = true;
          }
        }
      };
      CSL2.Registry.prototype.setsortkeys = function() {
        var key;
        for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {
          var key = this.mylist[i];
          if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {
            this.registry[key].sortkeys = CSL2.getSortKeys.call(this.state, this.state.retrieveItem(key), "bibliography_sort");
          }
        }
      };
      CSL2.Registry.prototype._insertItem = function(element, array) {
        array.splice(this._locationOf(element, array) + 1, 0, element);
        return array;
      };
      CSL2.Registry.prototype._locationOf = function(element, array, start, end) {
        if (array.length === 0) {
          return -1;
        }
        start = start || 0;
        end = end || array.length;
        var pivot = start + end >> 1;
        var c = this.sorter.compareKeys(element, array[pivot]);
        if (end - start <= 1) {
          return c == -1 ? pivot - 1 : pivot;
        }
        switch (c) {
          case -1:
            return this._locationOf(element, array, start, pivot);
          case 0:
            return pivot;
          case 1:
            return this._locationOf(element, array, pivot, end);
        }
      };
      CSL2.Registry.prototype.sorttokens = function(nosort) {
        var len, item, Item, pos;
        if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            if (Item.newItem) {
              this.reflist_inserts.push(Item);
            }
          }
          for (var key in this.state.tmp.taintedItemIDs) {
            if (this.registry[key] && !this.registry[key].newItem) {
              for (var i = this.reflist.length - 1; i > -1; i--) {
                if (this.reflist[i].id === key) {
                  this.reflist_inserts.push(this.reflist[i]);
                  this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i + 1));
                }
              }
            }
          }
          for (var i = 0, ilen = this.reflist_inserts.length; i < ilen; i++) {
            var Item = this.reflist_inserts[i];
            delete Item.newItem;
            this.reflist = this._insertItem(Item, this.reflist);
          }
          for (pos = 0; pos < len; pos += 1) {
            item = this.mylist[pos];
            Item = this.registry[item];
            this.registry[item].seq = pos + 1;
          }
        }
      };
      CSL2.Registry.Comparifier = function(state, keyset) {
        var sort_directions, len, pos, compareKeys;
        var sortCompare = CSL2.getSortCompare.call(state, state.opt["default-locale-sort"]);
        sort_directions = state[keyset].opt.sort_directions;
        this.compareKeys = function(a, b) {
          len = a.sortkeys ? a.sortkeys.length : 0;
          for (pos = 0; pos < len; pos += 1) {
            var cmp = 0;
            if (a.sortkeys[pos] === b.sortkeys[pos]) {
              cmp = 0;
            } else if (typeof a.sortkeys[pos] === "undefined") {
              cmp = sort_directions[pos][1];
            } else if (typeof b.sortkeys[pos] === "undefined") {
              cmp = sort_directions[pos][0];
            } else {
              cmp = sortCompare(a.sortkeys[pos], b.sortkeys[pos]);
            }
            if (0 < cmp) {
              return sort_directions[pos][1];
            } else if (0 > cmp) {
              return sort_directions[pos][0];
            }
          }
          if (a.seq > b.seq) {
            return 1;
          } else if (a.seq < b.seq) {
            return -1;
          }
          return 0;
        };
        compareKeys = this.compareKeys;
        this.compareCompositeKeys = function(a, b) {
          return compareKeys(a[1], b[1]);
        };
      };
      CSL2.Registry.prototype.compareRegistryTokens = function(a, b) {
        if (a.seq > b.seq) {
          return 1;
        } else if (a.seq < b.seq) {
          return -1;
        }
        return 0;
      };
      CSL2.Registry.prototype.registerAmbigToken = function(akey, id, ambig_config) {
        if (!this.registry[id]) {
          CSL2.debug("Warning: unregistered item: itemID=(" + id + "), akey=(" + akey + ")");
        }
        if (this.registry[id] && this.registry[id].disambig && this.registry[id].disambig.names) {
          for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {
            var new_names_params = ambig_config.names[i];
            var old_names_params = this.registry[id].disambig.names[i];
            if (new_names_params !== old_names_params) {
              this.state.tmp.taintedItemIDs[id] = true;
            } else if (ambig_config.givens[i]) {
              for (var j = 0, jlen = ambig_config.givens[i].length; j < jlen; j += 1) {
                var new_gnames_params = ambig_config.givens[i][j];
                var old_gnames_params = this.registry[id].disambig.givens[i][j];
                if (new_gnames_params !== old_gnames_params) {
                  this.state.tmp.taintedItemIDs[id] = true;
                }
              }
            }
          }
        }
        if (!this.ambigcites[akey]) {
          this.ambigcites[akey] = [];
        }
        if (this.ambigcites[akey].indexOf("" + id) === -1) {
          this.ambigcites[akey].push("" + id);
        }
        this.registry[id].ambig = akey;
        this.registry[id].disambig = CSL2.cloneAmbigConfig(ambig_config);
      };
      CSL2.getSortKeys = function(Item, key_type) {
        var area, root, extension, strip_prepositions, len, pos;
        if (false) {
          CSL2.debug("KEY TYPE: " + key_type);
        }
        area = this.tmp.area;
        root = this.tmp.root;
        extension = this.tmp.extension;
        strip_prepositions = CSL2.Util.Sort.strip_prepositions;
        this.tmp.area = key_type;
        this.tmp.root = key_type.indexOf("_") > -1 ? key_type.slice(0, -5) : key_type;
        this.tmp.extension = "_sort";
        this.tmp.disambig_override = true;
        this.tmp.disambig_request = false;
        this.tmp.suppress_decorations = true;
        CSL2.getCite.call(this, Item);
        this.tmp.suppress_decorations = false;
        this.tmp.disambig_override = false;
        len = this[key_type].keys.length;
        for (pos = 0; pos < len; pos += 1) {
          this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);
        }
        if (false) {
          CSL2.debug("sort keys (" + key_type + "): " + this[key_type].keys);
        }
        this.tmp.area = area;
        this.tmp.root = root;
        this.tmp.extension = extension;
        return this[key_type].keys;
      };
      CSL2.Registry.NameReg = function(state) {
        var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;
        this.state = state;
        this.namereg = {};
        this.nameind = {};
        this.nameindpkeys = {};
        this.itemkeyreg = {};
        strip_periods = function(str) {
          if (!str) {
            str = "";
          }
          return str.replace(/\./g, " ").replace(/\s+/g, " ").replace(/\s+$/, "");
        };
        set_keys = function(state2, itemid, nameobj) {
          pkey = strip_periods(nameobj.family);
          skey = strip_periods(nameobj.given);
          var m = skey.match(/[,\!]* ([^,]+)$/);
          if (m && m[1] === m[1].toLowerCase()) {
            skey = skey.replace(/[,\!]* [^,]+$/, "");
          }
          ikey = CSL2.Util.Names.initializeWith(state2, skey, "%s");
          if (state2.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
            pkey = "" + itemid + pkey;
          }
        };
        evalname = function(item_id, nameobj, namenum, request_base, form, initials) {
          var param;
          if (state.tmp.area.slice(0, 12) === "bibliography" && !form) {
            if (typeof initials === "string") {
              return 1;
            } else {
              return 2;
            }
          }
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          set_keys(this.state, "" + item_id, nameobj);
          param = 2;
          dagopt = state.opt["disambiguate-add-givenname"];
          gdropt = state.citation.opt["givenname-disambiguation-rule"];
          var gdropt_orig = gdropt;
          if (gdropt === "by-cite") {
            gdropt = "all-names";
          }
          if (form === "short") {
            param = 0;
          } else if (typeof initials === "string") {
            param = 1;
          }
          if (typeof this.namereg[pkey] === "undefined" || typeof this.namereg[pkey].ikey[ikey] === "undefined") {
            return param;
          }
          if (gdropt_orig === "by-cite" && param <= request_base) {
            return request_base;
          }
          if (!dagopt) {
            return param;
          }
          if (typeof gdropt === "string" && gdropt.slice(0, 12) === "primary-name" && namenum > 0) {
            return param;
          }
          if (!gdropt || gdropt === "all-names" || gdropt === "primary-name") {
            if (this.namereg[pkey].count > 1) {
              param = 1;
            }
            if (this.namereg[pkey].ikey && this.namereg[pkey].ikey[ikey].count > 1 || this.namereg[pkey].count > 1 && typeof initials !== "string") {
              param = 2;
            }
          } else if (gdropt === "all-names-with-initials" || gdropt === "primary-name-with-initials") {
            if (this.namereg[pkey].count > 1) {
              param = 1;
            } else {
              param = 0;
            }
          }
          if (!state.registry.registry[item_id]) {
            if (form == "short") {
              return 0;
            } else if (typeof initials == "string") {
              return 1;
            }
          } else {
            return param;
          }
        };
        delitems = function(ids) {
          var pos, len, posB, id, fullkey;
          if (typeof ids === "string" || typeof ids === "number") {
            ids = ["" + ids];
          }
          var ret = {};
          len = ids.length;
          for (pos = 0; pos < len; pos += 1) {
            id = "" + ids[pos];
            if (!this.nameind[id]) {
              continue;
            }
            for (fullkey in this.nameind[id]) {
              if (this.nameind[id].hasOwnProperty(fullkey)) {
                var key = fullkey.split("::");
                pkey = key[0];
                ikey = key[1];
                skey = key[2];
                if (typeof this.namereg[pkey] === "undefined") {
                  continue;
                }
                items = this.namereg[pkey].items;
                if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {
                  myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;
                  posB = myitems.indexOf("" + id);
                  if (posB > -1) {
                    this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([posB + 1]));
                  }
                  if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {
                    delete this.namereg[pkey].ikey[ikey].skey[skey];
                    this.namereg[pkey].ikey[ikey].count += -1;
                    if (this.namereg[pkey].ikey[ikey].count < 2) {
                      for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                      }
                    }
                  }
                }
                if (ikey && this.namereg[pkey].ikey[ikey]) {
                  posB = this.namereg[pkey].ikey[ikey].items.indexOf("" + id);
                  if (posB > -1) {
                    items = this.namereg[pkey].ikey[ikey].items.slice();
                    this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));
                  }
                  if (this.namereg[pkey].ikey[ikey].items.length === 0) {
                    delete this.namereg[pkey].ikey[ikey];
                    this.namereg[pkey].count += -1;
                    if (this.namereg[pkey].count < 2) {
                      for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                        state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                      }
                    }
                  }
                }
                if (pkey) {
                  posB = this.namereg[pkey].items.indexOf("" + id);
                  if (posB > -1) {
                    items = this.namereg[pkey].items.slice();
                    this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));
                  }
                  if (this.namereg[pkey].items.length < 2) {
                    delete this.namereg[pkey];
                  }
                }
                delete this.nameind[id][fullkey];
              }
            }
            delete this.nameind[id];
            delete this.nameindpkeys[id];
          }
          return ret;
        };
        addname = function(item_id, nameobj, pos) {
          var i, ilen;
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          if (state.citation.opt["givenname-disambiguation-rule"] && state.citation.opt["givenname-disambiguation-rule"].slice(0, 8) === "primary-" && pos !== 0) {
            return;
          }
          if (state.opt["demote-non-dropping-particle"] === "never" && nameobj["non-dropping-particle"] && nameobj["family"]) {
            nameobj["family"] = nameobj["non-dropping-particle"] + " " + nameobj["family"];
          }
          set_keys(this.state, "" + item_id, nameobj);
          if (pkey) {
            if (typeof this.namereg[pkey] === "undefined") {
              this.namereg[pkey] = {};
              this.namereg[pkey].count = 0;
              this.namereg[pkey].ikey = {};
              this.namereg[pkey].items = [item_id];
            } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].items.push(item_id);
            }
          }
          if (pkey && ikey) {
            if (typeof this.namereg[pkey].ikey[ikey] === "undefined") {
              this.namereg[pkey].ikey[ikey] = {};
              this.namereg[pkey].ikey[ikey].count = 0;
              this.namereg[pkey].ikey[ikey].skey = {};
              this.namereg[pkey].ikey[ikey].items = [item_id];
              this.namereg[pkey].count += 1;
              if (this.namereg[pkey].count === 2) {
                for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                  state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                }
              }
            } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].ikey[ikey].items.push(item_id);
            }
          }
          if (pkey && ikey && skey) {
            if (typeof this.namereg[pkey].ikey[ikey].skey[skey] === "undefined") {
              this.namereg[pkey].ikey[ikey].skey[skey] = {};
              this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];
              this.namereg[pkey].ikey[ikey].count += 1;
              if (this.namereg[pkey].ikey[ikey].count === 2) {
                for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                  state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                }
              }
            } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
              this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
            }
          }
          if (typeof this.nameind[item_id] === "undefined") {
            this.nameind[item_id] = {};
            this.nameindpkeys[item_id] = {};
          }
          if (pkey) {
            this.nameind[item_id][pkey + "::" + ikey + "::" + skey] = true;
            this.nameindpkeys[item_id][pkey] = this.namereg[pkey];
          }
        };
        this.addname = addname;
        this.delitems = delitems;
        this.evalname = evalname;
      };
      CSL2.Registry.CitationReg = function() {
        this.citationById = {};
        this.citationByIndex = [];
      };
      CSL2.Disambiguation = function(state) {
        this.state = state;
        this.sys = this.state.sys;
        this.registry = state.registry.registry;
        this.ambigcites = state.registry.ambigcites;
        this.configModes();
        this.debug = false;
      };
      CSL2.Disambiguation.prototype.run = function(akey) {
        if (!this.modes.length) {
          return;
        }
        if (this.debug) {
          print("[A] === RUN ===");
        }
        this.akey = akey;
        if (this.initVars(akey)) {
          this.runDisambig();
        }
      };
      CSL2.Disambiguation.prototype.runDisambig = function() {
        var ismax;
        if (this.debug) {
          print("[C] === runDisambig() ===");
        }
        this.initGivens = true;
        while (this.lists.length) {
          this.gnameset = 0;
          this.gname = 0;
          this.clashes = [1, 0];
          while (this.lists[0][1].length) {
            this.listpos = 0;
            if (!this.base) {
              this.base = this.lists[0][0];
            }
            ismax = this.incrementDisambig();
            this.scanItems(this.lists[0]);
            this.evalScan(ismax);
          }
          this.lists = this.lists.slice(1);
        }
      };
      CSL2.Disambiguation.prototype.scanItems = function(list) {
        var pos, len, otherItem;
        if (this.debug) {
          print("[2] === scanItems() ===");
        }
        this.Item = list[1][0];
        this.ItemCite = CSL2.getAmbiguousCite.call(this.state, this.Item, this.base, true);
        this.scanlist = list[1];
        this.partners = [];
        this.partners.push(this.Item);
        this.nonpartners = [];
        var clashes = 0;
        for (var pos = 1, len = list[1].length; pos < len; pos += 1) {
          otherItem = list[1][pos];
          var otherItemCite = CSL2.getAmbiguousCite.call(this.state, otherItem, this.base, true);
          if (this.debug) {
            if (pos > 1) {
              print("  -----------");
            }
          }
          if (this.ItemCite === otherItemCite) {
            if (this.debug) {
              print("  [CLASH]--> " + this.Item.id + ": " + this.ItemCite);
              print("             " + otherItem.id + ": " + otherItemCite);
            }
            clashes += 1;
            this.partners.push(otherItem);
          } else {
            if (this.debug) {
              print("  [clear]--> " + this.Item.id + ": " + this.ItemCite);
              print("             " + otherItem.id + ": " + otherItemCite);
            }
            this.nonpartners.push(otherItem);
          }
        }
        this.clashes[0] = this.clashes[1];
        this.clashes[1] = clashes;
      };
      CSL2.Disambiguation.prototype.evalScan = function(maxed) {
        this[this.modes[this.modeindex]](maxed);
        if (maxed) {
          if (this.modeindex < this.modes.length - 1) {
            this.modeindex += 1;
          } else {
            this.lists[this.listpos + 1] = [this.base, []];
          }
        }
      };
      CSL2.Disambiguation.prototype.disNames = function(ismax) {
        var i, ilen;
        if (this.debug) {
          print("[3] == disNames() ==");
        }
        if (this.clashes[1] === 0 && this.nonpartners.length === 1) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [a]: lone partner, one nonpartner");
            print("  registering " + this.partners[0].id + " and " + this.nonpartners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, []];
        } else if (this.clashes[1] === 0) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [b]: lone partner, unknown number of remaining nonpartners");
            print("  registering " + this.partners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.nonpartners];
          if (this.nonpartners.length) {
            this.initGivens = true;
          }
        } else if (this.nonpartners.length === 1) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [c]: lone nonpartner, unknown number of partners remaining");
            print("  registering " + this.nonpartners[0].id);
          }
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.partners];
        } else if (this.clashes[1] < this.clashes[0]) {
          this.captureStepToBase();
          if (this.debug) {
            print("  ** RESOLUTION [d]: better result, but no entries safe to register");
          }
          this.lists[this.listpos] = [this.betterbase, this.partners];
          this.lists.push([this.betterbase, this.nonpartners]);
        } else {
          if (this.debug) {
            print("  ** RESOLUTION [e]: no improvement, and clashes remain");
          }
          if (ismax) {
            this.lists[this.listpos] = [this.betterbase, this.nonpartners];
            this.lists.push([this.betterbase, this.partners]);
            if (this.modeindex === this.modes.length - 1) {
              if (this.debug) {
                print("     (registering clashing entries because we've run out of options)");
              }
              for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {
                this.state.registry.registerAmbigToken(this.akey, "" + this.partners[i].id, this.betterbase);
              }
              this.lists[this.listpos] = [this.betterbase, []];
            }
          }
        }
      };
      CSL2.Disambiguation.prototype.disExtraText = function() {
        if (this.debug) {
          print("[3] === disExtraText ==");
        }
        var done = false;
        if (this.clashes[1] === 0 && this.nonpartners.length < 2) {
          done = true;
        }
        if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {
          this.modeindex = 0;
          this.base.disambiguate = this.state.tmp.disambiguate_count;
          this.betterbase.disambiguate = this.state.tmp.disambiguate_count;
          if (!this.base.disambiguate) {
            this.initGivens = true;
            this.base.disambiguate = 1;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
            }
          } else {
            this.disNames();
          }
        } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {
          if (done || this.modeindex === this.modes.length - 1) {
            var base = this.lists[this.listpos][0];
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
            this.lists[this.listpos] = [this.betterbase, []];
          } else {
            this.modeindex = this.modes.length - 1;
            var base = this.lists[this.listpos][0];
            base.disambiguate = true;
            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
              this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
            }
          }
        }
      };
      CSL2.Disambiguation.prototype.disYears = function() {
        var pos, len, tokens, token;
        if (this.debug) {
          print("[3] === disYears ==");
        }
        tokens = [];
        var base = this.lists[this.listpos][0];
        if (this.clashes[1]) {
          for (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {
            var origid = this.state.registry.mylist[i];
            for (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {
              var token = this.lists[this.listpos][1][j];
              if (token.id == origid) {
                tokens.push(this.registry[token.id]);
                break;
              }
            }
          }
        }
        tokens.sort(this.state.registry.sorter.compareKeys);
        for (var pos = 0, len = tokens.length; pos < len; pos += 1) {
          base.year_suffix = "" + pos;
          var oldBase = this.state.registry.registry[tokens[pos].id].disambig;
          this.state.registry.registerAmbigToken(this.akey, "" + tokens[pos].id, base);
          if (CSL2.ambigConfigDiff(oldBase, base)) {
            this.state.tmp.taintedItemIDs[tokens[pos].id] = true;
          }
        }
        this.lists[this.listpos] = [this.betterbase, []];
      };
      CSL2.Disambiguation.prototype.incrementDisambig = function() {
        if (this.debug) {
          print("\n[1] === incrementDisambig() ===");
        }
        if (this.initGivens) {
          this.initGivens = false;
          return false;
        }
        var maxed = false;
        var increment_names = true;
        if (this.modes[this.modeindex] === "disNames") {
          increment_names = false;
          if (typeof this.givensMax !== "number") {
            increment_names = true;
          }
          var increment_namesets = false;
          if (typeof this.namesMax !== "number") {
            increment_namesets = true;
          }
          if (typeof this.givensMax === "number") {
            if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {
              this.base.givens[this.gnameset][this.gname] += 1;
            } else {
              increment_names = true;
            }
          }
          if (typeof this.namesMax === "number" && increment_names) {
            if (this.state.opt["disambiguate-add-names"]) {
              increment_namesets = false;
              if (this.gname < this.namesMax) {
                this.base.names[this.gnameset] += 1;
                this.gname += 1;
              } else {
                increment_namesets = true;
              }
            } else {
              increment_namesets = true;
            }
          }
          if (typeof this.namesetsMax === "number" && increment_namesets) {
            if (this.gnameset < this.namesetsMax) {
              this.gnameset += 1;
              this.base.names[this.gnameset] = 1;
              this.gname = 0;
            }
          }
          if (this.debug) {
            print("    ------------------");
            print("    incremented values");
            print("    ------------------");
            print("    | gnameset: " + this.gnameset);
            print("    | gname: " + this.gname);
            print("    | names value: " + this.base.names[this.gnameset]);
            if (this.base.givens.length) {
              print("    | givens value: " + this.base.givens[this.gnameset][this.gname]);
            } else {
              print("    | givens value: nil");
            }
            print("    | namesetsMax: " + this.namesetsMax);
            print("    | namesMax: " + this.namesMax);
            print("    | givensMax: " + this.givensMax);
          }
          if ((typeof this.namesetsMax !== "number" || this.namesetsMax === -1 || this.gnameset === this.namesetsMax) && (!this.state.opt["disambiguate-add-names"] || typeof this.namesMax !== "number" || this.gname === this.namesMax) && (typeof this.givensMax != "number" || typeof this.base.givens[this.gnameset] === "undefined" || typeof this.base.givens[this.gnameset][this.gname] === "undefined" || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {
            maxed = true;
            if (this.debug) {
              print("    MAXED");
            }
          }
        } else if (this.modes[this.modeindex] === "disExtraText") {
          this.base.disambiguate += 1;
          this.betterbase.disambiguate += 1;
        }
        return maxed;
      };
      CSL2.Disambiguation.prototype.initVars = function(akey) {
        var i, ilen, myIds, myItemBundles, myItems;
        if (this.debug) {
          print("[B] === initVars() ===");
        }
        this.lists = [];
        this.base = false;
        this.betterbase = false;
        this.akey = akey;
        this.maxNamesByItemId = {};
        myItemBundles = [];
        myIds = this.ambigcites[akey];
        if (!myIds || !myIds.length) {
          return false;
        }
        var myItem = this.state.refetchItem("" + myIds[0]);
        this.getCiteData(myItem);
        this.base = CSL2.getAmbigConfig.call(this.state);
        if (myIds && myIds.length > 1) {
          myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {
            myItem = this.state.refetchItem("" + myIds[i]);
            this.getCiteData(myItem, this.base);
            myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          }
          myItemBundles.sort(function(a, b) {
            if (a[0] > b[0]) {
              return 1;
            } else if (a[0] < b[0]) {
              return -1;
            } else {
              if (a[1].id > b[1].id) {
                return 1;
              } else if (a[1].id < b[1].id) {
                return -1;
              } else {
                return 0;
              }
            }
          });
          myItems = [];
          for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {
            myItems.push(myItemBundles[i][1]);
          }
          this.lists.push([this.base, myItems]);
          this.Item = this.lists[0][1][0];
        } else {
          this.Item = this.state.refetchItem("" + myIds[0]);
        }
        this.modeindex = 0;
        if (this.state.citation.opt["disambiguate-add-names"] || true) {
          this.namesMax = this.maxNamesByItemId[this.Item.id][0];
        } else {
          var namesMax = this.base.names[0];
          for (var i = 1, ilen = this.base.names.length; i < ilen; i += 1) {
            namesMax = Math.max(namesMax, this.base.names.names[i]);
          }
        }
        this.padBase(this.base);
        this.padBase(this.betterbase);
        this.base.year_suffix = false;
        this.base.disambiguate = false;
        this.betterbase.year_suffix = false;
        this.betterbase.disambiguate = false;
        if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.state.opt["disambiguate-add-givenname"]) {
          this.givensMax = 2;
        }
        return true;
      };
      CSL2.Disambiguation.prototype.padBase = function(base) {
        for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
          if (!base.givens[i]) {
            base.givens[i] = [];
          }
          for (var j = 0, jlen = base.names[i]; j < jlen; j += 1) {
            if (!base.givens[i][j]) {
              base.givens[i][j] = 0;
            }
          }
        }
      };
      CSL2.Disambiguation.prototype.configModes = function() {
        var dagopt, gdropt;
        this.modes = [];
        dagopt = this.state.opt["disambiguate-add-givenname"];
        gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
        if (this.state.opt["disambiguate-add-names"] || dagopt && gdropt === "by-cite") {
          this.modes.push("disNames");
        }
        if (this.state.opt.development_extensions.prioritize_disambiguate_condition) {
          if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
          }
          if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
          }
        } else {
          if (this.state.opt["disambiguate-add-year-suffix"]) {
            this.modes.push("disYears");
          }
          if (this.state.opt.has_disambiguate) {
            this.modes.push("disExtraText");
          }
        }
      };
      CSL2.Disambiguation.prototype.getCiteData = function(Item, base) {
        if (!this.maxNamesByItemId[Item.id]) {
          CSL2.getAmbiguousCite.call(this.state, Item, base);
          base = CSL2.getAmbigConfig.call(this.state);
          this.maxNamesByItemId[Item.id] = CSL2.getMaxVals.call(this.state);
          this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
          for (var i = 0, ilen = this.state.registry.registry[Item.id].disambig.givens.length; i < ilen; i += 1) {
            this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();
          }
          this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;
          if (!this.base) {
            this.base = base;
            this.betterbase = CSL2.cloneAmbigConfig(base);
          }
          if (base.names.length < this.base.names.length) {
            this.base = base;
          }
          for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
            if (base.names[i] > this.base.names[i]) {
              this.base.givens[i] = base.givens[i].slice();
              this.base.names[i] = base.names[i];
              this.betterbase.names = this.base.names.slice();
              this.betterbase.givens = this.base.givens.slice();
              this.padBase(this.base);
              this.padBase(this.betterbase);
            }
          }
          this.betterbase.givens = this.base.givens.slice();
          for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {
            this.betterbase.givens[j] = this.base.givens[j].slice();
          }
        }
      };
      CSL2.Disambiguation.prototype.captureStepToBase = function() {
        if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && this.base.givens && this.base.givens.length) {
          if (typeof this.base.givens[this.gnameset][this.gname] !== "undefined") {
            if (this.betterbase.givens.length < this.base.givens.length) {
              this.betterbase.givens = JSON.parse(JSON.stringify(this.base.givens));
            }
            this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];
          }
        }
        this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];
      };
      CSL2.Engine.prototype.getJurisdictionList = function(jurisdiction2) {
        var jurisdictionList = [];
        var jurisdictionElems = jurisdiction2.split(":");
        for (var j = jurisdictionElems.length; j > 0; j--) {
          var composedID = jurisdictionElems.slice(0, j).join(":");
          jurisdictionList.push(composedID);
          if (this.opt.jurisdiction_fallbacks[composedID]) {
            var fallback = this.opt.jurisdiction_fallbacks[composedID];
            jurisdictionList.push(fallback);
          }
        }
        if (jurisdictionList.indexOf("us") === -1) {
          jurisdictionList.push("us");
        }
        return jurisdictionList;
      };
      CSL2.Engine.prototype.loadStyleModule = function(jurisdiction2, xmlSource, skipFallback) {
        var myFallback = null;
        var macroCount = 0;
        this.juris[jurisdiction2] = {};
        var myXml = CSL2.setupXml(xmlSource);
        myXml.addMissingNameNodes(myXml.dataObj);
        myXml.addInstitutionNodes(myXml.dataObj);
        myXml.insertPublisherAndPlace(myXml.dataObj);
        myXml.flagDateMacros(myXml.dataObj);
        var myNodes = myXml.getNodesByName(myXml.dataObj, "law-module");
        for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
          var myTypes = myXml.getAttributeValue(myNodes[i], "types");
          if (myTypes) {
            this.juris[jurisdiction2].types = {};
            myTypes = myTypes.split(/\s+/);
            for (var j = 0, jlen = myTypes.length; j < jlen; j++) {
              this.juris[jurisdiction2].types[myTypes[j]] = true;
            }
          }
          if (!skipFallback) {
            myFallback = myXml.getAttributeValue(myNodes[i], "fallback");
            if (myFallback) {
              if (jurisdiction2 !== "us") {
                this.opt.jurisdiction_fallbacks[jurisdiction2] = myFallback;
              }
            }
          }
        }
        var lang = this.opt.lang ? this.opt.lang : this.opt["default-locale"][0];
        CSL2.SET_COURT_CLASSES(this, lang, myXml, myXml.dataObj);
        if (!this.juris[jurisdiction2].types) {
          this.juris[jurisdiction2].types = CSL2.MODULE_TYPES;
        }
        var myNodes = myXml.getNodesByName(myXml.dataObj, "macro");
        for (var i = 0, ilen = myNodes.length; i < ilen; i++) {
          var myName = myXml.getAttributeValue(myNodes[i], "name");
          if (!CSL2.MODULE_MACROS[myName]) {
            CSL2.debug('CSL: skipping non-modular macro name "' + myName + '" in module context');
            continue;
          }
          macroCount++;
          this.juris[jurisdiction2][myName] = [];
          this.buildTokenLists(myNodes[i], this.juris[jurisdiction2][myName]);
          this.configureTokenList(this.juris[jurisdiction2][myName]);
        }
        return myFallback;
      };
      CSL2.Engine.prototype.retrieveAllStyleModules = function(jurisdictionList) {
        var ret = {};
        var preferences = this.locale[this.opt.lang].opts["jurisdiction-preference"];
        preferences = preferences ? preferences : [];
        preferences = [""].concat(preferences);
        for (var i = preferences.length - 1; i > -1; i--) {
          var preference = preferences[i];
          for (var j = 0, jlen = jurisdictionList.length; j < jlen; j++) {
            var jurisdiction2 = jurisdictionList[j];
            if (this.opt.jurisdictions_seen[jurisdiction2]) {
              continue;
            }
            var res = this.sys.retrieveStyleModule(jurisdiction2, preference);
            if (!res && !preference || res) {
              this.opt.jurisdictions_seen[jurisdiction2] = true;
            }
            if (!res) {
              continue;
            }
            ret[jurisdiction2] = res;
          }
        }
        return ret;
      };
      CSL2.ParticleList = function() {
        var always_dropping_1 = [[[0, 1], null]];
        var always_dropping_3 = [[[0, 3], null]];
        var always_non_dropping_1 = [[null, [0, 1]]];
        var always_non_dropping_2 = [[null, [0, 2]]];
        var always_non_dropping_3 = [[null, [0, 3]]];
        var either_1 = [[null, [0, 1]], [[0, 1], null]];
        var either_2 = [[null, [0, 2]], [[0, 2], null]];
        var either_1_dropping_best = [[[0, 1], null], [null, [0, 1]]];
        var either_2_dropping_best = [[[0, 2], null], [null, [0, 2]]];
        var either_3_dropping_best = [[[0, 3], null], [null, [0, 3]]];
        var non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0, 2]], [[0, 1], [1, 2]]];
        var PARTICLES = [
          ["'s", always_non_dropping_1],
          ["'s-", always_non_dropping_1],
          ["'t", always_non_dropping_1],
          ["a", always_non_dropping_1],
          ["aan 't", always_non_dropping_2],
          ["aan de", always_non_dropping_2],
          ["aan den", always_non_dropping_2],
          ["aan der", always_non_dropping_2],
          ["aan het", always_non_dropping_2],
          ["aan t", always_non_dropping_2],
          ["aan", always_non_dropping_1],
          ["ad-", either_1],
          ["adh-", either_1],
          ["af", either_1],
          ["al", either_1],
          ["al-", either_1],
          ["am de", always_non_dropping_2],
          ["am", always_non_dropping_1],
          ["an-", either_1],
          ["ar-", either_1],
          ["as-", either_1],
          ["ash-", either_1],
          ["at-", either_1],
          ["ath-", either_1],
          ["auf dem", either_2_dropping_best],
          ["auf den", either_2_dropping_best],
          ["auf der", either_2_dropping_best],
          ["auf ter", always_non_dropping_2],
          ["auf", either_1_dropping_best],
          ["aus 'm", either_2_dropping_best],
          ["aus dem", either_2_dropping_best],
          ["aus den", either_2_dropping_best],
          ["aus der", either_2_dropping_best],
          ["aus m", either_2_dropping_best],
          ["aus", either_1_dropping_best],
          ["aus'm", either_2_dropping_best],
          ["az-", either_1],
          ["a\u0161-", either_1],
          ["a\u1E0D-", either_1],
          ["a\u1E0F-", either_1],
          ["a\u1E63-", either_1],
          ["a\u1E6D-", either_1],
          ["a\u1E6F-", either_1],
          ["a\u1E93-", either_1],
          ["ben", always_non_dropping_1],
          ["bij 't", always_non_dropping_2],
          ["bij de", always_non_dropping_2],
          ["bij den", always_non_dropping_2],
          ["bij het", always_non_dropping_2],
          ["bij t", always_non_dropping_2],
          ["bij", always_non_dropping_1],
          ["bin", always_non_dropping_1],
          ["boven d", always_non_dropping_2],
          ["boven d'", always_non_dropping_2],
          ["d", always_non_dropping_1],
          ["d'", either_1],
          ["da", either_1],
          ["dal", always_non_dropping_1],
          ["dal'", always_non_dropping_1],
          ["dall'", always_non_dropping_1],
          ["dalla", always_non_dropping_1],
          ["das", either_1],
          ["de die le", always_non_dropping_3],
          ["de die", always_non_dropping_2],
          ["de l", always_non_dropping_2],
          ["de l'", always_non_dropping_2],
          ["de la", non_dropping_2_alt_dropping_1_non_dropping_1],
          ["de las", non_dropping_2_alt_dropping_1_non_dropping_1],
          ["de le", always_non_dropping_2],
          ["de li", either_2],
          ["de van der", always_non_dropping_3],
          ["de", either_1],
          ["de'", either_1],
          ["deca", always_non_dropping_1],
          ["degli", either_1],
          ["dei", either_1],
          ["del", either_1],
          ["dela", always_dropping_1],
          ["dell'", either_1],
          ["della", either_1],
          ["delle", either_1],
          ["dello", either_1],
          ["den", either_1],
          ["der", either_1],
          ["des", either_1],
          ["di", either_1],
          ["die le", always_non_dropping_2],
          ["do", always_non_dropping_1],
          ["don", always_non_dropping_1],
          ["dos", either_1],
          ["du", either_1],
          ["ed-", either_1],
          ["edh-", either_1],
          ["el", either_1],
          ["el-", either_1],
          ["en-", either_1],
          ["er-", either_1],
          ["es-", either_1],
          ["esh-", either_1],
          ["et-", either_1],
          ["eth-", either_1],
          ["ez-", either_1],
          ["e\u0161-", either_1],
          ["e\u1E0D-", either_1],
          ["e\u1E0F-", either_1],
          ["e\u1E63-", either_1],
          ["e\u1E6D-", either_1],
          ["e\u1E6F-", either_1],
          ["e\u1E93-", either_1],
          ["het", always_non_dropping_1],
          ["i", always_non_dropping_1],
          ["il", always_dropping_1],
          ["im", always_non_dropping_1],
          ["in 't", always_non_dropping_2],
          ["in de", always_non_dropping_2],
          ["in den", always_non_dropping_2],
          ["in der", either_2],
          ["in het", always_non_dropping_2],
          ["in t", always_non_dropping_2],
          ["in", always_non_dropping_1],
          ["l", always_non_dropping_1],
          ["l'", always_non_dropping_1],
          ["la", always_non_dropping_1],
          ["las", always_non_dropping_1],
          ["le", always_non_dropping_1],
          ["les", either_1],
          ["lo", either_1],
          ["los", always_non_dropping_1],
          ["lou", always_non_dropping_1],
          ["of", always_non_dropping_1],
          ["onder 't", always_non_dropping_2],
          ["onder de", always_non_dropping_2],
          ["onder den", always_non_dropping_2],
          ["onder het", always_non_dropping_2],
          ["onder t", always_non_dropping_2],
          ["onder", always_non_dropping_1],
          ["op 't", always_non_dropping_2],
          ["op de", either_2],
          ["op den", always_non_dropping_2],
          ["op der", always_non_dropping_2],
          ["op gen", always_non_dropping_2],
          ["op het", always_non_dropping_2],
          ["op t", always_non_dropping_2],
          ["op ten", always_non_dropping_2],
          ["op", always_non_dropping_1],
          ["over 't", always_non_dropping_2],
          ["over de", always_non_dropping_2],
          ["over den", always_non_dropping_2],
          ["over het", always_non_dropping_2],
          ["over t", always_non_dropping_2],
          ["over", always_non_dropping_1],
          ["s", always_non_dropping_1],
          ["s'", always_non_dropping_1],
          ["sen", always_dropping_1],
          ["t", always_non_dropping_1],
          ["te", always_non_dropping_1],
          ["ten", always_non_dropping_1],
          ["ter", always_non_dropping_1],
          ["tho", always_non_dropping_1],
          ["thoe", always_non_dropping_1],
          ["thor", always_non_dropping_1],
          ["to", always_non_dropping_1],
          ["toe", always_non_dropping_1],
          ["tot", always_non_dropping_1],
          ["uijt 't", always_non_dropping_2],
          ["uijt de", always_non_dropping_2],
          ["uijt den", always_non_dropping_2],
          ["uijt te de", always_non_dropping_3],
          ["uijt ten", always_non_dropping_2],
          ["uijt", always_non_dropping_1],
          ["uit 't", always_non_dropping_2],
          ["uit de", always_non_dropping_2],
          ["uit den", always_non_dropping_2],
          ["uit het", always_non_dropping_2],
          ["uit t", always_non_dropping_2],
          ["uit te de", always_non_dropping_3],
          ["uit ten", always_non_dropping_2],
          ["uit", always_non_dropping_1],
          ["unter", always_non_dropping_1],
          ["v", always_non_dropping_1],
          ["v.", always_non_dropping_1],
          ["v.d.", always_non_dropping_1],
          ["van 't", always_non_dropping_2],
          ["van de l", always_non_dropping_3],
          ["van de l'", always_non_dropping_3],
          ["van de", always_non_dropping_2],
          ["van de", always_non_dropping_2],
          ["van den", always_non_dropping_2],
          ["van der", always_non_dropping_2],
          ["van gen", always_non_dropping_2],
          ["van het", always_non_dropping_2],
          ["van la", always_non_dropping_2],
          ["van t", always_non_dropping_2],
          ["van ter", always_non_dropping_2],
          ["van van de", always_non_dropping_3],
          ["van", either_1],
          ["vander", always_non_dropping_1],
          ["vd", always_non_dropping_1],
          ["ver", always_non_dropping_1],
          ["vom und zum", always_dropping_3],
          ["vom", either_1],
          ["von 't", always_non_dropping_2],
          ["von dem", either_2_dropping_best],
          ["von den", either_2_dropping_best],
          ["von der", either_2_dropping_best],
          ["von t", always_non_dropping_2],
          ["von und zu", either_3_dropping_best],
          ["von zu", either_2_dropping_best],
          ["von", either_1_dropping_best],
          ["voor 't", always_non_dropping_2],
          ["voor de", always_non_dropping_2],
          ["voor den", always_non_dropping_2],
          ["voor in 't", always_non_dropping_3],
          ["voor in t", always_non_dropping_3],
          ["voor", always_non_dropping_1],
          ["vor der", either_2_dropping_best],
          ["vor", either_1_dropping_best],
          ["z", always_dropping_1],
          ["ze", always_dropping_1],
          ["zu", either_1_dropping_best],
          ["zum", either_1],
          ["zur", either_1]
        ];
        return PARTICLES;
      }();
      CSL2.parseParticles = function() {
        function splitParticles(nameValue, firstNameFlag, caseOverride) {
          var origNameValue = nameValue;
          nameValue = caseOverride ? nameValue.toLowerCase() : nameValue;
          var particleList = [];
          var rex;
          var hasParticle;
          if (firstNameFlag) {
            nameValue = nameValue.split("").reverse().join("");
            rex = CSL2.PARTICLE_GIVEN_REGEXP;
          } else {
            rex = CSL2.PARTICLE_FAMILY_REGEXP;
          }
          var m = nameValue.match(rex);
          while (m) {
            var m1 = firstNameFlag ? m[1].split("").reverse().join("") : m[1];
            var firstChar = m ? m1 : false;
            var firstChar = firstChar ? m1.replace(/^[-\'\u02bb\u2019\s]*(.).*$/, "$1") : false;
            hasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;
            if (!hasParticle) {
              break;
            }
            if (firstNameFlag) {
              particleList.push(origNameValue.slice(m1.length * -1));
              origNameValue = origNameValue.slice(0, m1.length * -1);
            } else {
              particleList.push(origNameValue.slice(0, m1.length));
              origNameValue = origNameValue.slice(m1.length);
            }
            nameValue = m[2];
            m = nameValue.match(rex);
          }
          if (firstNameFlag) {
            nameValue = nameValue.split("").reverse().join("");
            particleList.reverse();
            for (var i = 1, ilen = particleList.length; i < ilen; i++) {
              if (particleList[i].slice(0, 1) == " ") {
                particleList[i - 1] += " ";
              }
            }
            for (var i = 0, ilen = particleList.length; i < ilen; i++) {
              if (particleList[i].slice(0, 1) == " ") {
                particleList[i] = particleList[i].slice(1);
              }
            }
            nameValue = origNameValue.slice(0, nameValue.length);
          } else {
            nameValue = origNameValue.slice(nameValue.length * -1);
          }
          return [hasParticle, nameValue, particleList];
        }
        function trimLast(str) {
          var lastChar = str.slice(-1);
          str = str.trim();
          if (lastChar === " " && ["'", "\u2019"].indexOf(str.slice(-1)) > -1) {
            str += " ";
          }
          return str;
        }
        function parseSuffix(nameObj) {
          if (!nameObj.suffix && nameObj.given) {
            var m = nameObj.given.match(/(\s*,!*\s*)/);
            if (m) {
              var idx = nameObj.given.indexOf(m[1]);
              var possible_suffix = nameObj.given.slice(idx + m[1].length);
              var possible_comma = nameObj.given.slice(idx, idx + m[1].length).replace(/\s*/g, "");
              if (possible_suffix.replace(/\./g, "") === "et al" && !nameObj["dropping-particle"]) {
                nameObj["dropping-particle"] = possible_suffix;
                nameObj["comma-dropping-particle"] = ",";
              } else {
                if (possible_comma.length === 2) {
                  nameObj["comma-suffix"] = true;
                }
                nameObj.suffix = possible_suffix;
              }
              nameObj.given = nameObj.given.slice(0, idx);
            }
          }
        }
        return function(nameObj) {
          var res = splitParticles(nameObj.family);
          var lastNameValue = res[1];
          var lastParticleList = res[2];
          nameObj.family = lastNameValue;
          var nonDroppingParticle = trimLast(lastParticleList.join(""));
          if (nonDroppingParticle) {
            nameObj["non-dropping-particle"] = nonDroppingParticle;
          }
          parseSuffix(nameObj);
          var res = splitParticles(nameObj.given, true);
          var firstNameValue = res[1];
          var firstParticleList = res[2];
          nameObj.given = firstNameValue;
          var droppingParticle = firstParticleList.join("").trim();
          if (droppingParticle) {
            nameObj["dropping-particle"] = droppingParticle;
          }
        };
      }();
      module.exports = CSL2;
    }
  });

  // node_modules/fast-safe-stringify/index.js
  var require_fast_safe_stringify = __commonJS({
    "node_modules/fast-safe-stringify/index.js"(exports, module) {
      init_globals();
      module.exports = stringify;
      stringify.default = stringify;
      stringify.stable = deterministicStringify;
      stringify.stableStringify = deterministicStringify;
      var LIMIT_REPLACE_NODE = "[...]";
      var CIRCULAR_REPLACE_NODE = "[Circular]";
      var arr = [];
      var replacerStack = [];
      function defaultOptions() {
        return {
          depthLimit: Number.MAX_SAFE_INTEGER,
          edgesLimit: Number.MAX_SAFE_INTEGER
        };
      }
      function stringify(obj, replacer, spacer, options2) {
        if (typeof options2 === "undefined") {
          options2 = defaultOptions();
        }
        decirc(obj, "", 0, [], void 0, 0, options2);
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(obj, replacer, spacer);
          } else {
            res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function setReplace(replace, val, k, parent) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
        if (propertyDescriptor.get !== void 0) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: replace });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k, replace]);
          }
        } else {
          parent[k] = replace;
          arr.push([parent, k, val]);
        }
      }
      function decirc(val, k, edgeIndex, stack, parent, depth, options2) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          if (typeof options2.depthLimit !== "undefined" && depth > options2.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options2.edgesLimit !== "undefined" && edgeIndex + 1 > options2.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              decirc(val[i], i, i, stack, val, depth, options2);
            }
          } else {
            var keys = Object.keys(val);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              decirc(val[key], key, i, stack, val, depth, options2);
            }
          }
          stack.pop();
        }
      }
      function compareFunction(a, b) {
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      function deterministicStringify(obj, replacer, spacer, options2) {
        if (typeof options2 === "undefined") {
          options2 = defaultOptions();
        }
        var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options2) || obj;
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(tmp, replacer, spacer);
          } else {
            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options2) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          try {
            if (typeof val.toJSON === "function") {
              return;
            }
          } catch (_) {
            return;
          }
          if (typeof options2.depthLimit !== "undefined" && depth > options2.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options2.edgesLimit !== "undefined" && edgeIndex + 1 > options2.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              deterministicDecirc(val[i], i, i, stack, val, depth, options2);
            }
          } else {
            var tmp = {};
            var keys = Object.keys(val).sort(compareFunction);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              deterministicDecirc(val[key], key, i, stack, val, depth, options2);
              tmp[key] = val[key];
            }
            if (typeof parent !== "undefined") {
              arr.push([parent, k, val]);
              parent[k] = tmp;
            } else {
              return tmp;
            }
          }
          stack.pop();
        }
      }
      function replaceGetterValues(replacer) {
        replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
          return v;
        };
        return function(key, val) {
          if (replacerStack.length > 0) {
            for (var i = 0; i < replacerStack.length; i++) {
              var part = replacerStack[i];
              if (part[1] === key && part[0] === val) {
                val = part[2];
                replacerStack.splice(i, 1);
                break;
              }
            }
          }
          return replacer.call(this, key, val);
        };
      }
    }
  });

  // node_modules/has-symbols/shams.js
  var require_shams = __commonJS({
    "node_modules/has-symbols/shams.js"(exports, module) {
      init_globals();
      module.exports = function hasSymbols() {
        if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }
        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }
        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }
        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        }
        if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
          return false;
        }
        if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }
        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }
        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }
        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }
        return true;
      };
    }
  });

  // node_modules/has-tostringtag/shams.js
  var require_shams2 = __commonJS({
    "node_modules/has-tostringtag/shams.js"(exports, module) {
      init_globals();
      var hasSymbols = require_shams();
      module.exports = function hasToStringTagShams() {
        return hasSymbols() && !!Symbol.toStringTag;
      };
    }
  });

  // node_modules/has-symbols/index.js
  var require_has_symbols = __commonJS({
    "node_modules/has-symbols/index.js"(exports, module) {
      init_globals();
      var origSymbol = typeof Symbol !== "undefined" && Symbol;
      var hasSymbolSham = require_shams();
      module.exports = function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }
        return hasSymbolSham();
      };
    }
  });

  // node_modules/function-bind/implementation.js
  var require_implementation = __commonJS({
    "node_modules/function-bind/implementation.js"(exports, module) {
      init_globals();
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var slice = Array.prototype.slice;
      var toStr = Object.prototype.toString;
      var funcType = "[object Function]";
      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);
        var bound;
        var binder = function() {
          if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) {
              return result;
            }
            return this;
          } else {
            return target.apply(that, args.concat(slice.call(arguments)));
          }
        };
        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs.push("$" + i);
        }
        bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
        if (target.prototype) {
          var Empty = function Empty2() {
          };
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }
        return bound;
      };
    }
  });

  // node_modules/function-bind/index.js
  var require_function_bind = __commonJS({
    "node_modules/function-bind/index.js"(exports, module) {
      init_globals();
      var implementation = require_implementation();
      module.exports = Function.prototype.bind || implementation;
    }
  });

  // node_modules/has/src/index.js
  var require_src = __commonJS({
    "node_modules/has/src/index.js"(exports, module) {
      init_globals();
      var bind = require_function_bind();
      module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/get-intrinsic/index.js
  var require_get_intrinsic = __commonJS({
    "node_modules/get-intrinsic/index.js"(exports, module) {
      init_globals();
      var undefined2;
      var $SyntaxError = SyntaxError;
      var $Function = Function;
      var $TypeError = TypeError;
      var getEvalledConstructor = function(expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch (e) {
        }
      };
      var $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD) {
        try {
          $gOPD({}, "");
        } catch (e) {
          $gOPD = null;
        }
      }
      var throwTypeError = function() {
        throw new $TypeError();
      };
      var ThrowTypeError = $gOPD ? function() {
        try {
          arguments.callee;
          return throwTypeError;
        } catch (calleeThrows) {
          try {
            return $gOPD(arguments, "callee").get;
          } catch (gOPDthrows) {
            return throwTypeError;
          }
        }
      }() : throwTypeError;
      var hasSymbols = require_has_symbols()();
      var getProto = Object.getPrototypeOf || function(x) {
        return x.__proto__;
      };
      var needsEval = {};
      var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
      var INTRINSICS = {
        "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
        "%AsyncFromSyncIteratorPrototype%": undefined2,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": Error,
        "%eval%": eval,
        "%EvalError%": EvalError,
        "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
        "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
        "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
        "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
        "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
        "%JSON%": typeof JSON === "object" ? JSON : undefined2,
        "%Map%": typeof Map === "undefined" ? undefined2 : Map,
        "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": Object,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
        "%RangeError%": RangeError,
        "%ReferenceError%": ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined2 : Set,
        "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
        "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
        "%Symbol%": hasSymbols ? Symbol : undefined2,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
        "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
        "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
        "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
        "%URIError%": URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
      };
      var doEval = function doEval2(name) {
        var value;
        if (name === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name === "%AsyncGenerator%") {
          var fn = doEval2("%AsyncGeneratorFunction%");
          if (fn) {
            value = fn.prototype;
          }
        } else if (name === "%AsyncIteratorPrototype%") {
          var gen = doEval2("%AsyncGenerator%");
          if (gen) {
            value = getProto(gen.prototype);
          }
        }
        INTRINSICS[name] = value;
        return value;
      };
      var LEGACY_ALIASES = {
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"]
      };
      var bind = require_function_bind();
      var hasOwn = require_src();
      var $concat = bind.call(Function.call, Array.prototype.concat);
      var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
      var $replace = bind.call(Function.call, String.prototype.replace);
      var $strSlice = bind.call(Function.call, String.prototype.slice);
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = function stringToPath2(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        }
        var result = [];
        $replace(string, rePropName, function(match, number2, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
        });
        return result;
      };
      var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
        var intrinsicName = name;
        var alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }
        if (hasOwn(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
          }
          return {
            alias,
            name: intrinsicName,
            value
          };
        }
        throw new $SyntaxError("intrinsic " + name + " does not exist!");
      };
      module.exports = function GetIntrinsic(name, allowMissing) {
        if (typeof name !== "string" || name.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }
        var parts = stringToPath(name);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
        var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;
        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }
        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
            throw new $SyntaxError("property names with quotes must have matching quotes");
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }
          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";
          if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
              }
              return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn(value, part);
              value = value[part];
            }
            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      };
    }
  });

  // node_modules/call-bind/index.js
  var require_call_bind = __commonJS({
    "node_modules/call-bind/index.js"(exports, module) {
      init_globals();
      var bind = require_function_bind();
      var GetIntrinsic = require_get_intrinsic();
      var $apply = GetIntrinsic("%Function.prototype.apply%");
      var $call = GetIntrinsic("%Function.prototype.call%");
      var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
      var $max = GetIntrinsic("%Math.max%");
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          $defineProperty = null;
        }
      }
      module.exports = function callBind(originalFunction) {
        var func = $reflectApply(bind, $call, arguments);
        if ($gOPD && $defineProperty) {
          var desc = $gOPD(func, "length");
          if (desc.configurable) {
            $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
          }
        }
        return func;
      };
      var applyBind = function applyBind2() {
        return $reflectApply(bind, $apply, arguments);
      };
      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }
    }
  });

  // node_modules/call-bind/callBound.js
  var require_callBound = __commonJS({
    "node_modules/call-bind/callBound.js"(exports, module) {
      init_globals();
      var GetIntrinsic = require_get_intrinsic();
      var callBind = require_call_bind();
      var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
      module.exports = function callBoundIntrinsic(name, allowMissing) {
        var intrinsic = GetIntrinsic(name, !!allowMissing);
        if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
          return callBind(intrinsic);
        }
        return intrinsic;
      };
    }
  });

  // node_modules/is-arguments/index.js
  var require_is_arguments = __commonJS({
    "node_modules/is-arguments/index.js"(exports, module) {
      init_globals();
      var hasToStringTag = require_shams2()();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var isStandardArguments = function isArguments(value) {
        if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
          return false;
        }
        return $toString(value) === "[object Arguments]";
      };
      var isLegacyArguments = function isArguments(value) {
        if (isStandardArguments(value)) {
          return true;
        }
        return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
      };
      var supportsStandardArguments = function() {
        return isStandardArguments(arguments);
      }();
      isStandardArguments.isLegacyArguments = isLegacyArguments;
      module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
    }
  });

  // node_modules/is-generator-function/index.js
  var require_is_generator_function = __commonJS({
    "node_modules/is-generator-function/index.js"(exports, module) {
      init_globals();
      var toStr = Object.prototype.toString;
      var fnToStr = Function.prototype.toString;
      var isFnRegex = /^\s*(?:function)?\*/;
      var hasToStringTag = require_shams2()();
      var getProto = Object.getPrototypeOf;
      var getGeneratorFunc = function() {
        if (!hasToStringTag) {
          return false;
        }
        try {
          return Function("return function*() {}")();
        } catch (e) {
        }
      };
      var GeneratorFunction;
      module.exports = function isGeneratorFunction(fn) {
        if (typeof fn !== "function") {
          return false;
        }
        if (isFnRegex.test(fnToStr.call(fn))) {
          return true;
        }
        if (!hasToStringTag) {
          var str = toStr.call(fn);
          return str === "[object GeneratorFunction]";
        }
        if (!getProto) {
          return false;
        }
        if (typeof GeneratorFunction === "undefined") {
          var generatorFunc = getGeneratorFunc();
          GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
        }
        return getProto(fn) === GeneratorFunction;
      };
    }
  });

  // node_modules/foreach/index.js
  var require_foreach = __commonJS({
    "node_modules/foreach/index.js"(exports, module) {
      init_globals();
      var hasOwn = Object.prototype.hasOwnProperty;
      var toString = Object.prototype.toString;
      module.exports = function forEach(obj, fn, ctx) {
        if (toString.call(fn) !== "[object Function]") {
          throw new TypeError("iterator must be a function");
        }
        var l = obj.length;
        if (l === +l) {
          for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
          }
        } else {
          for (var k in obj) {
            if (hasOwn.call(obj, k)) {
              fn.call(ctx, obj[k], k, obj);
            }
          }
        }
      };
    }
  });

  // node_modules/available-typed-arrays/index.js
  var require_available_typed_arrays = __commonJS({
    "node_modules/available-typed-arrays/index.js"(exports, module) {
      init_globals();
      var possibleNames = [
        "BigInt64Array",
        "BigUint64Array",
        "Float32Array",
        "Float64Array",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray"
      ];
      var g = typeof globalThis === "undefined" ? global : globalThis;
      module.exports = function availableTypedArrays() {
        var out = [];
        for (var i = 0; i < possibleNames.length; i++) {
          if (typeof g[possibleNames[i]] === "function") {
            out[out.length] = possibleNames[i];
          }
        }
        return out;
      };
    }
  });

  // node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js
  var require_getOwnPropertyDescriptor = __commonJS({
    "node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js"(exports, module) {
      init_globals();
      var GetIntrinsic = require_get_intrinsic();
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          $gOPD = null;
        }
      }
      module.exports = $gOPD;
    }
  });

  // node_modules/is-typed-array/index.js
  var require_is_typed_array = __commonJS({
    "node_modules/is-typed-array/index.js"(exports, module) {
      init_globals();
      var forEach = require_foreach();
      var availableTypedArrays = require_available_typed_arrays();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var g = typeof globalThis === "undefined" ? global : globalThis;
      var typedArrays = availableTypedArrays();
      var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
        for (var i = 0; i < array.length; i += 1) {
          if (array[i] === value) {
            return i;
          }
        }
        return -1;
      };
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var gOPD = require_getOwnPropertyDescriptor();
      var getPrototypeOf = Object.getPrototypeOf;
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        });
      }
      var tryTypedArrays = function tryAllTypedArrays(value) {
        var anyTrue = false;
        forEach(toStrTags, function(getter, typedArray) {
          if (!anyTrue) {
            try {
              anyTrue = getter.call(value) === typedArray;
            } catch (e) {
            }
          }
        });
        return anyTrue;
      };
      module.exports = function isTypedArray(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          var tag = $slice($toString(value), 8, -1);
          return $indexOf(typedArrays, tag) > -1;
        }
        if (!gOPD) {
          return false;
        }
        return tryTypedArrays(value);
      };
    }
  });

  // node_modules/which-typed-array/index.js
  var require_which_typed_array = __commonJS({
    "node_modules/which-typed-array/index.js"(exports, module) {
      init_globals();
      var forEach = require_foreach();
      var availableTypedArrays = require_available_typed_arrays();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var g = typeof globalThis === "undefined" ? global : globalThis;
      var typedArrays = availableTypedArrays();
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var gOPD = require_getOwnPropertyDescriptor();
      var getPrototypeOf = Object.getPrototypeOf;
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
          if (typeof g[typedArray] === "function") {
            var arr = new g[typedArray]();
            if (Symbol.toStringTag in arr) {
              var proto = getPrototypeOf(arr);
              var descriptor = gOPD(proto, Symbol.toStringTag);
              if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
              }
              toStrTags[typedArray] = descriptor.get;
            }
          }
        });
      }
      var tryTypedArrays = function tryAllTypedArrays(value) {
        var foundName = false;
        forEach(toStrTags, function(getter, typedArray) {
          if (!foundName) {
            try {
              var name = getter.call(value);
              if (name === typedArray) {
                foundName = name;
              }
            } catch (e) {
            }
          }
        });
        return foundName;
      };
      var isTypedArray = require_is_typed_array();
      module.exports = function whichTypedArray(value) {
        if (!isTypedArray(value)) {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          return $slice($toString(value), 8, -1);
        }
        return tryTypedArrays(value);
      };
    }
  });

  // node_modules/util/support/types.js
  var require_types2 = __commonJS({
    "node_modules/util/support/types.js"(exports) {
      init_globals();
      var isArgumentsObject = require_is_arguments();
      var isGeneratorFunction = require_is_generator_function();
      var whichTypedArray = require_which_typed_array();
      var isTypedArray = require_is_typed_array();
      function uncurryThis(f) {
        return f.call.bind(f);
      }
      var BigIntSupported = typeof BigInt !== "undefined";
      var SymbolSupported = typeof Symbol !== "undefined";
      var ObjectToString = uncurryThis(Object.prototype.toString);
      var numberValue = uncurryThis(Number.prototype.valueOf);
      var stringValue = uncurryThis(String.prototype.valueOf);
      var booleanValue = uncurryThis(Boolean.prototype.valueOf);
      if (BigIntSupported) {
        bigIntValue = uncurryThis(BigInt.prototype.valueOf);
      }
      var bigIntValue;
      if (SymbolSupported) {
        symbolValue = uncurryThis(Symbol.prototype.valueOf);
      }
      var symbolValue;
      function checkBoxedPrimitive(value, prototypeValueOf) {
        if (typeof value !== "object") {
          return false;
        }
        try {
          prototypeValueOf(value);
          return true;
        } catch (e) {
          return false;
        }
      }
      exports.isArgumentsObject = isArgumentsObject;
      exports.isGeneratorFunction = isGeneratorFunction;
      exports.isTypedArray = isTypedArray;
      function isPromise(input) {
        return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
      }
      exports.isPromise = isPromise;
      function isArrayBufferView(value) {
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          return ArrayBuffer.isView(value);
        }
        return isTypedArray(value) || isDataView(value);
      }
      exports.isArrayBufferView = isArrayBufferView;
      function isUint8Array(value) {
        return whichTypedArray(value) === "Uint8Array";
      }
      exports.isUint8Array = isUint8Array;
      function isUint8ClampedArray(value) {
        return whichTypedArray(value) === "Uint8ClampedArray";
      }
      exports.isUint8ClampedArray = isUint8ClampedArray;
      function isUint16Array(value) {
        return whichTypedArray(value) === "Uint16Array";
      }
      exports.isUint16Array = isUint16Array;
      function isUint32Array(value) {
        return whichTypedArray(value) === "Uint32Array";
      }
      exports.isUint32Array = isUint32Array;
      function isInt8Array(value) {
        return whichTypedArray(value) === "Int8Array";
      }
      exports.isInt8Array = isInt8Array;
      function isInt16Array(value) {
        return whichTypedArray(value) === "Int16Array";
      }
      exports.isInt16Array = isInt16Array;
      function isInt32Array(value) {
        return whichTypedArray(value) === "Int32Array";
      }
      exports.isInt32Array = isInt32Array;
      function isFloat32Array(value) {
        return whichTypedArray(value) === "Float32Array";
      }
      exports.isFloat32Array = isFloat32Array;
      function isFloat64Array(value) {
        return whichTypedArray(value) === "Float64Array";
      }
      exports.isFloat64Array = isFloat64Array;
      function isBigInt64Array(value) {
        return whichTypedArray(value) === "BigInt64Array";
      }
      exports.isBigInt64Array = isBigInt64Array;
      function isBigUint64Array(value) {
        return whichTypedArray(value) === "BigUint64Array";
      }
      exports.isBigUint64Array = isBigUint64Array;
      function isMapToString(value) {
        return ObjectToString(value) === "[object Map]";
      }
      isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
      function isMap(value) {
        if (typeof Map === "undefined") {
          return false;
        }
        return isMapToString.working ? isMapToString(value) : value instanceof Map;
      }
      exports.isMap = isMap;
      function isSetToString(value) {
        return ObjectToString(value) === "[object Set]";
      }
      isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
      function isSet(value) {
        if (typeof Set === "undefined") {
          return false;
        }
        return isSetToString.working ? isSetToString(value) : value instanceof Set;
      }
      exports.isSet = isSet;
      function isWeakMapToString(value) {
        return ObjectToString(value) === "[object WeakMap]";
      }
      isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
      function isWeakMap(value) {
        if (typeof WeakMap === "undefined") {
          return false;
        }
        return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
      }
      exports.isWeakMap = isWeakMap;
      function isWeakSetToString(value) {
        return ObjectToString(value) === "[object WeakSet]";
      }
      isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
      function isWeakSet(value) {
        return isWeakSetToString(value);
      }
      exports.isWeakSet = isWeakSet;
      function isArrayBufferToString(value) {
        return ObjectToString(value) === "[object ArrayBuffer]";
      }
      isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
      function isArrayBuffer(value) {
        if (typeof ArrayBuffer === "undefined") {
          return false;
        }
        return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
      }
      exports.isArrayBuffer = isArrayBuffer;
      function isDataViewToString(value) {
        return ObjectToString(value) === "[object DataView]";
      }
      isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
      function isDataView(value) {
        if (typeof DataView === "undefined") {
          return false;
        }
        return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
      }
      exports.isDataView = isDataView;
      var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
      function isSharedArrayBufferToString(value) {
        return ObjectToString(value) === "[object SharedArrayBuffer]";
      }
      function isSharedArrayBuffer(value) {
        if (typeof SharedArrayBufferCopy === "undefined") {
          return false;
        }
        if (typeof isSharedArrayBufferToString.working === "undefined") {
          isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
        }
        return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
      }
      exports.isSharedArrayBuffer = isSharedArrayBuffer;
      function isAsyncFunction(value) {
        return ObjectToString(value) === "[object AsyncFunction]";
      }
      exports.isAsyncFunction = isAsyncFunction;
      function isMapIterator(value) {
        return ObjectToString(value) === "[object Map Iterator]";
      }
      exports.isMapIterator = isMapIterator;
      function isSetIterator(value) {
        return ObjectToString(value) === "[object Set Iterator]";
      }
      exports.isSetIterator = isSetIterator;
      function isGeneratorObject(value) {
        return ObjectToString(value) === "[object Generator]";
      }
      exports.isGeneratorObject = isGeneratorObject;
      function isWebAssemblyCompiledModule(value) {
        return ObjectToString(value) === "[object WebAssembly.Module]";
      }
      exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
      function isNumberObject(value) {
        return checkBoxedPrimitive(value, numberValue);
      }
      exports.isNumberObject = isNumberObject;
      function isStringObject(value) {
        return checkBoxedPrimitive(value, stringValue);
      }
      exports.isStringObject = isStringObject;
      function isBooleanObject(value) {
        return checkBoxedPrimitive(value, booleanValue);
      }
      exports.isBooleanObject = isBooleanObject;
      function isBigIntObject(value) {
        return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
      }
      exports.isBigIntObject = isBigIntObject;
      function isSymbolObject(value) {
        return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
      }
      exports.isSymbolObject = isSymbolObject;
      function isBoxedPrimitive(value) {
        return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
      }
      exports.isBoxedPrimitive = isBoxedPrimitive;
      function isAnyArrayBuffer(value) {
        return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
      }
      exports.isAnyArrayBuffer = isAnyArrayBuffer;
      ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
        Object.defineProperty(exports, method, {
          enumerable: false,
          value: function() {
            throw new Error(method + " is not supported in userland");
          }
        });
      });
    }
  });

  // node_modules/util/support/isBufferBrowser.js
  var require_isBufferBrowser = __commonJS({
    "node_modules/util/support/isBufferBrowser.js"(exports, module) {
      init_globals();
      module.exports = function isBuffer(arg) {
        return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
      };
    }
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports, module) {
      init_globals();
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // (disabled):node_modules/util/util.js
  var require_util4 = __commonJS({
    "(disabled):node_modules/util/util.js"(exports) {
      init_globals();
      var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for (var i = 0; i < keys.length; i++) {
          descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        }
        return descriptors;
      };
      var formatRegExp = /%[sdj%]/g;
      exports.format = function(f) {
        if (!isString(f)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect2(arguments[i]));
          }
          return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function(x2) {
          if (x2 === "%%")
            return "%";
          if (i >= len)
            return x2;
          switch (x2) {
            case "%s":
              return String(args[i++]);
            case "%d":
              return Number(args[i++]);
            case "%j":
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return "[Circular]";
              }
            default:
              return x2;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += " " + x;
          } else {
            str += " " + inspect2(x);
          }
        }
        return str;
      };
      exports.deprecate = function(fn, msg) {
        if (typeof process !== "undefined" && process.noDeprecation === true) {
          return fn;
        }
        if (typeof process === "undefined") {
          return function() {
            return exports.deprecate(fn, msg).apply(this, arguments);
          };
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }
        return deprecated;
      };
      var debugs = {};
      var debugEnvRegex = /^$/;
      if (process.env.NODE_DEBUG) {
        debugEnv = process.env.NODE_DEBUG;
        debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
        debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
      }
      var debugEnv;
      exports.debuglog = function(set) {
        set = set.toUpperCase();
        if (!debugs[set]) {
          if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
              var msg = exports.format.apply(exports, arguments);
              console.error("%s %d: %s", set, pid, msg);
            };
          } else {
            debugs[set] = function() {
            };
          }
        }
        return debugs[set];
      };
      function inspect2(obj, opts) {
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
        if (arguments.length >= 3)
          ctx.depth = arguments[2];
        if (arguments.length >= 4)
          ctx.colors = arguments[3];
        if (isBoolean(opts)) {
          ctx.showHidden = opts;
        } else if (opts) {
          exports._extend(ctx, opts);
        }
        if (isUndefined(ctx.showHidden))
          ctx.showHidden = false;
        if (isUndefined(ctx.depth))
          ctx.depth = 2;
        if (isUndefined(ctx.colors))
          ctx.colors = false;
        if (isUndefined(ctx.customInspect))
          ctx.customInspect = true;
        if (ctx.colors)
          ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
      }
      exports.inspect = inspect2;
      inspect2.colors = {
        "bold": [1, 22],
        "italic": [3, 23],
        "underline": [4, 24],
        "inverse": [7, 27],
        "white": [37, 39],
        "grey": [90, 39],
        "black": [30, 39],
        "blue": [34, 39],
        "cyan": [36, 39],
        "green": [32, 39],
        "magenta": [35, 39],
        "red": [31, 39],
        "yellow": [33, 39]
      };
      inspect2.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        "regexp": "red"
      };
      function stylizeWithColor(str, styleType) {
        var style = inspect2.styles[styleType];
        if (style) {
          return "\x1B[" + inspect2.colors[style][0] + "m" + str + "\x1B[" + inspect2.colors[style][1] + "m";
        } else {
          return str;
        }
      }
      function stylizeNoColor(str, styleType) {
        return str;
      }
      function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
          hash[val] = true;
        });
        return hash;
      }
      function formatValue(ctx, value, recurseTimes) {
        if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);
          if (!isString(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }
          return ret;
        }
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
          return primitive;
        }
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }
        if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
          return formatError(value);
        }
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
          }
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          }
          if (isDate(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), "date");
          }
          if (isError(value)) {
            return formatError(value);
          }
        }
        var base = "", array = false, braces = ["{", "}"];
        if (isArray(value)) {
          array = true;
          braces = ["[", "]"];
        }
        if (isFunction(value)) {
          var n = value.name ? ": " + value.name : "";
          base = " [Function" + n + "]";
        }
        if (isRegExp(value)) {
          base = " " + RegExp.prototype.toString.call(value);
        }
        if (isDate(value)) {
          base = " " + Date.prototype.toUTCString.call(value);
        }
        if (isError(value)) {
          base = " " + formatError(value);
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }
        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          } else {
            return ctx.stylize("[Object]", "special");
          }
        }
        ctx.seen.push(value);
        var output;
        if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function(key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          });
        }
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
      }
      function formatPrimitive(ctx, value) {
        if (isUndefined(value))
          return ctx.stylize("undefined", "undefined");
        if (isString(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx.stylize(simple, "string");
        }
        if (isNumber(value))
          return ctx.stylize("" + value, "number");
        if (isBoolean(value))
          return ctx.stylize("" + value, "boolean");
        if (isNull(value))
          return ctx.stylize("null", "null");
      }
      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }
      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
          } else {
            output.push("");
          }
        }
        keys.forEach(function(key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
          }
        });
        return output;
      }
      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize("[Getter/Setter]", "special");
          } else {
            str = ctx.stylize("[Getter]", "special");
          }
        } else {
          if (desc.set) {
            str = ctx.stylize("[Setter]", "special");
          }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
          name = "[" + key + "]";
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }
            if (str.indexOf("\n") > -1) {
              if (array) {
                str = str.split("\n").map(function(line) {
                  return "  " + line;
                }).join("\n").substr(2);
              } else {
                str = "\n" + str.split("\n").map(function(line) {
                  return "   " + line;
                }).join("\n");
              }
            }
          } else {
            str = ctx.stylize("[Circular]", "special");
          }
        }
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }
          name = JSON.stringify("" + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, "name");
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
          }
        }
        return name + ": " + str;
      }
      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
          numLinesEst++;
          if (cur.indexOf("\n") >= 0)
            numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) {
          return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        }
        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
      }
      exports.types = require_types2();
      function isArray(ar) {
        return Array.isArray(ar);
      }
      exports.isArray = isArray;
      function isBoolean(arg) {
        return typeof arg === "boolean";
      }
      exports.isBoolean = isBoolean;
      function isNull(arg) {
        return arg === null;
      }
      exports.isNull = isNull;
      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined;
      function isNumber(arg) {
        return typeof arg === "number";
      }
      exports.isNumber = isNumber;
      function isString(arg) {
        return typeof arg === "string";
      }
      exports.isString = isString;
      function isSymbol(arg) {
        return typeof arg === "symbol";
      }
      exports.isSymbol = isSymbol;
      function isUndefined(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined;
      function isRegExp(re2) {
        return isObject(re2) && objectToString(re2) === "[object RegExp]";
      }
      exports.isRegExp = isRegExp;
      exports.types.isRegExp = isRegExp;
      function isObject(arg) {
        return typeof arg === "object" && arg !== null;
      }
      exports.isObject = isObject;
      function isDate(d) {
        return isObject(d) && objectToString(d) === "[object Date]";
      }
      exports.isDate = isDate;
      exports.types.isDate = isDate;
      function isError(e) {
        return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
      }
      exports.isError = isError;
      exports.types.isNativeError = isError;
      function isFunction(arg) {
        return typeof arg === "function";
      }
      exports.isFunction = isFunction;
      function isPrimitive(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
      }
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = require_isBufferBrowser();
      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
      function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }
      var months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      function timestamp() {
        var d = new Date();
        var time = [
          pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())
        ].join(":");
        return [d.getDate(), months[d.getMonth()], time].join(" ");
      }
      exports.log = function() {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
      };
      exports.inherits = require_inherits_browser();
      exports._extend = function(origin, add) {
        if (!add || !isObject(add))
          return origin;
        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) {
          origin[keys[i]] = add[keys[i]];
        }
        return origin;
      };
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
      exports.promisify = function promisify(original) {
        if (typeof original !== "function")
          throw new TypeError('The "original" argument must be of type Function');
        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
          var fn = original[kCustomPromisifiedSymbol];
          if (typeof fn !== "function") {
            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
          }
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          });
          return fn;
        }
        function fn() {
          var promiseResolve, promiseReject;
          var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
          });
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          args.push(function(err, value) {
            if (err) {
              promiseReject(err);
            } else {
              promiseResolve(value);
            }
          });
          try {
            original.apply(this, args);
          } catch (err) {
            promiseReject(err);
          }
          return promise;
        }
        Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
        if (kCustomPromisifiedSymbol)
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          });
        return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
      };
      exports.promisify.custom = kCustomPromisifiedSymbol;
      function callbackifyOnRejected(reason, cb) {
        if (!reason) {
          var newReason = new Error("Promise was rejected with a falsy value");
          newReason.reason = reason;
          reason = newReason;
        }
        return cb(reason);
      }
      function callbackify(original) {
        if (typeof original !== "function") {
          throw new TypeError('The "original" argument must be of type Function');
        }
        function callbackified() {
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          var maybeCb = args.pop();
          if (typeof maybeCb !== "function") {
            throw new TypeError("The last argument must be of type Function");
          }
          var self2 = this;
          var cb = function() {
            return maybeCb.apply(self2, arguments);
          };
          original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
          }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          });
        }
        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
        Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
        return callbackified;
      }
      exports.callbackify = callbackify;
    }
  });

  // node_modules/loupe/loupe.js
  var require_loupe = __commonJS({
    "node_modules/loupe/loupe.js"(exports, module) {
      init_globals();
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.loupe = {}));
      })(exports, function(exports2) {
        "use strict";
        function _typeof(obj) {
          "@babel/helpers - typeof";
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function(obj2) {
              return typeof obj2;
            };
          } else {
            _typeof = function(obj2) {
              return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            };
          }
          return _typeof(obj);
        }
        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr))
            return arr;
        }
        function _iterableToArrayLimit(arr, i) {
          if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
            return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null)
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++)
            arr2[i] = arr[i];
          return arr2;
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var ansiColors = {
          bold: ["1", "22"],
          dim: ["2", "22"],
          italic: ["3", "23"],
          underline: ["4", "24"],
          inverse: ["7", "27"],
          hidden: ["8", "28"],
          strike: ["9", "29"],
          black: ["30", "39"],
          red: ["31", "39"],
          green: ["32", "39"],
          yellow: ["33", "39"],
          blue: ["34", "39"],
          magenta: ["35", "39"],
          cyan: ["36", "39"],
          white: ["37", "39"],
          brightblack: ["30;1", "39"],
          brightred: ["31;1", "39"],
          brightgreen: ["32;1", "39"],
          brightyellow: ["33;1", "39"],
          brightblue: ["34;1", "39"],
          brightmagenta: ["35;1", "39"],
          brightcyan: ["36;1", "39"],
          brightwhite: ["37;1", "39"],
          grey: ["90", "39"]
        };
        var styles = {
          special: "cyan",
          number: "yellow",
          bigint: "yellow",
          boolean: "yellow",
          undefined: "grey",
          null: "bold",
          string: "green",
          symbol: "green",
          date: "magenta",
          regexp: "red"
        };
        var truncator = "\u2026";
        function colorise(value, styleType) {
          var color = ansiColors[styles[styleType]] || ansiColors[styleType];
          if (!color) {
            return String(value);
          }
          return "\x1B[".concat(color[0], "m").concat(String(value), "\x1B[").concat(color[1], "m");
        }
        function normaliseOptions() {
          var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$showHidden = _ref.showHidden, showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden, _ref$depth = _ref.depth, depth = _ref$depth === void 0 ? 2 : _ref$depth, _ref$colors = _ref.colors, colors = _ref$colors === void 0 ? false : _ref$colors, _ref$customInspect = _ref.customInspect, customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect, _ref$showProxy = _ref.showProxy, showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy, _ref$maxArrayLength = _ref.maxArrayLength, maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength, _ref$breakLength = _ref.breakLength, breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength, _ref$seen = _ref.seen, seen = _ref$seen === void 0 ? [] : _ref$seen, _ref$truncate = _ref.truncate, truncate2 = _ref$truncate === void 0 ? Infinity : _ref$truncate, _ref$stylize = _ref.stylize, stylize = _ref$stylize === void 0 ? String : _ref$stylize;
          var options2 = {
            showHidden: Boolean(showHidden),
            depth: Number(depth),
            colors: Boolean(colors),
            customInspect: Boolean(customInspect),
            showProxy: Boolean(showProxy),
            maxArrayLength: Number(maxArrayLength),
            breakLength: Number(breakLength),
            truncate: Number(truncate2),
            seen,
            stylize
          };
          if (options2.colors) {
            options2.stylize = colorise;
          }
          return options2;
        }
        function truncate(string, length) {
          var tail = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : truncator;
          string = String(string);
          var tailLength = tail.length;
          var stringLength = string.length;
          if (tailLength > length && stringLength > tailLength) {
            return tail;
          }
          if (stringLength > length && stringLength > tailLength) {
            return "".concat(string.slice(0, length - tailLength)).concat(tail);
          }
          return string;
        }
        function inspectList(list, options2, inspectItem) {
          var separator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ", ";
          inspectItem = inspectItem || options2.inspect;
          var size = list.length;
          if (size === 0)
            return "";
          var originalLength = options2.truncate;
          var output = "";
          var peek = "";
          var truncated = "";
          for (var i = 0; i < size; i += 1) {
            var last = i + 1 === list.length;
            var secondToLast = i + 2 === list.length;
            truncated = "".concat(truncator, "(").concat(list.length - i, ")");
            var value = list[i];
            options2.truncate = originalLength - output.length - (last ? 0 : separator.length);
            var string = peek || inspectItem(value, options2) + (last ? "" : separator);
            var nextLength = output.length + string.length;
            var truncatedLength = nextLength + truncated.length;
            if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {
              break;
            }
            if (!last && !secondToLast && truncatedLength > originalLength) {
              break;
            }
            peek = last ? "" : inspectItem(list[i + 1], options2) + (secondToLast ? "" : separator);
            if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {
              break;
            }
            output += string;
            if (!last && !secondToLast && nextLength + peek.length >= originalLength) {
              truncated = "".concat(truncator, "(").concat(list.length - i - 1, ")");
              break;
            }
            truncated = "";
          }
          return "".concat(output).concat(truncated);
        }
        function quoteComplexKey(key) {
          if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {
            return key;
          }
          return JSON.stringify(key).replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        }
        function inspectProperty(_ref2, options2) {
          var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], value = _ref3[1];
          options2.truncate -= 2;
          if (typeof key === "string") {
            key = quoteComplexKey(key);
          } else if (typeof key !== "number") {
            key = "[".concat(options2.inspect(key, options2), "]");
          }
          options2.truncate -= key.length;
          value = options2.inspect(value, options2);
          return "".concat(key, ": ").concat(value);
        }
        function inspectArray(array, options2) {
          var nonIndexProperties = Object.keys(array).slice(array.length);
          if (!array.length && !nonIndexProperties.length)
            return "[]";
          options2.truncate -= 4;
          var listContents = inspectList(array, options2);
          options2.truncate -= listContents.length;
          var propertyContents = "";
          if (nonIndexProperties.length) {
            propertyContents = inspectList(nonIndexProperties.map(function(key) {
              return [key, array[key]];
            }), options2, inspectProperty);
          }
          return "[ ".concat(listContents).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
        }
        var toString = Function.prototype.toString;
        var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
        function getFuncName(aFunc) {
          if (typeof aFunc !== "function") {
            return null;
          }
          var name = "";
          if (typeof Function.prototype.name === "undefined" && typeof aFunc.name === "undefined") {
            var match = toString.call(aFunc).match(functionNameMatch);
            if (match) {
              name = match[1];
            }
          } else {
            name = aFunc.name;
          }
          return name;
        }
        var getFuncName_1 = getFuncName;
        var getArrayName = function getArrayName2(array) {
          if (typeof Buffer === "function" && array instanceof Buffer) {
            return "Buffer";
          }
          if (array[Symbol.toStringTag]) {
            return array[Symbol.toStringTag];
          }
          return getFuncName_1(array.constructor);
        };
        function inspectTypedArray(array, options2) {
          var name = getArrayName(array);
          options2.truncate -= name.length + 4;
          var nonIndexProperties = Object.keys(array).slice(array.length);
          if (!array.length && !nonIndexProperties.length)
            return "".concat(name, "[]");
          var output = "";
          for (var i = 0; i < array.length; i++) {
            var string = "".concat(options2.stylize(truncate(array[i], options2.truncate), "number")).concat(i === array.length - 1 ? "" : ", ");
            options2.truncate -= string.length;
            if (array[i] !== array.length && options2.truncate <= 3) {
              output += "".concat(truncator, "(").concat(array.length - array[i] + 1, ")");
              break;
            }
            output += string;
          }
          var propertyContents = "";
          if (nonIndexProperties.length) {
            propertyContents = inspectList(nonIndexProperties.map(function(key) {
              return [key, array[key]];
            }), options2, inspectProperty);
          }
          return "".concat(name, "[ ").concat(output).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
        }
        function inspectDate(dateObject, options2) {
          var split = dateObject.toJSON().split("T");
          var date2 = split[0];
          return options2.stylize("".concat(date2, "T").concat(truncate(split[1], options2.truncate - date2.length - 1)), "date");
        }
        function inspectFunction(func, options2) {
          var name = getFuncName_1(func);
          if (!name) {
            return options2.stylize("[Function]", "special");
          }
          return options2.stylize("[Function ".concat(truncate(name, options2.truncate - 11), "]"), "special");
        }
        function inspectMapEntry(_ref, options2) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
          options2.truncate -= 4;
          key = options2.inspect(key, options2);
          options2.truncate -= key.length;
          value = options2.inspect(value, options2);
          return "".concat(key, " => ").concat(value);
        }
        function mapToEntries(map) {
          var entries = [];
          map.forEach(function(value, key) {
            entries.push([key, value]);
          });
          return entries;
        }
        function inspectMap(map, options2) {
          var size = map.size - 1;
          if (size <= 0) {
            return "Map{}";
          }
          options2.truncate -= 7;
          return "Map{ ".concat(inspectList(mapToEntries(map), options2, inspectMapEntry), " }");
        }
        var isNaN2 = Number.isNaN || function(i) {
          return i !== i;
        };
        function inspectNumber(number2, options2) {
          if (isNaN2(number2)) {
            return options2.stylize("NaN", "number");
          }
          if (number2 === Infinity) {
            return options2.stylize("Infinity", "number");
          }
          if (number2 === -Infinity) {
            return options2.stylize("-Infinity", "number");
          }
          if (number2 === 0) {
            return options2.stylize(1 / number2 === Infinity ? "+0" : "-0", "number");
          }
          return options2.stylize(truncate(number2, options2.truncate), "number");
        }
        function inspectBigInt(number2, options2) {
          var nums = truncate(number2.toString(), options2.truncate - 1);
          if (nums !== truncator)
            nums += "n";
          return options2.stylize(nums, "bigint");
        }
        function inspectRegExp(value, options2) {
          var flags = value.toString().split("/")[2];
          var sourceLength = options2.truncate - (2 + flags.length);
          var source2 = value.source;
          return options2.stylize("/".concat(truncate(source2, sourceLength), "/").concat(flags), "regexp");
        }
        function arrayFromSet(set) {
          var values = [];
          set.forEach(function(value) {
            values.push(value);
          });
          return values;
        }
        function inspectSet(set, options2) {
          if (set.size === 0)
            return "Set{}";
          options2.truncate -= 7;
          return "Set{ ".concat(inspectList(arrayFromSet(set), options2), " }");
        }
        var stringEscapeChars = new RegExp("['\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]", "g");
        var escapeCharacters = {
          "\b": "\\b",
          "	": "\\t",
          "\n": "\\n",
          "\f": "\\f",
          "\r": "\\r",
          "'": "\\'",
          "\\": "\\\\"
        };
        var hex = 16;
        var unicodeLength = 4;
        function escape(char) {
          return escapeCharacters[char] || "\\u".concat("0000".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));
        }
        function inspectString(string, options2) {
          if (stringEscapeChars.test(string)) {
            string = string.replace(stringEscapeChars, escape);
          }
          return options2.stylize("'".concat(truncate(string, options2.truncate - 2), "'"), "string");
        }
        function inspectSymbol(value) {
          if ("description" in Symbol.prototype) {
            return value.description ? "Symbol(".concat(value.description, ")") : "Symbol()";
          }
          return value.toString();
        }
        var getPromiseValue = function getPromiseValue2() {
          return "Promise{\u2026}";
        };
        try {
          var _process$binding = process.binding("util"), getPromiseDetails = _process$binding.getPromiseDetails, kPending = _process$binding.kPending, kRejected = _process$binding.kRejected;
          if (Array.isArray(getPromiseDetails(Promise.resolve()))) {
            getPromiseValue = function getPromiseValue2(value, options2) {
              var _getPromiseDetails = getPromiseDetails(value), _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2), state = _getPromiseDetails2[0], innerValue = _getPromiseDetails2[1];
              if (state === kPending) {
                return "Promise{<pending>}";
              }
              return "Promise".concat(state === kRejected ? "!" : "", "{").concat(options2.inspect(innerValue, options2), "}");
            };
          }
        } catch (notNode) {
        }
        var inspectPromise = getPromiseValue;
        function inspectObject(object, options2) {
          var properties = Object.getOwnPropertyNames(object);
          var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];
          if (properties.length === 0 && symbols.length === 0) {
            return "{}";
          }
          options2.truncate -= 4;
          options2.seen = options2.seen || [];
          if (options2.seen.indexOf(object) >= 0) {
            return "[Circular]";
          }
          options2.seen.push(object);
          var propertyContents = inspectList(properties.map(function(key) {
            return [key, object[key]];
          }), options2, inspectProperty);
          var symbolContents = inspectList(symbols.map(function(key) {
            return [key, object[key]];
          }), options2, inspectProperty);
          options2.seen.pop();
          var sep = "";
          if (propertyContents && symbolContents) {
            sep = ", ";
          }
          return "{ ".concat(propertyContents).concat(sep).concat(symbolContents, " }");
        }
        var toStringTag = typeof Symbol !== "undefined" && Symbol.toStringTag ? Symbol.toStringTag : false;
        function inspectClass(value, options2) {
          var name = "";
          if (toStringTag && toStringTag in value) {
            name = value[toStringTag];
          }
          name = name || getFuncName_1(value.constructor);
          if (!name || name === "_class") {
            name = "<Anonymous Class>";
          }
          options2.truncate -= name.length;
          return "".concat(name).concat(inspectObject(value, options2));
        }
        function inspectArguments(args, options2) {
          if (args.length === 0)
            return "Arguments[]";
          options2.truncate -= 13;
          return "Arguments[ ".concat(inspectList(args, options2), " ]");
        }
        var errorKeys = ["stack", "line", "column", "name", "message", "fileName", "lineNumber", "columnNumber", "number", "description"];
        function inspectObject$1(error, options2) {
          var properties = Object.getOwnPropertyNames(error).filter(function(key) {
            return errorKeys.indexOf(key) === -1;
          });
          var name = error.name;
          options2.truncate -= name.length;
          var message = "";
          if (typeof error.message === "string") {
            message = truncate(error.message, options2.truncate);
          } else {
            properties.unshift("message");
          }
          message = message ? ": ".concat(message) : "";
          options2.truncate -= message.length + 5;
          var propertyContents = inspectList(properties.map(function(key) {
            return [key, error[key]];
          }), options2, inspectProperty);
          return "".concat(name).concat(message).concat(propertyContents ? " { ".concat(propertyContents, " }") : "");
        }
        function inspectAttribute(_ref, options2) {
          var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
          options2.truncate -= 3;
          if (!value) {
            return "".concat(options2.stylize(key, "yellow"));
          }
          return "".concat(options2.stylize(key, "yellow"), "=").concat(options2.stylize('"'.concat(value, '"'), "string"));
        }
        function inspectHTMLCollection(collection, options2) {
          return inspectList(collection, options2, inspectHTML, "\n");
        }
        function inspectHTML(element, options2) {
          var properties = element.getAttributeNames();
          var name = element.tagName.toLowerCase();
          var head = options2.stylize("<".concat(name), "special");
          var headClose = options2.stylize(">", "special");
          var tail = options2.stylize("</".concat(name, ">"), "special");
          options2.truncate -= name.length * 2 + 5;
          var propertyContents = "";
          if (properties.length > 0) {
            propertyContents += " ";
            propertyContents += inspectList(properties.map(function(key) {
              return [key, element.getAttribute(key)];
            }), options2, inspectAttribute, " ");
          }
          options2.truncate -= propertyContents.length;
          var truncate2 = options2.truncate;
          var children = inspectHTMLCollection(element.children, options2);
          if (children && children.length > truncate2) {
            children = "".concat(truncator, "(").concat(element.children.length, ")");
          }
          return "".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);
        }
        var symbolsSupported = typeof Symbol === "function" && typeof Symbol.for === "function";
        var chaiInspect = symbolsSupported ? Symbol.for("chai/inspect") : "@@chai/inspect";
        var nodeInspect = false;
        try {
          var nodeUtil = require_util4();
          nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
        } catch (noNodeInspect) {
          nodeInspect = false;
        }
        var constructorMap = /* @__PURE__ */ new WeakMap();
        var stringTagMap = {};
        var baseTypesMap = {
          undefined: function undefined$1(value, options2) {
            return options2.stylize("undefined", "undefined");
          },
          null: function _null(value, options2) {
            return options2.stylize(null, "null");
          },
          boolean: function boolean(value, options2) {
            return options2.stylize(value, "boolean");
          },
          Boolean: function Boolean2(value, options2) {
            return options2.stylize(value, "boolean");
          },
          number: inspectNumber,
          Number: inspectNumber,
          bigint: inspectBigInt,
          BigInt: inspectBigInt,
          string: inspectString,
          String: inspectString,
          function: inspectFunction,
          Function: inspectFunction,
          symbol: inspectSymbol,
          Symbol: inspectSymbol,
          Array: inspectArray,
          Date: inspectDate,
          Map: inspectMap,
          Set: inspectSet,
          RegExp: inspectRegExp,
          Promise: inspectPromise,
          WeakSet: function WeakSet2(value, options2) {
            return options2.stylize("WeakSet{\u2026}", "special");
          },
          WeakMap: function WeakMap2(value, options2) {
            return options2.stylize("WeakMap{\u2026}", "special");
          },
          Arguments: inspectArguments,
          Int8Array: inspectTypedArray,
          Uint8Array: inspectTypedArray,
          Uint8ClampedArray: inspectTypedArray,
          Int16Array: inspectTypedArray,
          Uint16Array: inspectTypedArray,
          Int32Array: inspectTypedArray,
          Uint32Array: inspectTypedArray,
          Float32Array: inspectTypedArray,
          Float64Array: inspectTypedArray,
          Generator: function Generator() {
            return "";
          },
          DataView: function DataView2() {
            return "";
          },
          ArrayBuffer: function ArrayBuffer2() {
            return "";
          },
          Error: inspectObject$1,
          HTMLCollection: inspectHTMLCollection,
          NodeList: inspectHTMLCollection
        };
        var inspectCustom = function inspectCustom2(value, options2, type2) {
          if (chaiInspect in value && typeof value[chaiInspect] === "function") {
            return value[chaiInspect](options2);
          }
          if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === "function") {
            return value[nodeInspect](options2.depth, options2);
          }
          if ("inspect" in value && typeof value.inspect === "function") {
            return value.inspect(options2.depth, options2);
          }
          if ("constructor" in value && constructorMap.has(value.constructor)) {
            return constructorMap.get(value.constructor)(value, options2);
          }
          if (stringTagMap[type2]) {
            return stringTagMap[type2](value, options2);
          }
          return "";
        };
        var toString$1 = Object.prototype.toString;
        function inspect2(value, options2) {
          options2 = normaliseOptions(options2);
          options2.inspect = inspect2;
          var _options = options2, customInspect = _options.customInspect;
          var type2 = value === null ? "null" : _typeof(value);
          if (type2 === "object") {
            type2 = toString$1.call(value).slice(8, -1);
          }
          if (baseTypesMap[type2]) {
            return baseTypesMap[type2](value, options2);
          }
          if (customInspect && value) {
            var output = inspectCustom(value, options2, type2);
            if (output) {
              if (typeof output === "string")
                return output;
              return inspect2(output, options2);
            }
          }
          var proto = value ? Object.getPrototypeOf(value) : false;
          if (proto === Object.prototype || proto === null) {
            return inspectObject(value, options2);
          }
          if (value && typeof HTMLElement === "function" && value instanceof HTMLElement) {
            return inspectHTML(value, options2);
          }
          if ("constructor" in value) {
            if (value.constructor !== Object) {
              return inspectClass(value, options2);
            }
            return inspectObject(value, options2);
          }
          if (value === Object(value)) {
            return inspectObject(value, options2);
          }
          return options2.stylize(String(value), type2);
        }
        function registerConstructor(constructor, inspector) {
          if (constructorMap.has(constructor)) {
            return false;
          }
          constructorMap.add(constructor, inspector);
          return true;
        }
        function registerStringTag(stringTag, inspector) {
          if (stringTag in stringTagMap) {
            return false;
          }
          stringTagMap[stringTag] = inspector;
          return true;
        }
        var custom = chaiInspect;
        exports2.custom = custom;
        exports2.default = inspect2;
        exports2.inspect = inspect2;
        exports2.registerConstructor = registerConstructor;
        exports2.registerStringTag = registerStringTag;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // gen/items/csl-types.json
  var require_csl_types = __commonJS({
    "gen/items/csl-types.json"(exports, module) {
      module.exports = ["classic", "broadcast", "song", "legal_case", "article-magazine", "interview", "map", "personal_communication", "entry-dictionary", "book", "standard", "hearing", "review-book", "post", "treaty", "thesis", "patent", "review", "musical_score", "document", "regulation", "entry", "gazette", "dataset", "article-journal", "speech", "motion_picture", "figure", "article-newspaper", "post-weblog", "report", "article", "bill", "legal_commentary", "entry-encyclopedia", "chapter", "paper-conference", "pamphlet", "webpage", "legislation", "manuscript", "graphic", "video"];
    }
  });

  // translators/Better CSL JSON.ts
  var Better_CSL_JSON_exports = {};
  __export(Better_CSL_JSON_exports, {
    Translator: () => Translator,
    doExport: () => doExport
  });
  init_globals();

  // translators/lib/translator.ts
  init_globals();

  // gen/preferences/meta.ts
  init_globals();
  var names = [
    "ascii",
    "asciiBibLaTeX",
    "asciiBibTeX",
    "autoAbbrev",
    "autoAbbrevStyle",
    "autoExport",
    "autoExportDelay",
    "autoExportIdleWait",
    "autoExportPathReplaceDiacritics",
    "autoExportPathReplaceDirSep",
    "autoExportPathReplaceSpace",
    "automaticTags",
    "autoPinDelay",
    "auxImport",
    "baseAttachmentPath",
    "biblatexExtendedDateFormat",
    "biblatexExtendedNameFormat",
    "biblatexExtractEprint",
    "bibtexParticleNoOp",
    "bibtexURL",
    "cache",
    "cacheFlushInterval",
    "charmap",
    "citeCommand",
    "citekeyFold",
    "citekeyFormat",
    "citekeyFormatBackup",
    "citekeySearch",
    "csquotes",
    "DOIandURL",
    "exportBibTeXStrings",
    "exportBraceProtection",
    "exportTitleCase",
    "extraMergeCitekeys",
    "extraMergeCSL",
    "extraMergeTeX",
    "git",
    "import",
    "importBibTeXStrings",
    "importCaseProtection",
    "importCitationKey",
    "importExtra",
    "importJabRefAbbreviations",
    "importJabRefStrings",
    "importNoteToExtra",
    "importSentenceCase",
    "importUnknownTexCommand",
    "itemObserverDelay",
    "jabrefFormat",
    "jieba",
    "keyConflictPolicy",
    "keyScope",
    "kuroshiro",
    "language",
    "mapMath",
    "mapText",
    "mapUnicode",
    "parseParticles",
    "patchDates",
    "platform",
    "postscript",
    "postscriptOverride",
    "preferencesOverride",
    "qualityReport",
    "quickCopyEta",
    "quickCopyMode",
    "quickCopyOrgMode",
    "quickCopyPandocBrackets",
    "quickCopySelectLink",
    "rawImports",
    "rawLaTag",
    "relativeFilePaths",
    "retainCache",
    "scrubDatabase",
    "separatorList",
    "separatorNames",
    "skipFields",
    "skipWords",
    "startupProgress",
    "strings",
    "stringsOverride",
    "testing",
    "verbatimFields",
    "warnBulkModify",
    "warnTitleCased",
    "worker"
  ];
  var affects = {
    ascii: ["Better BibLaTeX", "Better BibTeX"],
    asciiBibLaTeX: ["Better BibLaTeX"],
    asciiBibTeX: ["Better BibTeX"],
    autoAbbrev: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    autoAbbrevStyle: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    automaticTags: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    baseAttachmentPath: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    biblatexExtendedDateFormat: ["Better BibLaTeX"],
    biblatexExtendedNameFormat: ["Better BibLaTeX"],
    biblatexExtractEprint: ["Better BibLaTeX", "Better BibTeX"],
    bibtexParticleNoOp: ["Better BibTeX"],
    bibtexURL: ["Better BibTeX"],
    cache: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    charmap: ["Better BibLaTeX", "Better BibTeX"],
    csquotes: ["Better BibLaTeX", "Better BibTeX"],
    DOIandURL: ["Better BibLaTeX", "Better BibTeX"],
    exportBibTeXStrings: ["Better BibLaTeX", "Better BibTeX"],
    exportBraceProtection: ["Better BibLaTeX", "Better BibTeX"],
    exportTitleCase: ["Better BibLaTeX", "Better BibTeX"],
    jabrefFormat: ["Better BibLaTeX", "Better BibTeX"],
    language: ["Better BibLaTeX", "Better BibTeX"],
    mapMath: ["Better BibLaTeX", "Better BibTeX"],
    mapText: ["Better BibLaTeX", "Better BibTeX"],
    mapUnicode: ["Better BibLaTeX", "Better BibTeX"],
    parseParticles: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    postscript: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    qualityReport: ["Better BibLaTeX", "Better BibTeX"],
    rawLaTag: ["Better BibLaTeX", "Better BibTeX"],
    relativeFilePaths: ["Better BibLaTeX", "Better BibTeX"],
    separatorList: ["Better BibLaTeX", "Better BibTeX"],
    separatorNames: ["Better BibLaTeX", "Better BibTeX"],
    skipFields: ["Better BibLaTeX", "Better BibTeX", "Better CSL JSON", "Better CSL YAML"],
    skipWords: ["Better BibLaTeX", "Better BibTeX"],
    strings: ["Better BibLaTeX", "Better BibTeX"]
  };
  var defaults = {
    ascii: "",
    asciiBibLaTeX: false,
    asciiBibTeX: true,
    autoAbbrev: false,
    autoAbbrevStyle: "",
    autoExport: "immediate",
    autoExportDelay: 5,
    autoExportIdleWait: 10,
    autoExportPathReplaceDiacritics: false,
    autoExportPathReplaceDirSep: "-",
    autoExportPathReplaceSpace: " ",
    automaticTags: true,
    autoPinDelay: 0,
    auxImport: false,
    baseAttachmentPath: "",
    biblatexExtendedDateFormat: true,
    biblatexExtendedNameFormat: false,
    biblatexExtractEprint: true,
    bibtexParticleNoOp: false,
    bibtexURL: "off",
    cache: true,
    cacheFlushInterval: 5,
    charmap: "",
    citeCommand: "cite",
    citekeyFold: true,
    citekeyFormat: "auth.lower + shorttitle(3,3) + year",
    citekeyFormatBackup: "",
    citekeySearch: true,
    csquotes: "",
    DOIandURL: "both",
    exportBibTeXStrings: "off",
    exportBraceProtection: true,
    exportTitleCase: true,
    extraMergeCitekeys: false,
    extraMergeCSL: false,
    extraMergeTeX: false,
    git: "config",
    import: true,
    importBibTeXStrings: true,
    importCaseProtection: "as-needed",
    importCitationKey: true,
    importExtra: true,
    importJabRefAbbreviations: true,
    importJabRefStrings: true,
    importNoteToExtra: "",
    importSentenceCase: "on+guess",
    importUnknownTexCommand: "ignore",
    itemObserverDelay: 5,
    jabrefFormat: 0,
    jieba: false,
    keyConflictPolicy: "keep",
    keyScope: "library",
    kuroshiro: false,
    language: "langid",
    mapMath: "",
    mapText: "",
    mapUnicode: "conservative",
    parseParticles: true,
    patchDates: "",
    platform: "",
    postscript: "",
    postscriptOverride: "",
    preferencesOverride: "",
    qualityReport: false,
    quickCopyEta: "",
    quickCopyMode: "latex",
    quickCopyOrgMode: "zotero",
    quickCopyPandocBrackets: false,
    quickCopySelectLink: "zotero",
    rawImports: false,
    rawLaTag: "#LaTeX",
    relativeFilePaths: false,
    retainCache: false,
    scrubDatabase: false,
    separatorList: "and",
    separatorNames: "and",
    skipFields: "",
    skipWords: "a,ab,aboard,about,above,across,after,against,al,along,amid,among,an,and,anti,around,as,at,before,behind,below,beneath,beside,besides,between,beyond,but,by,d,da,das,de,del,dell,dello,dei,degli,della,dell,delle,dem,den,der,des,despite,die,do,down,du,during,ein,eine,einem,einen,einer,eines,el,en,et,except,for,from,gli,i,il,in,inside,into,is,l,la,las,le,les,like,lo,los,near,nor,of,off,on,onto,or,over,past,per,plus,round,save,since,so,some,sur,than,the,through,to,toward,towards,un,una,unas,under,underneath,une,unlike,uno,unos,until,up,upon,versus,via,von,while,with,within,without,yet,zu,zum",
    startupProgress: "popup",
    strings: "",
    stringsOverride: "",
    testing: false,
    verbatimFields: "url,doi,file,ids,eprint,/^verb[a-z]$/,groups,/^citeulike-linkout-[0-9]+$/, /^bdsk-url-[0-9]+$/",
    warnBulkModify: 10,
    warnTitleCased: false,
    worker: true
  };
  var schema = {
    autoExport: {
      preferences: ["asciiBibLaTeX", "asciiBibTeX", "biblatexExtendedNameFormat", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
      displayOptions: ["useJournalAbbreviation", "exportNotes"]
    },
    translator: {
      "Better CSL JSON": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "f4b52ab0-f878-4556-85a0-c7aeedd09dfc"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: [],
        displayOptions: []
      },
      "Better BibLaTeX": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "f895aa0d-f28e-47fe-b247-2ea77c6ed583"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibLaTeX": {
              "type": "boolean"
            },
            "biblatexExtendedNameFormat": {
              "type": "boolean"
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibLaTeX",
            "biblatexExtendedNameFormat",
            "DOIandURL"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibLaTeX": {
              "type": "boolean"
            },
            "biblatexExtendedNameFormat": {
              "type": "boolean"
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibLaTeX",
            "biblatexExtendedNameFormat",
            "DOIandURL",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: ["asciiBibLaTeX", "biblatexExtendedNameFormat", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"]
      },
      "Better BibTeX": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "ca65189f-8815-4afe-8c8b-8c7c15f0edca"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibTeX": {
              "type": "boolean"
            },
            "bibtexParticleNoOp": {
              "type": "boolean"
            },
            "bibtexURL": {
              "enum": [
                "off",
                "note",
                "note-url-ish",
                "url",
                "url-ish"
              ]
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibTeX",
            "bibtexParticleNoOp",
            "bibtexURL",
            "DOIandURL"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "asciiBibTeX": {
              "type": "boolean"
            },
            "bibtexParticleNoOp": {
              "type": "boolean"
            },
            "bibtexURL": {
              "enum": [
                "off",
                "note",
                "note-url-ish",
                "url",
                "url-ish"
              ]
            },
            "DOIandURL": {
              "enum": [
                "both",
                "doi",
                "url"
              ]
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "asciiBibTeX",
            "bibtexParticleNoOp",
            "bibtexURL",
            "DOIandURL",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: ["asciiBibTeX", "bibtexParticleNoOp", "bibtexURL", "DOIandURL"],
        displayOptions: ["exportNotes", "useJournalAbbreviation"]
      },
      "BetterBibTeX JSON": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "36a3b0b5-bad0-4a04-b79b-441c7cef77db"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID",
            "exportNotes"
          ]
        },
        cache: false,
        preferences: [],
        displayOptions: ["exportNotes"]
      },
      "Better CSL YAML": {
        autoexport: {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": {
              "enum": [
                "collection",
                "library"
              ]
            },
            "id": {
              "type": "integer"
            },
            "path": {
              "type": "string",
              "minLength": 1
            },
            "status": {
              "enum": [
                "scheduled",
                "running",
                "done",
                "error"
              ]
            },
            "translatorID": {
              "const": "0f238e69-043e-4882-93bf-342de007de19"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            },
            "recursive": {
              "type": "boolean"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "type",
            "id",
            "path",
            "status",
            "translatorID"
          ]
        },
        cache: {
          "type": "object",
          "properties": {
            "itemID": {
              "type": "integer"
            },
            "entry": {
              "type": "string"
            },
            "exportNotes": {
              "type": "boolean"
            },
            "useJournalAbbreviation": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "$loki": {
              "type": "integer"
            }
          },
          "required": [
            "itemID",
            "exportNotes",
            "useJournalAbbreviation",
            "entry"
          ],
          "additionalProperties": false
        },
        preferences: [],
        displayOptions: []
      }
    }
  };

  // content/client.ts
  init_globals();
  if (typeof Components !== "undefined")
    Components.utils.import("resource://zotero/config.js");
  var client = typeof Zotero !== "undefined" ? ZOTERO_CONFIG.GUID.replace(/@.*/, "").replace("-", "") : "zotero";

  // content/ping.ts
  init_globals();
  var Pinger = class {
    constructor({ start = 0, total, step = 5, name = "", callback }) {
      this.incr = 100 / total;
      this.name = name;
      this.pct = start * this.incr;
      this.step = step;
      this.callback = callback;
      this.next = Math.floor(this.pct / step) * step;
      if (this.name)
        Zotero.debug(`ping: ${name} start ${JSON.stringify({ ...this, start, total })}`);
      this.emit();
    }
    update() {
      this.pct += this.incr;
      if (this.name)
        Zotero.debug(`ping: ${this.name} update to ${this.pct}`);
      if (Math.round(this.pct) >= this.next)
        this.emit();
    }
    emit() {
      if (this.callback) {
        if (this.name)
          Zotero.debug(`ping: ${this.name} emit ${Math.min(this.next, 100)}`);
        this.callback(Math.min(this.next, 100));
        if (this.next > 100)
          this.callback = null;
        this.next += this.step;
      }
    }
    done() {
      if (this.name)
        Zotero.debug(`ping: ${this.name} done`);
      if (this.callback && this.pct < this.next)
        this.callback(Math.min(this.next, 100));
    }
  };

  // translators/lib/translator.ts
  var cacheDisabler = new class {
    get(target, property) {
      if (property === "collections") {
        target.$cacheable = false;
      }
      return target[property];
    }
  }();
  var Items = class {
    constructor(cacheable) {
      this.list = [];
      this.map = {};
      let item;
      while (item = Zotero.nextItem()) {
        item.$cacheable = cacheable;
        item.journalAbbreviation = item.journalAbbreviation || item.autoJournalAbbreviation;
        this.list.push(this.map[item.itemID] = this.map[item.itemKey] = new Proxy(item, cacheDisabler));
      }
      this.list.sort((a, b) => {
        const ka = [a.citationKey || a.itemType, a.dateModified || a.dateAdded, a.itemID].join("	");
        const kb = [b.citationKey || b.itemType, b.dateModified || b.dateAdded, b.itemID].join("	");
        return ka.localeCompare(kb, void 0, { sensitivity: "base" });
      });
      this.ping = new Pinger({
        total: this.list.length,
        callback: (pct) => Zotero.worker ? Zotero.BetterBibTeX.setProgress(pct) : null
      });
    }
    *items() {
      for (const item of this.list) {
        yield this.current = item;
        this.ping.update();
      }
      this.ping.done();
    }
    *regularitems() {
      for (const item of this.list) {
        switch (item.itemType) {
          case "annotation":
          case "note":
          case "attachment":
            break;
          default:
            yield this.current = item;
        }
        this.ping.update();
      }
      this.ping.done();
    }
  };
  function escapeRegExp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  var ITranslator = class {
    constructor() {
      this.export = {
        dir: void 0,
        path: void 0
      };
      this.cacheable = true;
      this.initialized = false;
      const collator = new Intl.Collator("en");
      this.stringCompare = collator.compare.bind(collator);
    }
    get exportDir() {
      this._items.current.$cacheable = false;
      return this.export.dir;
    }
    get exportPath() {
      this._items.current.$cacheable = false;
      return this.export.path;
    }
    typefield(field) {
      field = field.trim();
      if (field.startsWith("bibtex."))
        return this.BetterBibTeX ? field.replace(/^bibtex\./, "") : "";
      if (field.startsWith("biblatex."))
        return this.BetterBibLaTeX ? field.replace(/^biblatex\./, "") : "";
      return field;
    }
    init(mode) {
      var _a, _b, _c, _d, _e;
      this[ZOTERO_TRANSLATOR_INFO.label.replace(/[^a-z]/ig, "")] = true;
      this.BetterTeX = this.BetterBibTeX || this.BetterBibLaTeX;
      this.BetterCSL = this.BetterCSLJSON || this.BetterCSLYAML;
      this.options = ZOTERO_TRANSLATOR_INFO.displayOptions || {};
      this.platform = Zotero.getHiddenPref("better-bibtex.platform");
      this.isJurisM = client === "jurism";
      this.isZotero = !this.isJurisM;
      this.paths = {
        caseSensitive: this.platform !== "mac" && this.platform !== "win",
        sep: this.platform === "win" ? "\\" : "/"
      };
      try {
        if (Zotero.getOption("cache") === false)
          this.cacheable = false;
      } catch (err) {
      }
      for (const key in this.options) {
        if (typeof this.options[key] === "boolean") {
          this.options[key] = Zotero.getOption(key);
        } else {
          this.options[key] = !!Zotero.getOption(key);
        }
      }
      if (mode === "export") {
        this.cache = {
          hits: 0,
          requests: 0
        };
        this.export = {
          dir: Zotero.getOption("exportDir"),
          path: Zotero.getOption("exportPath")
        };
        if ((_a = this.export.dir) == null ? void 0 : _a.endsWith(this.paths.sep))
          this.export.dir = this.export.dir.slice(0, -1);
        this.options.cacheUse = Zotero.getOption("cacheUse");
      }
      this.preferences = Object.entries(defaults).reduce((acc, [pref, dflt]) => {
        var _a2, _b2;
        acc[pref] = (_b2 = (_a2 = this.getPreferenceOverride(pref)) != null ? _a2 : Zotero.getHiddenPref(`better-bibtex.${pref}`)) != null ? _b2 : dflt;
        return acc;
      }, {});
      this.importToExtra = {};
      this.preferences.importNoteToExtra.toLowerCase().split(/\s*,\s*/).filter((field) => field).forEach((field) => {
        this.importToExtra[field.replace(/\s*=.*/, "")] = field.match(/\s*=\s*force$/) ? "force" : "plain";
      });
      this.skipFields = this.preferences.skipFields.toLowerCase().split(",").map((field) => this.typefield(field)).filter((s) => s);
      this.skipField = this.skipFields.reduce((acc, field) => {
        acc[field] = true;
        return acc;
      }, {});
      let m;
      this.verbatimFields = this.preferences.verbatimFields.toLowerCase().split(",").map((field) => (m = field.trim().match(/^[/](.+)[/]$/)) ? new RegExp(m[1], "i") : this.typefield(field)).filter((s) => s);
      if (!this.verbatimFields.length)
        this.verbatimFields = null;
      this.csquotes = this.preferences.csquotes ? { open: this.preferences.csquotes[0], close: this.preferences.csquotes[1] } : null;
      this.preferences.testing = Zotero.getHiddenPref("better-bibtex.testing");
      if (mode === "export") {
        this.unicode = !this.preferences[`ascii${ZOTERO_TRANSLATOR_INFO.label.replace(/Better /, "")}`];
        if (this.preferences.baseAttachmentPath && (this.export.dir === this.preferences.baseAttachmentPath || ((_b = this.export.dir) == null ? void 0 : _b.startsWith(this.preferences.baseAttachmentPath + this.paths.sep)))) {
          this.preferences.relativeFilePaths = true;
        }
        this.cacheable = this.cacheable && this.preferences.cache && !(this.options.exportFileData || this.preferences.relativeFilePaths || this.preferences.baseAttachmentPath && ((_c = this.export.dir) == null ? void 0 : _c.startsWith(this.preferences.baseAttachmentPath)));
        if (this.BetterTeX) {
          this.preferences.separatorList = this.preferences.separatorList.trim();
          this.preferences.separatorNames = this.preferences.separatorNames.trim();
          this.and = {
            list: {
              re: new RegExp(escapeRegExp(this.preferences.separatorList), "g"),
              repl: ` {${this.preferences.separatorList}} `
            },
            names: {
              re: new RegExp(` ${escapeRegExp(this.preferences.separatorNames)} `, "g"),
              repl: ` {${this.preferences.separatorNames}} `
            }
          };
          this.preferences.separatorList = ` ${this.preferences.separatorList} `;
          this.preferences.separatorNames = ` ${this.preferences.separatorNames} `;
        }
      }
      this.collections = {};
      if (mode === "export" && ((_d = ZOTERO_TRANSLATOR_INFO.configOptions) == null ? void 0 : _d.getCollections) && Zotero.nextCollection) {
        let collection;
        while (collection = Zotero.nextCollection()) {
          this.registerCollection(collection, "");
        }
      }
      if (!this.initialized && mode === "export" && this.preferences.testing && typeof __estrace === "undefined" && ((_e = schema.translator[ZOTERO_TRANSLATOR_INFO.label]) == null ? void 0 : _e.cache)) {
        const ignored = ["testing"];
        this.preferences = new Proxy(this.preferences, {
          set: (object, property, _value) => {
            throw new TypeError(`Unexpected set of preference ${String(property)}`);
          },
          get: (object, property) => {
            var _a2;
            if (property === "toJSON")
              return object[property];
            if (!names.includes(property))
              throw new TypeError(`Unsupported preference ${property}`);
            if (!ignored.includes(property) && !((_a2 = affects[property]) == null ? void 0 : _a2.includes(ZOTERO_TRANSLATOR_INFO.label)))
              throw new TypeError(`Preference ${property} claims not to affect ${ZOTERO_TRANSLATOR_INFO.label}`);
            return object[property];
          }
        });
      }
      this.initialized = true;
    }
    getPreferenceOverride(pref) {
      try {
        const override = Zotero.getOption(`preference_${pref}`);
        if (typeof override !== "undefined")
          this.cacheable = false;
        return override;
      } catch (err) {
        return void 0;
      }
    }
    registerCollection(collection, parent) {
      const key = (collection.primary ? collection.primary : collection).key;
      const children = collection.children || collection.descendents || [];
      const collections = children.filter((coll) => coll.type === "collection");
      this.collections[key] = {
        key,
        parent,
        name: collection.name,
        collections: collections.map((coll) => coll.key),
        items: children.filter((coll) => coll.type === "item").map((item) => item.id)
      };
      for (collection of collections) {
        this.registerCollection(collection, key);
      }
    }
    get collectionTree() {
      return Object.values(this.collections).filter((coll) => !coll.parent).map((coll) => this.nestedCollection(coll));
    }
    nestedCollection(collection) {
      this._items = this._items || new Items(this.cacheable);
      const nested = {
        key: collection.key,
        name: collection.name,
        items: collection.items.map((itemID) => this._items.map[itemID]).filter((item) => item),
        collections: collection.collections.map((key) => this.nestedCollection(this.collections[key])).filter((coll) => coll)
      };
      for (const coll of nested.collections) {
        coll.parent = nested;
      }
      return nested;
    }
    get items() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.items();
    }
    get regularitems() {
      this._items = this._items || new Items(this.cacheable);
      return this._items.regularitems();
    }
  };
  var Translator = new ITranslator();

  // translators/csl/csl.ts
  init_globals();

  // gen/items/items.ts
  init_globals();

  // content/ajv.ts
  init_globals();
  var import__ = __toESM(require__());
  var import_ajv_keywords = __toESM(require_dist());

  // node_modules/better-ajv-errors/lib/esm/index.mjs
  init_globals();
  var import_momoa = __toESM(require_api(), 1);

  // node_modules/better-ajv-errors/lib/esm/helpers.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/utils.mjs
  init_globals();
  var __defProp2 = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp2.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var eq = (x) => (y) => x === y;
  var not = (fn) => (x) => !fn(x);
  var getValues = (o) => Object.values(o);
  var notUndefined = (x) => x !== void 0;
  var isXError = (x) => (error) => error.keyword === x;
  var isRequiredError = isXError("required");
  var isAnyOfError = isXError("anyOf");
  var isEnumError = isXError("enum");
  var getErrors = (node) => node && node.errors ? node.errors.map((e) => e.keyword === "errorMessage" ? __spreadProps(__spreadValues({}, e.params.errors[0]), { message: e.message }) : e) : [];
  var getChildren = (node) => node && getValues(node.children) || [];
  var getSiblings = (parent) => (node) => getChildren(parent).filter(not(eq(node)));
  var concatAll = (xs) => (ys) => ys.reduce((zs, z) => zs.concat(z), xs);

  // node_modules/better-ajv-errors/lib/esm/validation-errors/index.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/validation-errors/required.mjs
  init_globals();
  var import_chalk = __toESM(require_source(), 1);

  // node_modules/better-ajv-errors/lib/esm/validation-errors/base.mjs
  init_globals();
  var import_code_frame = __toESM(require_lib3(), 1);

  // node_modules/better-ajv-errors/lib/esm/json/index.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/json/get-meta-from-path.mjs
  init_globals();

  // node_modules/better-ajv-errors/lib/esm/json/utils.mjs
  init_globals();
  var getPointers = (dataPath) => {
    return dataPath.split("/").slice(1).map((pointer2) => pointer2.split("~1").join("/").split("~0").join("~"));
  };

  // node_modules/better-ajv-errors/lib/esm/json/get-meta-from-path.mjs
  function getMetaFromPath(jsonAst, dataPath, includeIdentifierLocation) {
    const pointers = getPointers(dataPath);
    const lastPointerIndex = pointers.length - 1;
    return pointers.reduce((obj, pointer2, idx) => {
      switch (obj.type) {
        case "Object": {
          const filtered = obj.members.filter((child) => child.name.value === pointer2);
          if (filtered.length !== 1) {
            throw new Error(`Couldn't find property ${pointer2} of ${dataPath}`);
          }
          const { name, value } = filtered[0];
          return includeIdentifierLocation && idx === lastPointerIndex ? name : value;
        }
        case "Array":
          return obj.elements[pointer2];
        default:
          console.log(obj);
      }
    }, jsonAst.body);
  }

  // node_modules/better-ajv-errors/lib/esm/json/get-decorated-data-path.mjs
  init_globals();
  function getDecoratedDataPath(jsonAst, dataPath) {
    let decoratedPath = "";
    getPointers(dataPath).reduce((obj, pointer2) => {
      switch (obj.type) {
        case "Object": {
          decoratedPath += `/${pointer2}`;
          const filtered = obj.members.filter((child) => child.name.value === pointer2);
          if (filtered.length !== 1) {
            throw new Error(`Couldn't find property ${pointer2} of ${dataPath}`);
          }
          return filtered[0].value;
        }
        case "Array": {
          decoratedPath += `/${pointer2}${getTypeName(obj.elements[pointer2])}`;
          return obj.elements[pointer2];
        }
        default:
          console.log(obj);
      }
    }, jsonAst.body);
    return decoratedPath;
  }
  function getTypeName(obj) {
    if (!obj || !obj.elements) {
      return "";
    }
    const type2 = obj.elements.filter((child) => child && child.name && child.name.value === "type");
    if (!type2.length) {
      return "";
    }
    return type2[0].value && `:${type2[0].value.value}` || "";
  }

  // node_modules/better-ajv-errors/lib/esm/validation-errors/base.mjs
  var BaseValidationError = class {
    constructor(options2 = { isIdentifierLocation: false }, { data, schema: schema2, jsonAst, jsonRaw }) {
      this.options = options2;
      this.data = data;
      this.schema = schema2;
      this.jsonAst = jsonAst;
      this.jsonRaw = jsonRaw;
    }
    getLocation(dataPath = this.instancePath) {
      const { isIdentifierLocation, isSkipEndLocation } = this.options;
      const { loc } = getMetaFromPath(this.jsonAst, dataPath, isIdentifierLocation);
      return {
        start: loc.start,
        end: isSkipEndLocation ? void 0 : loc.end
      };
    }
    getDecoratedPath(dataPath = this.instancePath) {
      const decoratedPath = getDecoratedDataPath(this.jsonAst, dataPath);
      return decoratedPath;
    }
    getCodeFrame(message, dataPath = this.instancePath) {
      return (0, import_code_frame.codeFrameColumns)(this.jsonRaw, this.getLocation(dataPath), {
        highlightCode: true,
        message
      });
    }
    get instancePath() {
      return typeof this.options.instancePath !== "undefined" ? this.options.instancePath : this.options.dataPath;
    }
    print() {
      throw new Error(`Implement the 'print' method inside ${this.constructor.name}!`);
    }
    getError() {
      throw new Error(`Implement the 'getError' method inside ${this.constructor.name}!`);
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/required.mjs
  var __defProp3 = Object.defineProperty;
  var __defProps2 = Object.defineProperties;
  var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
  var __hasOwnProp3 = Object.prototype.hasOwnProperty;
  var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues2 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp3.call(b, prop))
        __defNormalProp2(a, prop, b[prop]);
    if (__getOwnPropSymbols2)
      for (var prop of __getOwnPropSymbols2(b)) {
        if (__propIsEnum2.call(b, prop))
          __defNormalProp2(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps2 = (a, b) => __defProps2(a, __getOwnPropDescs2(b));
  var RequiredValidationError = class extends BaseValidationError {
    getLocation(dataPath = this.instancePath) {
      const { start } = super.getLocation(dataPath);
      return { start };
    }
    print() {
      const { message, params } = this.options;
      const output = [import_chalk.default`{red {bold REQUIRED} ${message}}\n`];
      return output.concat(this.getCodeFrame(import_chalk.default`☹️  {magentaBright ${params.missingProperty}} is missing here!`));
    }
    getError() {
      const { message } = this.options;
      return __spreadProps2(__spreadValues2({}, this.getLocation()), {
        error: `${this.getDecoratedPath()} ${message}`,
        path: this.instancePath
      });
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/additional-prop.mjs
  init_globals();
  var import_chalk2 = __toESM(require_source(), 1);
  var __defProp4 = Object.defineProperty;
  var __defProps3 = Object.defineProperties;
  var __getOwnPropDescs3 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols3 = Object.getOwnPropertySymbols;
  var __hasOwnProp4 = Object.prototype.hasOwnProperty;
  var __propIsEnum3 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues3 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp4.call(b, prop))
        __defNormalProp3(a, prop, b[prop]);
    if (__getOwnPropSymbols3)
      for (var prop of __getOwnPropSymbols3(b)) {
        if (__propIsEnum3.call(b, prop))
          __defNormalProp3(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps3 = (a, b) => __defProps3(a, __getOwnPropDescs3(b));
  var AdditionalPropValidationError = class extends BaseValidationError {
    constructor(...args) {
      super(...args);
      this.options.isIdentifierLocation = true;
    }
    print() {
      const { message, params } = this.options;
      const output = [import_chalk2.default`{red {bold ADDTIONAL PROPERTY} ${message}}\n`];
      return output.concat(this.getCodeFrame(import_chalk2.default`😲  {magentaBright ${params.additionalProperty}} is not expected to be here!`, `${this.instancePath}/${params.additionalProperty}`));
    }
    getError() {
      const { params } = this.options;
      return __spreadProps3(__spreadValues3({}, this.getLocation(`${this.instancePath}/${params.additionalProperty}`)), {
        error: `${this.getDecoratedPath()} Property ${params.additionalProperty} is not expected to be here`,
        path: this.instancePath
      });
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/enum.mjs
  init_globals();
  var import_chalk3 = __toESM(require_source(), 1);
  var import_leven = __toESM(require_leven(), 1);
  var import_jsonpointer = __toESM(require_jsonpointer(), 1);
  var __defProp5 = Object.defineProperty;
  var __defProps4 = Object.defineProperties;
  var __getOwnPropDescs4 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols4 = Object.getOwnPropertySymbols;
  var __hasOwnProp5 = Object.prototype.hasOwnProperty;
  var __propIsEnum4 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues4 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp5.call(b, prop))
        __defNormalProp4(a, prop, b[prop]);
    if (__getOwnPropSymbols4)
      for (var prop of __getOwnPropSymbols4(b)) {
        if (__propIsEnum4.call(b, prop))
          __defNormalProp4(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps4 = (a, b) => __defProps4(a, __getOwnPropDescs4(b));
  var EnumValidationError = class extends BaseValidationError {
    print() {
      const {
        message,
        params: { allowedValues }
      } = this.options;
      const bestMatch = this.findBestMatch();
      const output = [
        import_chalk3.default`{red {bold ENUM} ${message}}`,
        import_chalk3.default`{red (${allowedValues.join(", ")})}\n`
      ];
      return output.concat(this.getCodeFrame(bestMatch !== null ? import_chalk3.default`👈🏽  Did you mean {magentaBright ${bestMatch}} here?` : import_chalk3.default`👈🏽  Unexpected value, should be equal to one of the allowed values`));
    }
    getError() {
      const { message, params } = this.options;
      const bestMatch = this.findBestMatch();
      const allowedValues = params.allowedValues.join(", ");
      const output = __spreadProps4(__spreadValues4({}, this.getLocation()), {
        error: `${this.getDecoratedPath()} ${message}: ${allowedValues}`,
        path: this.instancePath
      });
      if (bestMatch !== null) {
        output.suggestion = `Did you mean ${bestMatch}?`;
      }
      return output;
    }
    findBestMatch() {
      const {
        params: { allowedValues }
      } = this.options;
      const currentValue = this.instancePath === "" ? this.data : import_jsonpointer.default.get(this.data, this.instancePath);
      if (!currentValue) {
        return null;
      }
      const bestMatch = allowedValues.map((value) => ({
        value,
        weight: (0, import_leven.default)(value, currentValue.toString())
      })).sort((x, y) => x.weight > y.weight ? 1 : x.weight < y.weight ? -1 : 0)[0];
      return allowedValues.length === 1 || bestMatch.weight < bestMatch.value.length ? bestMatch.value : null;
    }
  };

  // node_modules/better-ajv-errors/lib/esm/validation-errors/default.mjs
  init_globals();
  var import_chalk4 = __toESM(require_source(), 1);
  var __defProp6 = Object.defineProperty;
  var __defProps5 = Object.defineProperties;
  var __getOwnPropDescs5 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols5 = Object.getOwnPropertySymbols;
  var __hasOwnProp6 = Object.prototype.hasOwnProperty;
  var __propIsEnum5 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp5 = (obj, key, value) => key in obj ? __defProp6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues5 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp6.call(b, prop))
        __defNormalProp5(a, prop, b[prop]);
    if (__getOwnPropSymbols5)
      for (var prop of __getOwnPropSymbols5(b)) {
        if (__propIsEnum5.call(b, prop))
          __defNormalProp5(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps5 = (a, b) => __defProps5(a, __getOwnPropDescs5(b));
  var DefaultValidationError = class extends BaseValidationError {
    print() {
      const { keyword, message } = this.options;
      const output = [import_chalk4.default`{red {bold ${keyword.toUpperCase()}} ${message}}\n`];
      return output.concat(this.getCodeFrame(import_chalk4.default`👈🏽  {magentaBright ${keyword}} ${message}`));
    }
    getError() {
      const { keyword, message } = this.options;
      return __spreadProps5(__spreadValues5({}, this.getLocation()), {
        error: `${this.getDecoratedPath()}: ${keyword} ${message}`,
        path: this.instancePath
      });
    }
  };

  // node_modules/better-ajv-errors/lib/esm/helpers.mjs
  var __defProp7 = Object.defineProperty;
  var __defProps6 = Object.defineProperties;
  var __getOwnPropDescs6 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols6 = Object.getOwnPropertySymbols;
  var __hasOwnProp7 = Object.prototype.hasOwnProperty;
  var __propIsEnum6 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp6 = (obj, key, value) => key in obj ? __defProp7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues6 = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp7.call(b, prop))
        __defNormalProp6(a, prop, b[prop]);
    if (__getOwnPropSymbols6)
      for (var prop of __getOwnPropSymbols6(b)) {
        if (__propIsEnum6.call(b, prop))
          __defNormalProp6(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps6 = (a, b) => __defProps6(a, __getOwnPropDescs6(b));
  var JSON_POINTERS_REGEX = /\/[\w_-]+(\/\d+)?/g;
  function makeTree(ajvErrors = []) {
    const root = { children: {} };
    ajvErrors.forEach((ajvError) => {
      const instancePath = typeof ajvError.instancePath !== "undefined" ? ajvError.instancePath : ajvError.dataPath;
      const paths = instancePath === "" ? [""] : instancePath.match(JSON_POINTERS_REGEX);
      paths && paths.reduce((obj, path, i) => {
        obj.children[path] = obj.children[path] || { children: {}, errors: [] };
        if (i === paths.length - 1) {
          obj.children[path].errors.push(ajvError);
        }
        return obj.children[path];
      }, root);
    });
    return root;
  }
  function filterRedundantErrors(root, parent, key) {
    getErrors(root).forEach((error) => {
      if (isRequiredError(error)) {
        root.errors = [error];
        root.children = {};
      }
    });
    if (getErrors(root).some(isAnyOfError)) {
      if (Object.keys(root.children).length > 0) {
        delete root.errors;
      }
    }
    if (root.errors && root.errors.length && getErrors(root).every(isEnumError)) {
      if (getSiblings(parent)(root).filter(notUndefined).some(getErrors)) {
        delete parent.children[key];
      }
    }
    Object.entries(root.children).forEach(([key2, child]) => filterRedundantErrors(child, root, key2));
  }
  function createErrorInstances(root, options2) {
    const errors = getErrors(root);
    if (errors.length && errors.every(isEnumError)) {
      const uniqueValues = new Set(concatAll([])(errors.map((e) => e.params.allowedValues)));
      const allowedValues = [...uniqueValues];
      const error = errors[0];
      return [
        new EnumValidationError(__spreadProps6(__spreadValues6({}, error), {
          params: { allowedValues }
        }), options2)
      ];
    } else {
      return concatAll(errors.reduce((ret, error) => {
        switch (error.keyword) {
          case "additionalProperties":
            return ret.concat(new AdditionalPropValidationError(error, options2));
          case "required":
            return ret.concat(new RequiredValidationError(error, options2));
          default:
            return ret.concat(new DefaultValidationError(error, options2));
        }
      }, []))(getChildren(root).map((child) => createErrorInstances(child, options2)));
    }
  }
  var helpers_default = (ajvErrors, options2) => {
    const tree = makeTree(ajvErrors || []);
    filterRedundantErrors(tree);
    return createErrorInstances(tree, options2);
  };

  // node_modules/better-ajv-errors/lib/esm/index.mjs
  var src_default = (schema2, data, errors, options2 = {}) => {
    const { format = "cli", indent = null, json = null } = options2;
    const jsonRaw = json || JSON.stringify(data, null, indent);
    const jsonAst = (0, import_momoa.parse)(jsonRaw);
    const customErrorToText = (error) => error.print().join("\n");
    const customErrorToStructure = (error) => error.getError();
    const customErrors = helpers_default(errors, {
      data,
      schema: schema2,
      jsonAst,
      jsonRaw
    });
    if (format === "cli") {
      return customErrors.map(customErrorToText).join("\n\n");
    } else {
      return customErrors.map(customErrorToStructure);
    }
  };

  // content/ajv.ts
  var options = {
    strict: false,
    discriminator: true,
    useDefaults: true
  };
  var noncoercing = new import__.default(options);
  var coercing = new import__.default({ ...options, coerceTypes: true });
  (0, import_ajv_keywords.default)(noncoercing);
  (0, import_ajv_keywords.default)(coercing);
  function validator(schema2, ajv) {
    const ok = ajv.compile(schema2);
    return function(data) {
      if (ok(data))
        return "";
      return src_default(schema2, data, ok.errors, { format: "js" }).map((err) => err.error + (err.suggestion ? ", " : "") + (err.suggestion || "")).join("\n");
    };
  }

  // gen/items/items.ts
  var jurism = client === "jurism";
  var zotero = !jurism;
  var zoterovalidator = validator(require_zotero(), noncoercing);
  var jurismvalidator = validator(require_jurism(), noncoercing);
  function unalias(item, { scrub = true } = {}) {
    delete item.inPublications;
    let v;
    if (v = item.dateDecided || item.issueDate || item.dateEnacted)
      item.date = v;
    if (scrub) {
      delete item.dateDecided;
      delete item.issueDate;
      delete item.dateEnacted;
    }
    if (v = item.artworkMedium || item.audioRecordingFormat || item.videoRecordingFormat || item.interviewMedium || item.audioFileType)
      item.medium = v;
    if (scrub) {
      delete item.artworkMedium;
      delete item.audioRecordingFormat;
      delete item.videoRecordingFormat;
      delete item.interviewMedium;
      delete item.audioFileType;
    }
    if (v = item.billNumber || item.docketNumber || item.patentNumber || item.episodeNumber || item.reportNumber || item.publicLawNumber)
      item.number = v;
    if (scrub) {
      delete item.billNumber;
      delete item.docketNumber;
      delete item.patentNumber;
      delete item.episodeNumber;
      delete item.reportNumber;
      delete item.publicLawNumber;
    }
    if (v = item.codePages || item.firstPage)
      item.pages = v;
    if (scrub) {
      delete item.codePages;
      delete item.firstPage;
    }
    if (v = item.blogTitle || item.bookTitle || item.proceedingsTitle || item.dictionaryTitle || item.encyclopediaTitle || item.forumTitle || item.programTitle || item.websiteTitle)
      item.publicationTitle = v;
    if (scrub) {
      delete item.blogTitle;
      delete item.bookTitle;
      delete item.proceedingsTitle;
      delete item.dictionaryTitle;
      delete item.encyclopediaTitle;
      delete item.forumTitle;
      delete item.programTitle;
      delete item.websiteTitle;
    }
    if (v = item.label || item.company || item.distributor || item.network || item.university || item.studio)
      item.publisher = v;
    if (scrub) {
      delete item.label;
      delete item.company;
      delete item.distributor;
      delete item.network;
      delete item.university;
      delete item.studio;
    }
    if (v = item.caseName || item.subject || item.nameOfAct)
      item.title = v;
    if (scrub) {
      delete item.caseName;
      delete item.subject;
      delete item.nameOfAct;
    }
    if (v = item.websiteType || item.genre || item.postType || item.letterType || item.manuscriptType || item.mapType || item.presentationType || item.reportType || item.thesisType)
      item.type = v;
    if (scrub) {
      delete item.websiteType;
      delete item.genre;
      delete item.postType;
      delete item.letterType;
      delete item.manuscriptType;
      delete item.mapType;
      delete item.presentationType;
      delete item.reportType;
      delete item.thesisType;
    }
    if (v = item.codeVolume || item.reporterVolume)
      item.volume = v;
    if (scrub) {
      delete item.codeVolume;
      delete item.reporterVolume;
    }
    if (zotero) {
      if (v = item.documentNumber || item.archiveID)
        item.number = v;
      if (scrub) {
        delete item.documentNumber;
        delete item.archiveID;
      }
      if (v = item.repository || item.institution)
        item.publisher = v;
      if (scrub) {
        delete item.repository;
        delete item.institution;
      }
    }
    if (jurism) {
      if (item.release)
        item.edition = item.release;
      if (scrub) {
        delete item.release;
      }
      if (item.bookAbbreviation)
        item.journalAbbreviation = item.bookAbbreviation;
      if (scrub) {
        delete item.bookAbbreviation;
      }
      if (item.regulatoryBody)
        item.legislativeBody = item.regulatoryBody;
      if (scrub) {
        delete item.regulatoryBody;
      }
      if (item.treatyNumber)
        item.number = item.treatyNumber;
      if (scrub) {
        delete item.treatyNumber;
      }
      if (v = item.album || item.reporter)
        item.publicationTitle = v;
      if (scrub) {
        delete item.album;
        delete item.reporter;
      }
      if (item.assemblyNumber)
        item.seriesNumber = item.assemblyNumber;
      if (scrub) {
        delete item.assemblyNumber;
      }
      if (v = item.sessionType || item.regulationType)
        item.type = v;
      if (scrub) {
        delete item.sessionType;
        delete item.regulationType;
      }
    }
  }
  function simplifyForExport(item, { dropAttachments = false, scrub = true } = {}) {
    unalias(item, { scrub });
    if (item.filingDate)
      item.filingDate = item.filingDate.replace(/^0000-00-00 /, "");
    if (item.creators) {
      for (const creator of item.creators) {
        if (creator.fieldMode) {
          creator.name = creator.name || creator.lastName;
          delete creator.lastName;
          delete creator.firstName;
          delete creator.fieldMode;
        }
      }
    }
    if (item.itemType === "attachment" || item.itemType === "note") {
      delete item.attachments;
      delete item.notes;
    } else {
      item.attachments = !dropAttachments && item.attachments || [];
    }
    return item;
  }
  var schema_csl_mappings = {
    zotero: {
      CSL_TYPE_MAPPINGS: {
        artwork: "graphic",
        attachment: "document",
        audioRecording: "song",
        bill: "bill",
        blogPost: "post-weblog",
        book: "book",
        bookSection: "chapter",
        case: "legal_case",
        computerProgram: "book",
        conferencePaper: "paper-conference",
        dictionaryEntry: "entry-dictionary",
        document: "document",
        email: "personal_communication",
        encyclopediaArticle: "entry-encyclopedia",
        film: "motion_picture",
        forumPost: "post",
        hearing: "bill",
        instantMessage: "personal_communication",
        interview: "interview",
        journalArticle: "article-journal",
        letter: "personal_communication",
        magazineArticle: "article-magazine",
        manuscript: "manuscript",
        map: "map",
        newspaperArticle: "article-newspaper",
        note: "document",
        patent: "patent",
        podcast: "broadcast",
        preprint: "article",
        presentation: "speech",
        radioBroadcast: "broadcast",
        report: "report",
        statute: "legislation",
        thesis: "thesis",
        tvBroadcast: "broadcast",
        videoRecording: "motion_picture",
        webpage: "webpage"
      },
      CSL_TYPE_MAPPINGS_REVERSE: {
        article: ["preprint"],
        "article-journal": ["journalArticle"],
        "article-magazine": ["magazineArticle"],
        "article-newspaper": ["newspaperArticle"],
        bill: ["bill", "hearing"],
        book: ["book", "computerProgram"],
        broadcast: ["podcast", "tvBroadcast", "radioBroadcast"],
        chapter: ["bookSection"],
        document: ["document", "attachment", "note"],
        "entry-dictionary": ["dictionaryEntry"],
        "entry-encyclopedia": ["encyclopediaArticle"],
        graphic: ["artwork"],
        interview: ["interview"],
        legal_case: ["case"],
        legislation: ["statute"],
        manuscript: ["manuscript"],
        map: ["map"],
        motion_picture: ["film", "videoRecording"],
        "paper-conference": ["conferencePaper"],
        patent: ["patent"],
        personal_communication: ["letter", "email", "instantMessage"],
        post: ["forumPost"],
        "post-weblog": ["blogPost"],
        report: ["report"],
        song: ["audioRecording"],
        speech: ["presentation"],
        thesis: ["thesis"],
        webpage: ["webpage"]
      },
      CSL_TEXT_MAPPINGS: {
        DOI: ["DOI"],
        ISBN: ["ISBN"],
        ISSN: ["ISSN"],
        URL: ["url"],
        abstract: ["abstractNote"],
        archive: ["archive"],
        archive_location: ["archiveLocation"],
        authority: ["court", "legislativeBody", "issuingAuthority"],
        "call-number": ["callNumber", "applicationNumber"],
        "chapter-number": ["session"],
        "collection-number": ["seriesNumber"],
        "collection-title": ["seriesTitle", "series"],
        "container-title": ["publicationTitle", "reporter", "code"],
        "container-title-short": ["journalAbbreviation"],
        dimensions: ["artworkSize", "runningTime"],
        edition: ["edition"],
        event: ["meetingName", "conferenceName"],
        "event-place": ["place"],
        genre: ["type", "programmingLanguage"],
        issue: ["issue", "priorityNumbers"],
        language: ["language"],
        medium: ["medium", "system"],
        note: ["extra"],
        number: ["number"],
        "number-of-pages": ["numPages"],
        "number-of-volumes": ["numberOfVolumes"],
        page: ["pages"],
        publisher: ["publisher"],
        "publisher-place": ["place"],
        references: ["history", "references"],
        scale: ["scale"],
        section: ["section", "committee"],
        source: ["libraryCatalog"],
        status: ["status"],
        title: ["title"],
        "title-short": ["shortTitle"],
        version: ["versionNumber"],
        volume: ["volume", "codeNumber"]
      },
      CSL_DATE_MAPPINGS: {
        accessed: "accessDate",
        issued: "date",
        submitted: "filingDate"
      },
      CSL_NAME_MAPPINGS: {
        author: "author",
        bookAuthor: "container-author",
        composer: "composer",
        director: "director",
        editor: "editor",
        interviewer: "interviewer",
        recipient: "recipient",
        reviewedAuthor: "reviewed-author",
        seriesEditor: "collection-editor",
        translator: "translator"
      },
      CSL_FIELD_MAPPINGS_REVERSE: {
        DOI: "DOI",
        ISBN: "ISBN",
        ISSN: "ISSN",
        abstractNote: "abstract",
        accessDate: "accessed",
        applicationNumber: "call-number",
        archive: "archive",
        archiveLocation: "archive_location",
        artworkSize: "dimensions",
        callNumber: "call-number",
        code: "container-title",
        codeNumber: "volume",
        committee: "section",
        conferenceName: "event",
        court: "authority",
        date: "issued",
        edition: "edition",
        extra: "note",
        filingDate: "submitted",
        history: "references",
        issue: "issue",
        issuingAuthority: "authority",
        journalAbbreviation: "container-title-short",
        language: "language",
        legislativeBody: "authority",
        libraryCatalog: "source",
        medium: "medium",
        meetingName: "event",
        numPages: "number-of-pages",
        number: "number",
        numberOfVolumes: "number-of-volumes",
        pages: "page",
        place: "publisher-place",
        priorityNumbers: "issue",
        programmingLanguage: "genre",
        publicationTitle: "container-title",
        publisher: "publisher",
        references: "references",
        reporter: "container-title",
        runningTime: "dimensions",
        scale: "scale",
        section: "section",
        series: "collection-title",
        seriesNumber: "collection-number",
        seriesTitle: "collection-title",
        session: "chapter-number",
        shortTitle: "title-short",
        status: "status",
        system: "medium",
        title: "title",
        type: "genre",
        url: "URL",
        versionNumber: "version",
        volume: "volume"
      }
    },
    jurism: {
      CSL_TYPE_MAPPINGS: {
        artwork: "graphic",
        attachment: "article",
        audioRecording: "song",
        bill: "bill",
        blogPost: "post-weblog",
        book: "book",
        bookSection: "chapter",
        case: "legal_case",
        classic: "classic",
        computerProgram: "book",
        conferencePaper: "paper-conference",
        dictionaryEntry: "entry-dictionary",
        document: "article",
        email: "personal_communication",
        encyclopediaArticle: "entry-encyclopedia",
        film: "motion_picture",
        forumPost: "post",
        gazette: "gazette",
        hearing: "hearing",
        instantMessage: "personal_communication",
        interview: "interview",
        journalArticle: "article-journal",
        legalCommentary: "legal_commentary",
        letter: "personal_communication",
        magazineArticle: "article-magazine",
        manuscript: "manuscript",
        map: "map",
        newspaperArticle: "article-newspaper",
        note: "article",
        patent: "patent",
        podcast: "broadcast",
        presentation: "speech",
        radioBroadcast: "broadcast",
        regulation: "regulation",
        report: "report",
        standard: "standard",
        statute: "legislation",
        thesis: "thesis",
        treaty: "treaty",
        tvBroadcast: "broadcast",
        videoRecording: "video",
        webpage: "webpage"
      },
      CSL_TYPE_MAPPINGS_REVERSE: {
        article: ["document", "attachment", "note"],
        "article-journal": ["journalArticle"],
        "article-magazine": ["magazineArticle"],
        "article-newspaper": ["newspaperArticle"],
        bill: ["bill"],
        book: ["book", "computerProgram"],
        broadcast: ["podcast", "tvBroadcast", "radioBroadcast"],
        chapter: ["bookSection"],
        classic: ["classic"],
        "entry-dictionary": ["dictionaryEntry"],
        "entry-encyclopedia": ["encyclopediaArticle"],
        gazette: ["gazette"],
        graphic: ["artwork"],
        hearing: ["hearing"],
        interview: ["interview"],
        legal_case: ["case"],
        legal_commentary: ["legalCommentary"],
        legislation: ["statute"],
        manuscript: ["manuscript"],
        map: ["map"],
        motion_picture: ["film"],
        "paper-conference": ["conferencePaper"],
        patent: ["patent"],
        personal_communication: ["letter", "email", "instantMessage"],
        post: ["forumPost"],
        "post-weblog": ["blogPost"],
        regulation: ["regulation"],
        report: ["report"],
        song: ["audioRecording"],
        speech: ["presentation"],
        standard: ["standard"],
        thesis: ["thesis"],
        treaty: ["treaty"],
        video: ["videoRecording"],
        webpage: ["webpage"]
      },
      CSL_TEXT_MAPPINGS: {
        DOI: ["DOI"],
        ISBN: ["ISBN"],
        ISSN: ["ISSN"],
        URL: ["url"],
        abstract: ["abstractNote"],
        "admin-flag": ["adminFlag"],
        archive: ["archive"],
        archive_collection: ["archiveCollection"],
        archive_location: ["archiveLocation"],
        authority: ["court", "legislativeBody", "issuingAuthority", "institution", "regulatoryBody"],
        "call-number": ["callNumber", "applicationNumber"],
        "chapter-number": ["session"],
        "collection-number": ["seriesNumber", "assemblyNumber", "regnalYear", "yearAsVolume"],
        "collection-title": ["seriesTitle", "series", "parentTreaty"],
        committee: ["committee"],
        "container-title": ["publicationTitle", "reporter", "code"],
        "container-title-short": ["journalAbbreviation"],
        dimensions: ["artworkSize", "runningTime"],
        division: ["division"],
        "document-name": ["documentName"],
        "document-number": ["documentNumber"],
        edition: ["edition"],
        event: ["meetingName", "conferenceName", "resolutionLabel"],
        "event-place": ["place"],
        "gazette-flag": ["gazetteFlag"],
        genre: ["type", "programmingLanguage", "genre", "reign", "sessionType", "regulationType"],
        issue: ["issue", "priorityNumbers", "meetingNumber"],
        jurisdiction: ["jurisdiction"],
        language: ["language"],
        medium: ["medium", "system"],
        note: ["extra"],
        number: ["number"],
        "number-of-pages": ["numPages"],
        "number-of-volumes": ["numberOfVolumes"],
        page: ["pages"],
        "publication-number": ["publicationNumber"],
        publisher: ["publisher"],
        "publisher-place": ["place"],
        references: ["history", "references"],
        scale: ["scale"],
        section: ["section"],
        source: ["libraryCatalog"],
        status: ["status"],
        supplement: ["supplementName"],
        title: ["title"],
        "title-short": ["shortTitle"],
        version: ["versionNumber"],
        volume: ["volume", "codeNumber"],
        "volume-title": ["volumeTitle"]
      },
      CSL_DATE_MAPPINGS: {
        accessed: ["accessDate"],
        "event-date": ["dateAmended", "signingDate", "conferenceDate"],
        issued: ["date"],
        "opening-date": ["openingDate"],
        "original-date": ["adoptionDate", "newsCaseDate", "originalDate", "priorityDate"],
        "publication-date": ["publicationDate"],
        submitted: ["filingDate"]
      },
      CSL_NAME_MAPPINGS: {
        author: "author",
        bookAuthor: "container-author",
        commenter: "commenter",
        composer: "composer",
        contributor: "contributor",
        director: "director",
        editor: "editor",
        interviewer: "interviewer",
        recipient: "recipient",
        reviewedAuthor: "reviewed-author",
        seriesEditor: "collection-editor",
        testimonyBy: "testimonyBy",
        translator: "translator"
      },
      CSL_FIELD_MAPPINGS_REVERSE: {
        DOI: "DOI",
        ISBN: "ISBN",
        ISSN: "ISSN",
        abstractNote: "abstract",
        accessDate: "accessed",
        adminFlag: "admin-flag",
        adoptionDate: "original-date",
        applicationNumber: "call-number",
        archive: "archive",
        archiveCollection: "archive_collection",
        archiveLocation: "archive_location",
        artworkSize: "dimensions",
        assemblyNumber: "collection-number",
        callNumber: "call-number",
        code: "container-title",
        codeNumber: "volume",
        committee: "committee",
        conferenceDate: "event-date",
        conferenceName: "event",
        court: "authority",
        date: "issued",
        dateAmended: "event-date",
        division: "division",
        documentName: "document-name",
        documentNumber: "document-number",
        edition: "edition",
        extra: "note",
        filingDate: "submitted",
        gazetteFlag: "gazette-flag",
        genre: "genre",
        history: "references",
        institution: "authority",
        issue: "issue",
        issuingAuthority: "authority",
        journalAbbreviation: "container-title-short",
        jurisdiction: "jurisdiction",
        language: "language",
        legislativeBody: "authority",
        libraryCatalog: "source",
        medium: "medium",
        meetingName: "event",
        meetingNumber: "issue",
        newsCaseDate: "original-date",
        numPages: "number-of-pages",
        number: "number",
        numberOfVolumes: "number-of-volumes",
        openingDate: "opening-date",
        originalDate: "original-date",
        pages: "page",
        parentTreaty: "collection-title",
        place: "publisher-place",
        priorityDate: "original-date",
        priorityNumbers: "issue",
        programmingLanguage: "genre",
        publicationDate: "publication-date",
        publicationNumber: "publication-number",
        publicationTitle: "container-title",
        publisher: "publisher",
        references: "references",
        regnalYear: "collection-number",
        regulationType: "genre",
        regulatoryBody: "authority",
        reign: "genre",
        reporter: "container-title",
        resolutionLabel: "event",
        runningTime: "dimensions",
        scale: "scale",
        section: "section",
        series: "collection-title",
        seriesNumber: "collection-number",
        seriesTitle: "collection-title",
        session: "chapter-number",
        sessionType: "genre",
        shortTitle: "title-short",
        signingDate: "event-date",
        status: "status",
        supplementName: "supplement",
        system: "medium",
        title: "title",
        type: "genre",
        url: "URL",
        versionNumber: "version",
        volume: "volume",
        volumeTitle: "volume-title",
        yearAsVolume: "collection-number"
      }
    }
  };
  var CSL_MAPPINGS = schema_csl_mappings[client];

  // content/extra.ts
  init_globals();

  // gen/items/extra-fields.json
  var extra_fields_exports = {};
  __export(extra_fields_exports, {
    DOI: () => DOI,
    ISBN: () => ISBN,
    ISSN: () => ISSN,
    PMCID: () => PMCID,
    PMID: () => PMID,
    URL: () => URL,
    "access date": () => access_date,
    accessDate: () => accessDate,
    accessed: () => accessed,
    "admin flag": () => admin_flag,
    "admin-flag": () => admin_flag2,
    adminFlag: () => adminFlag,
    "adoption date": () => adoption_date,
    adoptionDate: () => adoptionDate,
    album: () => album,
    "application number": () => application_number,
    applicationNumber: () => applicationNumber,
    archive: () => archive,
    "archive collection": () => archive_collection,
    "archive id": () => archive_id,
    "archive location": () => archive_location,
    "archive place": () => archive_place,
    "archive-place": () => archive_place2,
    archiveCollection: () => archiveCollection,
    archiveID: () => archiveID,
    archiveLocation: () => archiveLocation,
    archive_collection: () => archive_collection2,
    archive_location: () => archive_location2,
    artist: () => artist,
    "artwork medium": () => artwork_medium,
    "artwork size": () => artwork_size,
    artworkMedium: () => artworkMedium,
    artworkSize: () => artworkSize,
    "assembly number": () => assembly_number,
    assemblyNumber: () => assemblyNumber,
    assignee: () => assignee,
    "attorney agent": () => attorney_agent,
    attorneyAgent: () => attorneyAgent,
    "audio file type": () => audio_file_type,
    "audio recording format": () => audio_recording_format,
    audioFileType: () => audioFileType,
    audioRecordingFormat: () => audioRecordingFormat,
    author: () => author,
    authority: () => authority,
    "bill number": () => bill_number,
    billNumber: () => billNumber,
    "blog title": () => blog_title,
    blogTitle: () => blogTitle,
    "book abbreviation": () => book_abbreviation,
    "book author": () => book_author,
    "book title": () => book_title,
    bookAbbreviation: () => bookAbbreviation,
    bookAuthor: () => bookAuthor,
    bookTitle: () => bookTitle,
    "call number": () => call_number,
    "call-number": () => call_number2,
    callNumber: () => callNumber,
    cartographer: () => cartographer,
    "case name": () => case_name,
    caseName: () => caseName,
    "cast member": () => cast_member,
    castMember: () => castMember,
    "chapter number": () => chapter_number,
    "chapter-number": () => chapter_number2,
    "citation key": () => citation_key,
    citationKey: () => citationKey,
    code: () => code,
    "code number": () => code_number,
    "code pages": () => code_pages,
    "code volume": () => code_volume,
    codeNumber: () => codeNumber,
    codePages: () => codePages,
    codeVolume: () => codeVolume,
    "collection editor": () => collection_editor,
    "collection number": () => collection_number,
    "collection title": () => collection_title,
    "collection-editor": () => collection_editor2,
    "collection-number": () => collection_number2,
    "collection-title": () => collection_title2,
    commenter: () => commenter,
    committee: () => committee,
    company: () => company,
    composer: () => composer,
    "conference date": () => conference_date,
    "conference name": () => conference_name,
    conferenceDate: () => conferenceDate,
    conferenceName: () => conferenceName,
    "container author": () => container_author,
    "container title": () => container_title,
    "container title short": () => container_title_short,
    "container-author": () => container_author2,
    "container-title": () => container_title2,
    "container-title-short": () => container_title_short2,
    contributor: () => contributor,
    cosponsor: () => cosponsor,
    counsel: () => counsel,
    country: () => country,
    court: () => court,
    "csl type": () => csl_type,
    "csl-type": () => csl_type2,
    date: () => date,
    "date amended": () => date_amended,
    "date decided": () => date_decided,
    "date enacted": () => date_enacted,
    dateAmended: () => dateAmended,
    dateDecided: () => dateDecided,
    dateEnacted: () => dateEnacted,
    default: () => extra_fields_default,
    "dictionary title": () => dictionary_title,
    dictionaryTitle: () => dictionaryTitle,
    dimensions: () => dimensions,
    director: () => director,
    distributor: () => distributor,
    division: () => division,
    "docket number": () => docket_number,
    docketNumber: () => docketNumber,
    "document name": () => document_name,
    "document number": () => document_number,
    "document-name": () => document_name2,
    "document-number": () => document_number2,
    documentName: () => documentName,
    documentNumber: () => documentNumber,
    doi: () => doi,
    edition: () => edition,
    editor: () => editor,
    "editorial director": () => editorial_director,
    "editorial-director": () => editorial_director2,
    "encyclopedia title": () => encyclopedia_title,
    encyclopediaTitle: () => encyclopediaTitle,
    "episode number": () => episode_number,
    episodeNumber: () => episodeNumber,
    event: () => event,
    "event date": () => event_date,
    "event place": () => event_place,
    "event-date": () => event_date2,
    "event-place": () => event_place2,
    "filing date": () => filing_date,
    filingDate: () => filingDate,
    "first page": () => first_page,
    firstPage: () => firstPage,
    "forum title": () => forum_title,
    forumTitle: () => forumTitle,
    "gazette flag": () => gazette_flag,
    "gazette-flag": () => gazette_flag2,
    gazetteFlag: () => gazetteFlag,
    genre: () => genre,
    guest: () => guest,
    history: () => history,
    illustrator: () => illustrator,
    institution: () => institution,
    "interview medium": () => interview_medium,
    interviewMedium: () => interviewMedium,
    interviewee: () => interviewee,
    interviewer: () => interviewer,
    inventor: () => inventor,
    isbn: () => isbn,
    issn: () => issn,
    issue: () => issue,
    "issue date": () => issue_date,
    issueDate: () => issueDate,
    issued: () => issued,
    "issuing authority": () => issuing_authority,
    issuingAuthority: () => issuingAuthority,
    "journal abbreviation": () => journal_abbreviation,
    journalAbbreviation: () => journalAbbreviation,
    jurisdiction: () => jurisdiction,
    label: () => label,
    language: () => language,
    "legal status": () => legal_status,
    legalStatus: () => legalStatus,
    "legislative body": () => legislative_body,
    legislativeBody: () => legislativeBody,
    "letter type": () => letter_type,
    letterType: () => letterType,
    "library catalog": () => library_catalog,
    libraryCatalog: () => libraryCatalog,
    "manuscript type": () => manuscript_type,
    manuscriptType: () => manuscriptType,
    "map type": () => map_type,
    mapType: () => mapType,
    medium: () => medium,
    "meeting name": () => meeting_name,
    "meeting number": () => meeting_number,
    meetingName: () => meetingName,
    meetingNumber: () => meetingNumber,
    "name of act": () => name_of_act,
    nameOfAct: () => nameOfAct,
    network: () => network,
    "news case date": () => news_case_date,
    newsCaseDate: () => newsCaseDate,
    "num pages": () => num_pages,
    numPages: () => numPages,
    number: () => number,
    "number of pages": () => number_of_pages,
    "number of volumes": () => number_of_volumes,
    "number-of-pages": () => number_of_pages2,
    "number-of-volumes": () => number_of_volumes2,
    numberOfVolumes: () => numberOfVolumes,
    "opening date": () => opening_date,
    "opening-date": () => opening_date2,
    openingDate: () => openingDate,
    opus: () => opus,
    "original author": () => original_author,
    "original date": () => original_date,
    "original publisher": () => original_publisher,
    "original publisher place": () => original_publisher_place,
    "original title": () => original_title,
    "original-author": () => original_author2,
    "original-date": () => original_date2,
    "original-publisher": () => original_publisher2,
    "original-publisher-place": () => original_publisher_place2,
    "original-title": () => original_title2,
    originalDate: () => originalDate,
    page: () => page,
    pages: () => pages,
    "parent treaty": () => parent_treaty,
    parentTreaty: () => parentTreaty,
    "patent number": () => patent_number,
    patentNumber: () => patentNumber,
    performer: () => performer,
    place: () => place,
    pmcid: () => pmcid,
    pmid: () => pmid,
    podcaster: () => podcaster,
    "post type": () => post_type,
    postType: () => postType,
    "presentation type": () => presentation_type,
    presentationType: () => presentationType,
    presenter: () => presenter,
    "priority date": () => priority_date,
    "priority numbers": () => priority_numbers,
    priorityDate: () => priorityDate,
    priorityNumbers: () => priorityNumbers,
    "proceedings title": () => proceedings_title,
    proceedingsTitle: () => proceedingsTitle,
    producer: () => producer,
    "program title": () => program_title,
    programTitle: () => programTitle,
    programmer: () => programmer,
    "programming language": () => programming_language,
    programmingLanguage: () => programmingLanguage,
    "public law number": () => public_law_number,
    publicLawNumber: () => publicLawNumber,
    "publication date": () => publication_date,
    "publication number": () => publication_number,
    "publication title": () => publication_title,
    "publication-date": () => publication_date2,
    "publication-number": () => publication_number2,
    publicationDate: () => publicationDate,
    publicationNumber: () => publicationNumber,
    publicationTitle: () => publicationTitle,
    publisher: () => publisher,
    "publisher place": () => publisher_place,
    "publisher-place": () => publisher_place2,
    recipient: () => recipient,
    references: () => references,
    "regnal year": () => regnal_year,
    regnalYear: () => regnalYear,
    "regulation type": () => regulation_type,
    regulationType: () => regulationType,
    "regulatory body": () => regulatory_body,
    regulatoryBody: () => regulatoryBody,
    reign: () => reign,
    release: () => release,
    "report number": () => report_number,
    "report type": () => report_type,
    reportNumber: () => reportNumber,
    reportType: () => reportType,
    reporter: () => reporter,
    "reporter volume": () => reporter_volume,
    reporterVolume: () => reporterVolume,
    repository: () => repository,
    "resolution label": () => resolution_label,
    resolutionLabel: () => resolutionLabel,
    "reviewed author": () => reviewed_author,
    "reviewed title": () => reviewed_title,
    "reviewed-author": () => reviewed_author2,
    "reviewed-title": () => reviewed_title2,
    reviewedAuthor: () => reviewedAuthor,
    rights: () => rights,
    "running time": () => running_time,
    runningTime: () => runningTime,
    scale: () => scale,
    scriptwriter: () => scriptwriter,
    section: () => section,
    series: () => series,
    "series editor": () => series_editor,
    "series number": () => series_number,
    "series text": () => series_text,
    "series title": () => series_title,
    seriesEditor: () => seriesEditor,
    seriesNumber: () => seriesNumber,
    seriesText: () => seriesText,
    seriesTitle: () => seriesTitle,
    session: () => session,
    "session type": () => session_type,
    sessionType: () => sessionType,
    "short title": () => short_title,
    shortTitle: () => shortTitle,
    "signing date": () => signing_date,
    signingDate: () => signingDate,
    source: () => source,
    sponsor: () => sponsor,
    status: () => status,
    studio: () => studio,
    subject: () => subject,
    submitted: () => submitted,
    supplement: () => supplement,
    "supplement name": () => supplement_name,
    supplementName: () => supplementName,
    system: () => system,
    "testimony by": () => testimony_by,
    testimonyBy: () => testimonyBy,
    "thesis type": () => thesis_type,
    thesisType: () => thesisType,
    title: () => title,
    "title short": () => title_short,
    "title-short": () => title_short2,
    translator: () => translator,
    "treaty number": () => treaty_number,
    treatyNumber: () => treatyNumber,
    type: () => type,
    university: () => university,
    url: () => url,
    version: () => version,
    "version number": () => version_number,
    versionNumber: () => versionNumber,
    "video recording format": () => video_recording_format,
    videoRecordingFormat: () => videoRecordingFormat,
    volume: () => volume,
    "volume title": () => volume_title,
    "volume-title": () => volume_title2,
    volumeTitle: () => volumeTitle,
    "website title": () => website_title,
    "website type": () => website_type,
    websiteTitle: () => websiteTitle,
    websiteType: () => websiteType,
    "words by": () => words_by,
    wordsBy: () => wordsBy,
    "year as volume": () => year_as_volume,
    yearAsVolume: () => yearAsVolume
  });
  var DOI = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var ISBN = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var ISSN = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var PMCID = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var PMID = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var URL = {
    csl: [
      "URL"
    ],
    type: "text"
  };
  var access_date = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessDate = {
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var accessed = {
    csl: [
      "accessed"
    ],
    type: "date",
    zotero: [
      "accessDate"
    ]
  };
  var admin_flag = {
    csl: [
      "admin-flag"
    ],
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var admin_flag2 = {
    csl: [
      "admin-flag"
    ],
    type: "text"
  };
  var adminFlag = {
    type: "text",
    zotero: [
      "adminFlag"
    ]
  };
  var adoption_date = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var adoptionDate = {
    type: "date",
    zotero: [
      "adoptionDate"
    ]
  };
  var album = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var application_number = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var applicationNumber = {
    type: "text",
    zotero: [
      "applicationNumber"
    ]
  };
  var archive = {
    csl: [
      "archive"
    ],
    type: "text",
    zotero: [
      "archive"
    ]
  };
  var archive_collection = {
    csl: [
      "archive_collection"
    ],
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archive_id = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var archive_location = {
    csl: [
      "archive_location"
    ],
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_place = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archive_place2 = {
    csl: [
      "archive-place"
    ],
    type: "text"
  };
  var archiveCollection = {
    type: "text",
    zotero: [
      "archiveCollection"
    ]
  };
  var archiveID = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var archiveLocation = {
    type: "text",
    zotero: [
      "archiveLocation"
    ]
  };
  var archive_collection2 = {
    csl: [
      "archive_collection"
    ],
    type: "text"
  };
  var archive_location2 = {
    csl: [
      "archive_location"
    ],
    type: "text"
  };
  var artist = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "artist"
    ]
  };
  var artwork_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artwork_size = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var artworkMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var artworkSize = {
    type: "text",
    zotero: [
      "artworkSize"
    ]
  };
  var assembly_number = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assemblyNumber = {
    type: "text",
    zotero: [
      "assemblyNumber",
      "seriesNumber"
    ]
  };
  var assignee = {
    type: "text",
    zotero: [
      "assignee"
    ]
  };
  var attorney_agent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var attorneyAgent = {
    csl: [
      "attorneyAgent"
    ],
    type: "name",
    zotero: [
      "attorneyAgent"
    ]
  };
  var audio_file_type = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audio_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioFileType = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var audioRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var author = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "author"
    ]
  };
  var authority = {
    csl: [
      "authority"
    ],
    type: "text",
    zotero: [
      "court",
      "legislativeBody",
      "issuingAuthority",
      "institution",
      "regulatoryBody"
    ]
  };
  var bill_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var billNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var blog_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var blogTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var book_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var book_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var book_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var bookAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var bookAuthor = {
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var bookTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var call_number = {
    csl: [
      "call-number"
    ],
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var call_number2 = {
    csl: [
      "call-number"
    ],
    type: "text"
  };
  var callNumber = {
    type: "text",
    zotero: [
      "callNumber"
    ]
  };
  var cartographer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "cartographer"
    ]
  };
  var case_name = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var caseName = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var cast_member = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var castMember = {
    csl: [
      "castMember"
    ],
    type: "name",
    zotero: [
      "castMember"
    ]
  };
  var chapter_number = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var chapter_number2 = {
    csl: [
      "chapter-number"
    ],
    type: "text"
  };
  var citation_key = {
    type: "text",
    zotero: [
      "citationKey"
    ]
  };
  var citationKey = {
    type: "text",
    zotero: [
      "citationKey"
    ]
  };
  var code = {
    type: "text",
    zotero: [
      "code"
    ]
  };
  var code_number = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var code_pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var code_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var codeNumber = {
    type: "text",
    zotero: [
      "codeNumber"
    ]
  };
  var codePages = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var codeVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var collection_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var collection_number = {
    csl: [
      "collection-number"
    ],
    type: "text",
    zotero: [
      "seriesNumber",
      "assemblyNumber",
      "regnalYear",
      "yearAsVolume"
    ]
  };
  var collection_title = {
    csl: [
      "collection-title"
    ],
    type: "text",
    zotero: [
      "seriesTitle",
      "series",
      "parentTreaty"
    ]
  };
  var collection_editor2 = {
    csl: [
      "collection-editor"
    ],
    type: "name"
  };
  var collection_number2 = {
    csl: [
      "collection-number"
    ],
    type: "text"
  };
  var collection_title2 = {
    csl: [
      "collection-title"
    ],
    type: "text"
  };
  var commenter = {
    csl: [
      "commenter"
    ],
    type: "name",
    zotero: [
      "commenter"
    ]
  };
  var committee = {
    csl: [
      "committee"
    ],
    type: "text",
    zotero: [
      "committee"
    ]
  };
  var company = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var composer = {
    csl: [
      "composer"
    ],
    type: "name",
    zotero: [
      "composer"
    ]
  };
  var conference_date = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conference_name = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var conferenceDate = {
    type: "date",
    zotero: [
      "conferenceDate"
    ]
  };
  var conferenceName = {
    type: "text",
    zotero: [
      "conferenceName"
    ]
  };
  var container_author = {
    csl: [
      "container-author"
    ],
    type: "name",
    zotero: [
      "bookAuthor"
    ]
  };
  var container_title = {
    csl: [
      "container-title"
    ],
    type: "text",
    zotero: [
      "publicationTitle",
      "reporter",
      "code"
    ]
  };
  var container_title_short = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var container_author2 = {
    csl: [
      "container-author"
    ],
    type: "name"
  };
  var container_title2 = {
    csl: [
      "container-title"
    ],
    type: "text"
  };
  var container_title_short2 = {
    csl: [
      "container-title-short"
    ],
    type: "text"
  };
  var contributor = {
    csl: [
      "contributor"
    ],
    type: "name",
    zotero: [
      "contributor"
    ]
  };
  var cosponsor = {
    csl: [
      "cosponsor"
    ],
    type: "name",
    zotero: [
      "cosponsor"
    ]
  };
  var counsel = {
    csl: [
      "counsel"
    ],
    type: "name",
    zotero: [
      "counsel"
    ]
  };
  var country = {
    type: "text",
    zotero: [
      "country"
    ]
  };
  var court = {
    type: "text",
    zotero: [
      "court"
    ]
  };
  var csl_type = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var csl_type2 = {
    csl: [
      "csl-type"
    ],
    type: "text"
  };
  var date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_amended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var date_decided = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var date_enacted = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateAmended = {
    type: "date",
    zotero: [
      "dateAmended"
    ]
  };
  var dateDecided = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dateEnacted = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var dictionary_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dictionaryTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var dimensions = {
    csl: [
      "dimensions"
    ],
    type: "text",
    zotero: [
      "artworkSize",
      "runningTime"
    ]
  };
  var director = {
    csl: [
      "director"
    ],
    type: "name",
    zotero: [
      "director"
    ]
  };
  var distributor = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var division = {
    csl: [
      "division"
    ],
    type: "text",
    zotero: [
      "division"
    ]
  };
  var docket_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var docketNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var document_name = {
    csl: [
      "document-name"
    ],
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var document_number = {
    csl: [
      "document-number"
    ],
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var document_name2 = {
    csl: [
      "document-name"
    ],
    type: "text"
  };
  var document_number2 = {
    csl: [
      "document-number"
    ],
    type: "text"
  };
  var documentName = {
    type: "text",
    zotero: [
      "documentName"
    ]
  };
  var documentNumber = {
    type: "text",
    zotero: [
      "documentNumber",
      "number"
    ]
  };
  var doi = {
    csl: [
      "DOI"
    ],
    type: "text",
    zotero: [
      "DOI"
    ]
  };
  var edition = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var editor = {
    csl: [
      "editor"
    ],
    type: "name",
    zotero: [
      "editor"
    ]
  };
  var editorial_director = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var editorial_director2 = {
    csl: [
      "editorial-director"
    ],
    type: "name"
  };
  var encyclopedia_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var encyclopediaTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var episode_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var episodeNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var event = {
    csl: [
      "event"
    ],
    type: "text",
    zotero: [
      "meetingName",
      "conferenceName",
      "resolutionLabel"
    ]
  };
  var event_date = {
    csl: [
      "event-date"
    ],
    type: "date",
    zotero: [
      "dateAmended",
      "signingDate",
      "conferenceDate"
    ]
  };
  var event_place = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var event_date2 = {
    csl: [
      "event-date"
    ],
    type: "date"
  };
  var event_place2 = {
    csl: [
      "event-place"
    ],
    type: "text"
  };
  var filing_date = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var filingDate = {
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var first_page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var firstPage = {
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var forum_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var forumTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var gazette_flag = {
    csl: [
      "gazette-flag"
    ],
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var gazette_flag2 = {
    csl: [
      "gazette-flag"
    ],
    type: "text"
  };
  var gazetteFlag = {
    type: "text",
    zotero: [
      "gazetteFlag"
    ]
  };
  var genre = {
    csl: [
      "genre"
    ],
    type: "text",
    zotero: [
      "genre",
      "type"
    ]
  };
  var guest = {
    csl: [
      "guest"
    ],
    type: "name",
    zotero: [
      "guest"
    ]
  };
  var history = {
    type: "text",
    zotero: [
      "history"
    ]
  };
  var illustrator = {
    csl: [
      "illustrator"
    ],
    type: "name"
  };
  var institution = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "institution",
      "publisher"
    ]
  };
  var interview_medium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewMedium = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var interviewee = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "interviewee"
    ]
  };
  var interviewer = {
    csl: [
      "interviewer"
    ],
    type: "name",
    zotero: [
      "interviewer"
    ]
  };
  var inventor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "inventor"
    ]
  };
  var isbn = {
    csl: [
      "ISBN"
    ],
    type: "text",
    zotero: [
      "ISBN"
    ]
  };
  var issn = {
    csl: [
      "ISSN"
    ],
    type: "text",
    zotero: [
      "ISSN"
    ]
  };
  var issue = {
    csl: [
      "issue"
    ],
    type: "text",
    zotero: [
      "issue"
    ]
  };
  var issue_date = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issueDate = {
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issued = {
    csl: [
      "issued"
    ],
    type: "date",
    zotero: [
      "date"
    ]
  };
  var issuing_authority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var issuingAuthority = {
    type: "text",
    zotero: [
      "issuingAuthority"
    ]
  };
  var journal_abbreviation = {
    csl: [
      "container-title-short"
    ],
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var journalAbbreviation = {
    type: "text",
    zotero: [
      "journalAbbreviation"
    ]
  };
  var jurisdiction = {
    csl: [
      "jurisdiction"
    ],
    type: "text",
    zotero: [
      "jurisdiction"
    ]
  };
  var label = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var language = {
    csl: [
      "language"
    ],
    type: "text",
    zotero: [
      "language"
    ]
  };
  var legal_status = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legalStatus = {
    type: "text",
    zotero: [
      "legalStatus"
    ]
  };
  var legislative_body = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var legislativeBody = {
    type: "text",
    zotero: [
      "legislativeBody"
    ]
  };
  var letter_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var letterType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var library_catalog = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var libraryCatalog = {
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var manuscript_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var manuscriptType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var map_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var mapType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var medium = {
    csl: [
      "medium"
    ],
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var meeting_name = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meeting_number = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var meetingName = {
    type: "text",
    zotero: [
      "meetingName"
    ]
  };
  var meetingNumber = {
    type: "text",
    zotero: [
      "meetingNumber"
    ]
  };
  var name_of_act = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var nameOfAct = {
    type: "text",
    zotero: [
      "title"
    ]
  };
  var network = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var news_case_date = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var newsCaseDate = {
    type: "date",
    zotero: [
      "newsCaseDate"
    ]
  };
  var num_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var numPages = {
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var number_of_pages = {
    csl: [
      "number-of-pages"
    ],
    type: "text",
    zotero: [
      "numPages"
    ]
  };
  var number_of_volumes = {
    csl: [
      "number-of-volumes"
    ],
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var number_of_pages2 = {
    csl: [
      "number-of-pages"
    ],
    type: "text"
  };
  var number_of_volumes2 = {
    csl: [
      "number-of-volumes"
    ],
    type: "text"
  };
  var numberOfVolumes = {
    type: "text",
    zotero: [
      "numberOfVolumes"
    ]
  };
  var opening_date = {
    csl: [
      "opening-date"
    ],
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opening_date2 = {
    csl: [
      "opening-date"
    ],
    type: "date"
  };
  var openingDate = {
    type: "date",
    zotero: [
      "openingDate"
    ]
  };
  var opus = {
    type: "text",
    zotero: [
      "opus"
    ]
  };
  var original_author = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date = {
    csl: [
      "original-date"
    ],
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var original_publisher = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var original_author2 = {
    csl: [
      "original-author"
    ],
    type: "name"
  };
  var original_date2 = {
    csl: [
      "original-date"
    ],
    type: "date"
  };
  var original_publisher2 = {
    csl: [
      "original-publisher"
    ],
    type: "text"
  };
  var original_publisher_place2 = {
    csl: [
      "original-publisher-place"
    ],
    type: "text"
  };
  var original_title2 = {
    csl: [
      "original-title"
    ],
    type: "text"
  };
  var originalDate = {
    type: "date",
    zotero: [
      "originalDate"
    ]
  };
  var page = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var pages = {
    csl: [
      "page"
    ],
    type: "text",
    zotero: [
      "pages"
    ]
  };
  var parent_treaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var parentTreaty = {
    type: "text",
    zotero: [
      "parentTreaty"
    ]
  };
  var patent_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var patentNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var performer = {
    csl: [
      "performer"
    ],
    type: "name",
    zotero: [
      "performer"
    ]
  };
  var place = {
    csl: [
      "event-place",
      "publisher-place"
    ],
    type: "text",
    zotero: [
      "place"
    ]
  };
  var pmcid = {
    csl: [
      "PMCID"
    ],
    type: "text"
  };
  var pmid = {
    csl: [
      "PMID"
    ],
    type: "text"
  };
  var podcaster = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "podcaster"
    ]
  };
  var post_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var postType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentation_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presentationType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var presenter = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "presenter"
    ]
  };
  var priority_date = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priority_numbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var priorityDate = {
    type: "date",
    zotero: [
      "priorityDate"
    ]
  };
  var priorityNumbers = {
    type: "text",
    zotero: [
      "priorityNumbers"
    ]
  };
  var proceedings_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var proceedingsTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var producer = {
    csl: [
      "producer"
    ],
    type: "name",
    zotero: [
      "producer"
    ]
  };
  var program_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var programmer = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "programmer"
    ]
  };
  var programming_language = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var programmingLanguage = {
    type: "text",
    zotero: [
      "programmingLanguage"
    ]
  };
  var public_law_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publicLawNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var publication_date = {
    csl: [
      "publication-date"
    ],
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publication_number = {
    csl: [
      "publication-number"
    ],
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publication_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publication_date2 = {
    csl: [
      "publication-date"
    ],
    type: "date"
  };
  var publication_number2 = {
    csl: [
      "publication-number"
    ],
    type: "text"
  };
  var publicationDate = {
    type: "date",
    zotero: [
      "publicationDate"
    ]
  };
  var publicationNumber = {
    type: "text",
    zotero: [
      "publicationNumber"
    ]
  };
  var publicationTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var publisher = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var publisher_place = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var publisher_place2 = {
    csl: [
      "publisher-place"
    ],
    type: "text"
  };
  var recipient = {
    csl: [
      "recipient"
    ],
    type: "name",
    zotero: [
      "recipient"
    ]
  };
  var references = {
    csl: [
      "references"
    ],
    type: "text",
    zotero: [
      "references"
    ]
  };
  var regnal_year = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regnalYear = {
    type: "text",
    zotero: [
      "regnalYear"
    ]
  };
  var regulation_type = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulationType = {
    type: "text",
    zotero: [
      "regulationType",
      "type"
    ]
  };
  var regulatory_body = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var regulatoryBody = {
    type: "text",
    zotero: [
      "regulatoryBody",
      "legislativeBody"
    ]
  };
  var reign = {
    type: "text",
    zotero: [
      "reign"
    ]
  };
  var release = {
    csl: [
      "edition"
    ],
    type: "text",
    zotero: [
      "edition"
    ]
  };
  var report_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var report_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reportNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var reportType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var reporter = {
    type: "text",
    zotero: [
      "reporter",
      "publicationTitle"
    ]
  };
  var reporter_volume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var reporterVolume = {
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var repository = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var resolution_label = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var resolutionLabel = {
    type: "text",
    zotero: [
      "resolutionLabel"
    ]
  };
  var reviewed_author = {
    csl: [
      "reviewed-author"
    ],
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var reviewed_title = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewed_author2 = {
    csl: [
      "reviewed-author"
    ],
    type: "name"
  };
  var reviewed_title2 = {
    csl: [
      "reviewed-title"
    ],
    type: "text"
  };
  var reviewedAuthor = {
    type: "name",
    zotero: [
      "reviewedAuthor"
    ]
  };
  var rights = {
    csl: [
      "rights"
    ],
    type: "text",
    zotero: [
      "rights"
    ]
  };
  var running_time = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var runningTime = {
    type: "text",
    zotero: [
      "runningTime"
    ]
  };
  var scale = {
    csl: [
      "scale"
    ],
    type: "text",
    zotero: [
      "scale"
    ]
  };
  var scriptwriter = {
    csl: [
      "scriptwriter"
    ],
    type: "name",
    zotero: [
      "scriptwriter"
    ]
  };
  var section = {
    csl: [
      "section"
    ],
    type: "text",
    zotero: [
      "section"
    ]
  };
  var series = {
    type: "text",
    zotero: [
      "series"
    ]
  };
  var series_editor = {
    csl: [
      "collection-editor"
    ],
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var series_number = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var series_text = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var series_title = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var seriesEditor = {
    type: "name",
    zotero: [
      "seriesEditor"
    ]
  };
  var seriesNumber = {
    type: "text",
    zotero: [
      "seriesNumber"
    ]
  };
  var seriesText = {
    type: "text",
    zotero: [
      "seriesText"
    ]
  };
  var seriesTitle = {
    type: "text",
    zotero: [
      "seriesTitle"
    ]
  };
  var session = {
    csl: [
      "chapter-number"
    ],
    type: "text",
    zotero: [
      "session"
    ]
  };
  var session_type = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var sessionType = {
    type: "text",
    zotero: [
      "sessionType",
      "type"
    ]
  };
  var short_title = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var shortTitle = {
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var signing_date = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var signingDate = {
    type: "date",
    zotero: [
      "signingDate"
    ]
  };
  var source = {
    csl: [
      "source"
    ],
    type: "text",
    zotero: [
      "libraryCatalog"
    ]
  };
  var sponsor = {
    csl: [
      "author"
    ],
    type: "name",
    zotero: [
      "sponsor"
    ]
  };
  var status = {
    csl: [
      "status"
    ],
    type: "text",
    zotero: [
      "status"
    ]
  };
  var studio = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var subject = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var submitted = {
    csl: [
      "submitted"
    ],
    type: "date",
    zotero: [
      "filingDate"
    ]
  };
  var supplement = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplement_name = {
    csl: [
      "supplement"
    ],
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var supplementName = {
    type: "text",
    zotero: [
      "supplementName"
    ]
  };
  var system = {
    type: "text",
    zotero: [
      "system"
    ]
  };
  var testimony_by = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var testimonyBy = {
    csl: [
      "testimonyBy"
    ],
    type: "name",
    zotero: [
      "testimonyBy"
    ]
  };
  var thesis_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var thesisType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var title = {
    csl: [
      "title"
    ],
    type: "text",
    zotero: [
      "title"
    ]
  };
  var title_short = {
    csl: [
      "title-short"
    ],
    type: "text",
    zotero: [
      "shortTitle"
    ]
  };
  var title_short2 = {
    csl: [
      "title-short"
    ],
    type: "text"
  };
  var translator = {
    csl: [
      "translator"
    ],
    type: "name",
    zotero: [
      "translator"
    ]
  };
  var treaty_number = {
    csl: [
      "number"
    ],
    type: "text",
    zotero: [
      "number"
    ]
  };
  var treatyNumber = {
    type: "text",
    zotero: [
      "number"
    ]
  };
  var type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var university = {
    csl: [
      "publisher"
    ],
    type: "text",
    zotero: [
      "publisher"
    ]
  };
  var url = {
    csl: [
      "URL"
    ],
    type: "text",
    zotero: [
      "url"
    ]
  };
  var version = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var version_number = {
    csl: [
      "version"
    ],
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var versionNumber = {
    type: "text",
    zotero: [
      "versionNumber"
    ]
  };
  var video_recording_format = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var videoRecordingFormat = {
    type: "text",
    zotero: [
      "medium"
    ]
  };
  var volume = {
    csl: [
      "volume"
    ],
    type: "text",
    zotero: [
      "volume"
    ]
  };
  var volume_title = {
    csl: [
      "volume-title"
    ],
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var volume_title2 = {
    csl: [
      "volume-title"
    ],
    type: "text"
  };
  var volumeTitle = {
    type: "text",
    zotero: [
      "volumeTitle"
    ]
  };
  var website_title = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var website_type = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var websiteTitle = {
    type: "text",
    zotero: [
      "publicationTitle"
    ]
  };
  var websiteType = {
    type: "text",
    zotero: [
      "type"
    ]
  };
  var words_by = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var wordsBy = {
    csl: [
      "wordsBy"
    ],
    type: "name",
    zotero: [
      "wordsBy"
    ]
  };
  var year_as_volume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var yearAsVolume = {
    type: "text",
    zotero: [
      "yearAsVolume"
    ]
  };
  var extra_fields_default = {
    DOI,
    ISBN,
    ISSN,
    PMCID,
    PMID,
    URL,
    "access date": access_date,
    accessDate,
    accessed,
    "admin flag": admin_flag,
    "admin-flag": admin_flag2,
    adminFlag,
    "adoption date": adoption_date,
    adoptionDate,
    album,
    "application number": application_number,
    applicationNumber,
    archive,
    "archive collection": archive_collection,
    "archive id": archive_id,
    "archive location": archive_location,
    "archive place": archive_place,
    "archive-place": archive_place2,
    archiveCollection,
    archiveID,
    archiveLocation,
    archive_collection: archive_collection2,
    archive_location: archive_location2,
    artist,
    "artwork medium": artwork_medium,
    "artwork size": artwork_size,
    artworkMedium,
    artworkSize,
    "assembly number": assembly_number,
    assemblyNumber,
    assignee,
    "attorney agent": attorney_agent,
    attorneyAgent,
    "audio file type": audio_file_type,
    "audio recording format": audio_recording_format,
    audioFileType,
    audioRecordingFormat,
    author,
    authority,
    "bill number": bill_number,
    billNumber,
    "blog title": blog_title,
    blogTitle,
    "book abbreviation": book_abbreviation,
    "book author": book_author,
    "book title": book_title,
    bookAbbreviation,
    bookAuthor,
    bookTitle,
    "call number": call_number,
    "call-number": call_number2,
    callNumber,
    cartographer,
    "case name": case_name,
    caseName,
    "cast member": cast_member,
    castMember,
    "chapter number": chapter_number,
    "chapter-number": chapter_number2,
    "citation key": citation_key,
    citationKey,
    code,
    "code number": code_number,
    "code pages": code_pages,
    "code volume": code_volume,
    codeNumber,
    codePages,
    codeVolume,
    "collection editor": collection_editor,
    "collection number": collection_number,
    "collection title": collection_title,
    "collection-editor": collection_editor2,
    "collection-number": collection_number2,
    "collection-title": collection_title2,
    commenter,
    committee,
    company,
    composer,
    "conference date": conference_date,
    "conference name": conference_name,
    conferenceDate,
    conferenceName,
    "container author": container_author,
    "container title": container_title,
    "container title short": container_title_short,
    "container-author": container_author2,
    "container-title": container_title2,
    "container-title-short": container_title_short2,
    contributor,
    cosponsor,
    counsel,
    country,
    court,
    "csl type": csl_type,
    "csl-type": csl_type2,
    date,
    "date amended": date_amended,
    "date decided": date_decided,
    "date enacted": date_enacted,
    dateAmended,
    dateDecided,
    dateEnacted,
    "dictionary title": dictionary_title,
    dictionaryTitle,
    dimensions,
    director,
    distributor,
    division,
    "docket number": docket_number,
    docketNumber,
    "document name": document_name,
    "document number": document_number,
    "document-name": document_name2,
    "document-number": document_number2,
    documentName,
    documentNumber,
    doi,
    edition,
    editor,
    "editorial director": editorial_director,
    "editorial-director": editorial_director2,
    "encyclopedia title": encyclopedia_title,
    encyclopediaTitle,
    "episode number": episode_number,
    episodeNumber,
    event,
    "event date": event_date,
    "event place": event_place,
    "event-date": event_date2,
    "event-place": event_place2,
    "filing date": filing_date,
    filingDate,
    "first page": first_page,
    firstPage,
    "forum title": forum_title,
    forumTitle,
    "gazette flag": gazette_flag,
    "gazette-flag": gazette_flag2,
    gazetteFlag,
    genre,
    guest,
    history,
    illustrator,
    institution,
    "interview medium": interview_medium,
    interviewMedium,
    interviewee,
    interviewer,
    inventor,
    isbn,
    issn,
    issue,
    "issue date": issue_date,
    issueDate,
    issued,
    "issuing authority": issuing_authority,
    issuingAuthority,
    "journal abbreviation": journal_abbreviation,
    journalAbbreviation,
    jurisdiction,
    label,
    language,
    "legal status": legal_status,
    legalStatus,
    "legislative body": legislative_body,
    legislativeBody,
    "letter type": letter_type,
    letterType,
    "library catalog": library_catalog,
    libraryCatalog,
    "manuscript type": manuscript_type,
    manuscriptType,
    "map type": map_type,
    mapType,
    medium,
    "meeting name": meeting_name,
    "meeting number": meeting_number,
    meetingName,
    meetingNumber,
    "name of act": name_of_act,
    nameOfAct,
    network,
    "news case date": news_case_date,
    newsCaseDate,
    "num pages": num_pages,
    numPages,
    number,
    "number of pages": number_of_pages,
    "number of volumes": number_of_volumes,
    "number-of-pages": number_of_pages2,
    "number-of-volumes": number_of_volumes2,
    numberOfVolumes,
    "opening date": opening_date,
    "opening-date": opening_date2,
    openingDate,
    opus,
    "original author": original_author,
    "original date": original_date,
    "original publisher": original_publisher,
    "original publisher place": original_publisher_place,
    "original title": original_title,
    "original-author": original_author2,
    "original-date": original_date2,
    "original-publisher": original_publisher2,
    "original-publisher-place": original_publisher_place2,
    "original-title": original_title2,
    originalDate,
    page,
    pages,
    "parent treaty": parent_treaty,
    parentTreaty,
    "patent number": patent_number,
    patentNumber,
    performer,
    place,
    pmcid,
    pmid,
    podcaster,
    "post type": post_type,
    postType,
    "presentation type": presentation_type,
    presentationType,
    presenter,
    "priority date": priority_date,
    "priority numbers": priority_numbers,
    priorityDate,
    priorityNumbers,
    "proceedings title": proceedings_title,
    proceedingsTitle,
    producer,
    "program title": program_title,
    programTitle,
    programmer,
    "programming language": programming_language,
    programmingLanguage,
    "public law number": public_law_number,
    publicLawNumber,
    "publication date": publication_date,
    "publication number": publication_number,
    "publication title": publication_title,
    "publication-date": publication_date2,
    "publication-number": publication_number2,
    publicationDate,
    publicationNumber,
    publicationTitle,
    publisher,
    "publisher place": publisher_place,
    "publisher-place": publisher_place2,
    recipient,
    references,
    "regnal year": regnal_year,
    regnalYear,
    "regulation type": regulation_type,
    regulationType,
    "regulatory body": regulatory_body,
    regulatoryBody,
    reign,
    release,
    "report number": report_number,
    "report type": report_type,
    reportNumber,
    reportType,
    reporter,
    "reporter volume": reporter_volume,
    reporterVolume,
    repository,
    "resolution label": resolution_label,
    resolutionLabel,
    "reviewed author": reviewed_author,
    "reviewed title": reviewed_title,
    "reviewed-author": reviewed_author2,
    "reviewed-title": reviewed_title2,
    reviewedAuthor,
    rights,
    "running time": running_time,
    runningTime,
    scale,
    scriptwriter,
    section,
    series,
    "series editor": series_editor,
    "series number": series_number,
    "series text": series_text,
    "series title": series_title,
    seriesEditor,
    seriesNumber,
    seriesText,
    seriesTitle,
    session,
    "session type": session_type,
    sessionType,
    "short title": short_title,
    shortTitle,
    "signing date": signing_date,
    signingDate,
    source,
    sponsor,
    status,
    studio,
    subject,
    submitted,
    supplement,
    "supplement name": supplement_name,
    supplementName,
    system,
    "testimony by": testimony_by,
    testimonyBy,
    "thesis type": thesis_type,
    thesisType,
    title,
    "title short": title_short,
    "title-short": title_short2,
    translator,
    "treaty number": treaty_number,
    treatyNumber,
    type,
    university,
    url,
    version,
    "version number": version_number,
    versionNumber,
    "video recording format": video_recording_format,
    videoRecordingFormat,
    volume,
    "volume title": volume_title,
    "volume-title": volume_title2,
    volumeTitle,
    "website title": website_title,
    "website type": website_type,
    websiteTitle,
    websiteType,
    "words by": words_by,
    wordsBy,
    "year as volume": year_as_volume,
    yearAsVolume
  };

  // content/extra.ts
  var CSL = __toESM(require_citeproc_commonjs());
  function cslCreator(value) {
    const creator = value.split(/\s*\|\|\s*/);
    if (creator.length === 2) {
      const csl_creator = { family: creator[0] || "", given: creator[1] || "" };
      CSL.parseParticles(csl_creator);
      return csl_creator;
    } else {
      return { literal: value };
    }
  }
  var re = {
    old: /^{:((?:bib(?:la)?)?tex\.)?([^:]+)(:)\s*([^}]+)}$/,
    new: /^((?:bib(?:la)?)?tex\.)?([^:=]+)\s*([:=])\s*([\S\s]*)/
  };
  var otherFields = ["lccn", "mr", "zbl", "arxiv", "jstor", "hdl", "googlebooksid"];
  function get(extra, mode, options2) {
    let defaults2 = false;
    if (!options2) {
      options2 = { citationKey: true, aliases: true, kv: true, tex: true };
      defaults2 = true;
    }
    const other = { zotero: "csl", csl: "zotero" }[mode];
    extra = extra || "";
    const extraFields = {
      kv: options2.kv || defaults2 ? {} : void 0,
      creator: {},
      creators: [],
      tex: options2.tex || defaults2 ? {} : void 0,
      citationKey: "",
      aliases: options2.aliases || defaults2 ? [] : void 0
    };
    let ef;
    extra = extra.split("\n").filter((line, i) => {
      const m = line.match(re.old) || line.match(re.new);
      if (!m)
        return true;
      let [, tex, key, assign, value] = m;
      const raw = assign === "=";
      if (!tex && raw)
        return true;
      if (tex) {
        key = key.trim().toLowerCase();
      } else {
        key = key.trim().replace(/[-_]/g, " ").replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
      }
      value = value.trim();
      if (options2.citationKey && !tex && ["citation key", "bibtex"].includes(key)) {
        extraFields.citationKey = value;
        return false;
      }
      if (options2.aliases && !tex && key === "citation key alias") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options2.aliases && tex && options2.aliases && key === "ids") {
        extraFields.aliases = [...extraFields.aliases, ...value.split(/s*,\s*/).filter((alias) => alias)];
        return false;
      }
      if (options2.kv && key !== "citation key" && (ef = extra_fields_exports[key]) && !tex) {
        for (const field of ef[mode] || ef[other]) {
          switch (ef.type) {
            case "name":
              extraFields.creator[field] = extraFields.creator[field] || [];
              extraFields.creator[field].push(value);
              extraFields.creators.push({ name: value, type: field });
              break;
            case "text":
            case "date":
              extraFields.kv[field] = value;
              break;
            default:
              throw new Error(`Unexpected extra field type ${ef.type}`);
          }
        }
        return false;
      }
      if (options2.tex && tex && !key.includes(" ")) {
        extraFields.tex[tex + key] = { value, raw, line: i };
        return false;
      }
      if (options2.tex && !tex && otherFields.includes(key.replace(/[- ]/g, ""))) {
        extraFields.tex[`tex.${key.replace(/[- ]/g, "")}`] = { value, line: i };
        return false;
      }
      return true;
    }).join("\n").trim();
    extraFields.aliases = Array.from(new Set(extraFields.aliases)).filter((key) => key !== extraFields.citationKey);
    return { extra, extraFields };
  }

  // content/logger.ts
  init_globals();

  // content/stringify.ts
  init_globals();
  var import_fast_safe_stringify = __toESM(require_fast_safe_stringify());
  function asciify(str) {
    return str.replace(/[\u007F-\uFFFF]/g, (chr) => `\\u${`0000${chr.charCodeAt(0).toString(16)}`.substr(-4)}`);
  }

  // content/environment.ts
  init_globals();
  var environment = {
    node: typeof process === "object" && typeof __require === "function" && typeof importScripts !== "function",
    zotero: typeof Components !== "undefined",
    name: ""
  };
  environment.name = Object.entries(environment).map(([name, on]) => on ? name : "").filter((name) => name).join("/");

  // content/logger.ts
  var import_loupe = __toESM(require_loupe());
  var Logger = class {
    constructor() {
      this.verbose = false;
    }
    format({ error = false, worker = 0, translator: translator2 = "", issue: issue2 = 0 }, msg) {
      let workername = `${worker}`;
      let diff = null;
      const now = Date.now();
      if (this.timestamp)
        diff = now - this.timestamp;
      this.timestamp = now;
      if (typeof msg !== "string") {
        let output = issue2 ? `issue ${issue2}: ` : "";
        for (const m of msg) {
          const type2 = typeof m;
          if (type2 === "string" || m instanceof String || type2 === "number" || type2 === "undefined" || type2 === "boolean" || m === null) {
            output += m;
          } else if (m instanceof Error || m instanceof ErrorEvent || m.toString() === "[object ErrorEvent]") {
            output += this.formatError(m);
          } else if (m && type2 === "object" && m.message) {
            output += this.formatError({ message: m.errorCode ? `${m.message} (${m.errorCode})` : m.message, filename: m.fileName, lineno: m.lineNumber, colno: m.column, stack: m.stack });
          } else {
            output += (0, import_loupe.inspect)(m);
          }
          output += " ";
        }
        msg = output;
      }
      if (Zotero.worker) {
        if (!worker && workerJob.job) {
          worker = workerJob.job;
          workername = `${workerJob.job}`;
        }
        translator2 = translator2 || workerJob.translator;
      } else {
        if (worker)
          workername = `${worker} (but environment is ${environment.name})`;
        if (!translator2 && typeof ZOTERO_TRANSLATOR_INFO !== "undefined")
          translator2 = ZOTERO_TRANSLATOR_INFO.label;
      }
      const prefix = ["better-bibtex", translator2, error && ":error:", worker && `(worker ${workername})`].filter((p) => p).join(" ");
      return `{${prefix}} +${diff} ${asciify(msg)}`;
    }
    formatError(e, indent = "") {
      let msg = [e.name, e.message].filter((s) => s).join(": ");
      if (e.filename || e.fileName)
        msg += ` in ${e.filename || e.fileName}`;
      if (e.lineno || e.lineNumber) {
        msg += ` line ${e.lineno}`;
        if (e.colno)
          msg += `, col ${e.colno}`;
      }
      if (e.stack)
        msg += `
${indent}${e.stack.replace(/\n/g, `${indent}
`)}`;
      if (e.error)
        msg += `
${indent}${this.formatError(e.error, "  ")}
`;
      return `${indent}<Error: ${msg}>`;
    }
    get enabled() {
      if (typeof ZOTERO_TRANSLATOR_INFO === "undefined")
        return Zotero.Debug.enabled;
      if (!Zotero.worker)
        return true;
      return !workerJob || workerJob.debugEnabled;
    }
    debug(...msg) {
      if (this.enabled)
        Zotero.debug(this.format({}, msg));
    }
    for(issue2, ...msg) {
      if (this.enabled)
        Zotero.debug(this.format({ issue: issue2 }, msg));
    }
    error(...msg) {
      Zotero.debug(this.format({ error: true }, msg));
    }
    status({ error = false, worker = 0, translator: translator2 = "" }, ...msg) {
      if (error || this.enabled)
        Zotero.debug(this.format({ error, worker, translator: translator2 }, msg));
    }
  };
  var log = new Logger();

  // translators/lib/postscript.ts
  init_globals();
  function postscript(kind, main, guard) {
    let body = ` // eslint-disable-line no-comma-dangle
    // phase out reference
    const reference = entry
  `;
    if (kind === "tex") {
      body += `
      const entrytype = reference.referencetype = entry.entrytype
    `;
    }
    body += `
    const result = (() => {
      ${main};
    })()
  `;
    if (kind === "tex") {
      body += `
      if (entry.entrytype !== entrytype) {
        // entrytype changed, keep as-is
      }
      else if (reference.referencetype !== entrytype) {
        // phase out reference
        entry.entrytype = reference.referencetype
      }
      delete entry.referencetype
    `;
    }
    body += `
    switch (typeof result) {
      case 'undefined': return { cache: true, write: true }
      case 'boolean': return { cache: result, write: true }
      default: return { cache: true, write: true, ...result }
    }
  `;
    if (guard) {
      body = `
      ${guard} = true;
      try {
        ${body}
      }
      finally {
        ${guard} = false;
      }
    `;
    }
    return new Function("entry", "item", "Translator", "Zotero", "extra", body);
  }
  var noop = function(_entry, _item, _translator, _extra) {
    return { cache: true, write: true };
  };

  // translators/csl/csl.ts
  var validCSLTypes = require_csl_types();
  var keyOrder = [
    "id",
    "year",
    "season",
    "month",
    "day",
    "circa"
  ].reduce((acc, field, idx) => {
    acc[field] = idx + 1;
    return acc;
  }, {});
  var CSLExporter = new class {
    initialize() {
      try {
        if (Translator.preferences.postscript.trim()) {
          this.postscript = postscript("csl", Translator.preferences.postscript);
        } else {
          this.postscript = noop;
        }
      } catch (err) {
        this.postscript = noop;
        log.error("failed to install postscript", err, "\n", Translator.preferences.postscript);
      }
    }
    postscript(_entry, _item, _translator, _zotero, _extra) {
      return { cache: true, write: true };
    }
    doExport() {
      const items = [];
      const order = [];
      for (const item of Translator.regularitems) {
        order.push({ citationKey: item.citationKey, i: items.length });
        let cached;
        if (cached = Zotero.BetterBibTeX.cacheFetch(item.itemID, Translator.options, Translator.preferences)) {
          items.push(cached.entry);
          continue;
        }
        simplifyForExport(item);
        if (item.accessDate) {
          item.accessDate = item.accessDate.replace(/T?[0-9]{2}:[0-9]{2}:[0-9]{2}.*/, "").trim();
        }
        Object.assign(item, get(item.extra, "csl"));
        let csl = Zotero.Utilities.itemToCSLJSON(item);
        csl["citation-key"] = item.citationKey;
        if (Zotero.worker)
          csl.note = item.extra || void 0;
        if (item.place)
          csl[item.itemType === "presentation" ? "event-place" : "publisher-place"] = item.place;
        if (item.ISBN)
          csl.ISBN = item.ISBN;
        if (item.itemType === "videoRecording" && csl.type === "video")
          csl.type = "motion_picture";
        if (csl.journalAbbreviation)
          [csl.journalAbbreviation, csl["container-title-short"]] = [csl["container-title-short"], csl.journalAbbreviation];
        if (item.date) {
          const parsed = Zotero.BetterBibTeX.parseDate(item.date);
          if (parsed.type)
            csl.issued = this.date2CSL(parsed);
          if (parsed.orig)
            csl["original-date"] = this.date2CSL(parsed.orig);
        }
        if (item.accessDate)
          csl.accessed = this.date2CSL(Zotero.BetterBibTeX.parseDate(item.accessDate));
        if ((csl.type === "motion_picture" || csl.type === "broadcast") && csl.author && !csl.director)
          [csl.author, csl.director] = [csl.director, csl.author];
        csl.id = item.citationKey;
        if (csl.type === "broadcast" && csl.genre === "television broadcast")
          delete csl.genre;
        const extraFields = JSON.parse(JSON.stringify(item.extraFields));
        if (!validCSLTypes.includes(item.extraFields.kv["csl-type"]) && validCSLTypes.includes(item.extraFields.kv.type)) {
          csl.type = item.extraFields.kv.type;
          delete item.extraFields.kv.type;
        }
        for (const [name, value] of Object.entries(item.extraFields.kv)) {
          const ef = extra_fields_exports[name];
          if (!ef.csl)
            continue;
          if (ef.type === "date") {
            csl[name] = this.date2CSL(Zotero.BetterBibTeX.parseDate(value));
          } else if (name === "csl-type") {
            if (!validCSLTypes.includes(value))
              continue;
            csl.type = value;
          } else if (!csl[name]) {
            csl[name] = value;
          }
          delete item.extraFields.kv[name];
        }
        for (const [field, value] of Object.entries(item.extraFields.creator)) {
          if (!extra_fields_exports[field].csl)
            continue;
          csl[field] = value.map(cslCreator);
          delete item.extraFields.creator[field];
        }
        for (const kind of ["translator", "author", "editor", "director", "reviewed-author"]) {
          for (const creator of csl[kind] || []) {
            delete creator.multi;
          }
        }
        delete csl.multi;
        delete csl.system_id;
        let allow = { cache: true, write: true };
        try {
          allow = this.postscript(csl, item, Translator, Zotero, extraFields);
        } catch (err) {
          log.error("CSL.postscript failed:", err);
          allow.cache = false;
        }
        for (const field of Translator.skipFields) {
          delete csl[field];
        }
        csl = this.sortObject(csl);
        csl = this.serialize(csl);
        if (allow.cache)
          Zotero.BetterBibTeX.cacheStore(item.itemID, Translator.options, Translator.preferences, csl);
        if (allow.write)
          items.push(csl);
      }
      order.sort((a, b) => a.citationKey.localeCompare(b.citationKey, void 0, { sensitivity: "base" }));
      Zotero.write(this.flush(order.map((o) => items[o.i])));
    }
    keySort(a, b) {
      const oa = keyOrder[a];
      const ob = keyOrder[b];
      if (oa && ob)
        return oa - ob;
      if (oa)
        return -1;
      if (ob)
        return 1;
      return a.localeCompare(b, void 0, { sensitivity: "base" });
    }
    sortObject(obj) {
      if (obj && !Array.isArray(obj) && typeof obj === "object") {
        for (const field of Object.keys(obj).sort(this.keySort)) {
          const value = obj[field];
          delete obj[field];
          obj[field] = this.sortObject(value);
        }
      }
      return obj;
    }
  }();

  // translators/Better CSL JSON.ts
  function date2csl(date2) {
    let csl;
    switch (date2.type) {
      case "open":
        return [0];
      case "date":
        csl = [date2.year > 0 ? date2.year : date2.year - 1];
        if (date2.month) {
          csl.push(date2.month);
          if (date2.day) {
            csl.push(date2.day);
          }
        }
        return csl;
      case "season":
        return [date2.year > 0 ? date2.year : date2.year - 1, date2.season + 12];
      default:
        throw new Error(`Expected date or open, got ${date2.type}`);
    }
  }
  CSLExporter.date2CSL = (date2) => {
    switch (date2.type) {
      case "date":
        return {
          "date-parts": [date2csl(date2)],
          circa: date2.approximate || date2.uncertain ? true : void 0
        };
      case "interval":
        return {
          "date-parts": [date2csl(date2.from), date2csl(date2.to)],
          circa: date2.from.approximate || date2.from.uncertain || date2.to.approximate || date2.to.uncertain ? true : void 0
        };
      case "verbatim":
        return { literal: date2.verbatim };
      case "season":
        return {
          "date-parts": [[date2.year]],
          season: date2.season,
          circa: date2.approximate || date2.uncertain ? true : void 0
        };
      default:
        throw new Error(`Unexpected date type ${JSON.stringify(date2)}`);
    }
  };
  CSLExporter.serialize = (csl) => JSON.stringify(csl);
  CSLExporter.flush = (items) => `[
${items.map((item) => `  ${item}`).join(",\n")}
]
`;
  function doExport() {
    Translator.init("export");
    CSLExporter.initialize();
    CSLExporter.doExport();
  }
  return __toCommonJS(Better_CSL_JSON_exports);
})();
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
var { Translator, doExport } = BetterCSLJSON__Translator__doExport;
